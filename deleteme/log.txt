Args: ../build/Debug/bin/llvm-tblgen --gen-i-dagsel ../llvm/lib/Target/Mips/Mips.td -I../llvm/include/ -I../llvm/lib/Target/Mips/ -o ../deleteme/test-i-dag-sel.inc -debug 
LUiORiPred: 	(imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })
LUiPred: 	(imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })
MIPS_BRANCH_F: 	0:{ *:[i32] }
MIPS_BRANCH_T: 	1:{ *:[i32] }
ORiPred: 	(imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })<<X:LO16>>
PowerOf2HI: 	(imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })
PowerOf2LO: 	(imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })
PowerOf2LO_i32: 	(imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })
alignednontemporalload(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_load>><<P:Predicate_nontemporalload>>
alignednontemporalstore(val, ptr): 	(st node:{}:$val, node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedstore>><<P:Predicate_store>><<P:Predicate_nontemporalstore>>
any_extloadf32(ptr): [
	(strict_fpextend:{ *:[f64] } (ld:{ *:[f32] } node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_load>>)
	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_extload>><<P:Predicate_extloadf32>>
]
any_extloadf64(ptr): [
	(strict_fpextend:{ *:[] } (ld:{ *:[] } node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_load>>)
	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_extload>><<P:Predicate_extloadf64>>
]
any_fadd(lhs, rhs): [
	(strict_fadd:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$lhs, node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$rhs)
	(fadd:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$lhs, node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$rhs)
]
any_fceil(src): [
	(strict_fceil:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
	(fceil:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
]
any_fcos(src): [
	(strict_fcos:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
	(fcos:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
]
any_fdiv(lhs, rhs): [
	(strict_fdiv:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$lhs, node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$rhs)
	(fdiv:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$lhs, node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$rhs)
]
any_fexp2(src): [
	(strict_fexp2:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
	(fexp2:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
]
any_ffloor(src): [
	(strict_ffloor:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
	(ffloor:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
]
any_flog2(src): [
	(strict_flog2:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
	(flog2:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
]
any_fma(src1, src2, src3): [
	(strict_fma:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src1, node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src2, node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src3)
	(fma:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src1, node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src2, node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src3)
]
any_fmaximum(lhs, rhs): [
	(strict_fmaximum:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$lhs, node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$rhs)
	(fmaximum:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$lhs, node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$rhs)
]
any_fmaxnum(lhs, rhs): [
	(strict_fmaxnum:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$lhs, node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$rhs)
	(fmaxnum:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$lhs, node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$rhs)
]
any_fminimum(lhs, rhs): [
	(strict_fminimum:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$lhs, node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$rhs)
	(fminimum:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$lhs, node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$rhs)
]
any_fminnum(lhs, rhs): [
	(strict_fminnum:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$lhs, node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$rhs)
	(fminnum:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$lhs, node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$rhs)
]
any_fmul(lhs, rhs): [
	(strict_fmul:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$lhs, node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$rhs)
	(fmul:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$lhs, node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$rhs)
]
any_fnearbyint(src): [
	(strict_fnearbyint:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
	(fnearbyint:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
]
any_fp_to_sint(src): [
	(strict_fp_to_sint:{ *:[i32 i64 v4i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
	(fp_to_sint:{ *:[i32 i64 v4i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
]
any_fp_to_uint(src): [
	(strict_fp_to_uint:{ *:[i32 i64 v4i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
	(fp_to_uint:{ *:[i32 i64 v4i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
]
any_fpextend(src): [
	(strict_fpextend:{ *:[f32 f64] } node:{ *:[f16 f32] }:$src)
	(fpextend:{ *:[f32 f64] } node:{ *:[f16 f32] }:$src)
]
any_fpow(lhs, rhs): [
	(strict_fpow:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$lhs, node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$rhs)
	(fpow:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$lhs, node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$rhs)
]
any_fpround(src): [
	(strict_fpround:{ *:[f16 f32] } node:{ *:[f32 f64] }:$src)
	(fpround:{ *:[f16 f32] } node:{ *:[f32 f64] }:$src)
]
any_frem(lhs, rhs): [
	(strict_frem:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$lhs, node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$rhs)
	(frem:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$lhs, node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$rhs)
]
any_frint(src): [
	(strict_frint:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
	(frint:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
]
any_fround(src): [
	(strict_fround:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
	(fround:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
]
any_fsin(src): [
	(strict_fsin:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
	(fsin:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
]
any_fsqrt(src): [
	(strict_fsqrt:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
	(fsqrt:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
]
any_fsub(lhs, rhs): [
	(strict_fsub:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$lhs, node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$rhs)
	(fsub:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$lhs, node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$rhs)
]
any_ftrunc(src): [
	(strict_ftrunc:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
	(ftrunc:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
]
any_llrint(src): [
	(strict_llrint:{ *:[i32 i64 v4i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
	(llrint:{ *:[i32 i64 v4i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
]
any_llround(src): [
	(strict_llround:{ *:[i32 i64 v4i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
	(llround:{ *:[i32 i64 v4i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
]
any_lrint(src): [
	(strict_lrint:{ *:[i32 i64 v4i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
	(lrint:{ *:[i32 i64 v4i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
]
any_lround(src): [
	(strict_lround:{ *:[i32 i64 v4i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
	(lround:{ *:[i32 i64 v4i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$src)
]
any_sint_to_fp(src): [
	(strict_sint_to_fp:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[i32 i64 v4i8 v2i16 v8i16 v4i32 v2i64] }:$src)
	(sint_to_fp:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[i32 i64 v4i8 v2i16 v8i16 v4i32 v2i64] }:$src)
]
any_uint_to_fp(src): [
	(strict_uint_to_fp:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[i32 i64 v4i8 v2i16 v8i16 v4i32 v2i64] }:$src)
	(uint_to_fp:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[i32 i64 v4i8 v2i16 v8i16 v4i32 v2i64] }:$src)
]
assertzext_lt_i32(src): 	(assertzext:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$src)
atomic_cmp_swap_16(ptr, cmp, val): 	(atomic_cmp_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$cmp, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_cmp_swap_16_acq_rel(ptr, cmp, val): 	(atomic_cmp_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$cmp, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_cmp_swap_16>>
atomic_cmp_swap_16_acquire(ptr, cmp, val): 	(atomic_cmp_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$cmp, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_cmp_swap_16>>
atomic_cmp_swap_16_monotonic(ptr, cmp, val): 	(atomic_cmp_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$cmp, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_cmp_swap_16>>
atomic_cmp_swap_16_release(ptr, cmp, val): 	(atomic_cmp_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$cmp, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_cmp_swap_16>>
atomic_cmp_swap_16_seq_cst(ptr, cmp, val): 	(atomic_cmp_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$cmp, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_cmp_swap_16>>
atomic_cmp_swap_32(ptr, cmp, val): 	(atomic_cmp_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$cmp, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_cmp_swap_32_acq_rel(ptr, cmp, val): 	(atomic_cmp_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$cmp, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_cmp_swap_32>>
atomic_cmp_swap_32_acquire(ptr, cmp, val): 	(atomic_cmp_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$cmp, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_cmp_swap_32>>
atomic_cmp_swap_32_monotonic(ptr, cmp, val): 	(atomic_cmp_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$cmp, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_cmp_swap_32>>
atomic_cmp_swap_32_release(ptr, cmp, val): 	(atomic_cmp_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$cmp, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_cmp_swap_32>>
atomic_cmp_swap_32_seq_cst(ptr, cmp, val): 	(atomic_cmp_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$cmp, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_cmp_swap_32>>
atomic_cmp_swap_64(ptr, cmp, val): 	(atomic_cmp_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$cmp, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_cmp_swap_64_acq_rel(ptr, cmp, val): 	(atomic_cmp_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$cmp, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_cmp_swap_64>>
atomic_cmp_swap_64_acquire(ptr, cmp, val): 	(atomic_cmp_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$cmp, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_cmp_swap_64>>
atomic_cmp_swap_64_monotonic(ptr, cmp, val): 	(atomic_cmp_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$cmp, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_cmp_swap_64>>
atomic_cmp_swap_64_release(ptr, cmp, val): 	(atomic_cmp_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$cmp, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_cmp_swap_64>>
atomic_cmp_swap_64_seq_cst(ptr, cmp, val): 	(atomic_cmp_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$cmp, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_cmp_swap_64>>
atomic_cmp_swap_8(ptr, cmp, val): 	(atomic_cmp_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$cmp, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_cmp_swap_8_acq_rel(ptr, cmp, val): 	(atomic_cmp_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$cmp, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_cmp_swap_8>>
atomic_cmp_swap_8_acquire(ptr, cmp, val): 	(atomic_cmp_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$cmp, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_cmp_swap_8>>
atomic_cmp_swap_8_monotonic(ptr, cmp, val): 	(atomic_cmp_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$cmp, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_cmp_swap_8>>
atomic_cmp_swap_8_release(ptr, cmp, val): 	(atomic_cmp_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$cmp, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_cmp_swap_8>>
atomic_cmp_swap_8_seq_cst(ptr, cmp, val): 	(atomic_cmp_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$cmp, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_cmp_swap_8>>
atomic_load_16(ptr): 	(atomic_load:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr)
atomic_load_32(ptr): 	(atomic_load:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr)
atomic_load_64(ptr): 	(atomic_load:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr)
atomic_load_8(ptr): 	(atomic_load:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr)
atomic_load_add_16(ptr, val): 	(atomic_load_add:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_add_16_acq_rel(ptr, val): 	(atomic_load_add:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_add_16>>
atomic_load_add_16_acquire(ptr, val): 	(atomic_load_add:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_add_16>>
atomic_load_add_16_monotonic(ptr, val): 	(atomic_load_add:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_add_16>>
atomic_load_add_16_release(ptr, val): 	(atomic_load_add:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_add_16>>
atomic_load_add_16_seq_cst(ptr, val): 	(atomic_load_add:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_add_16>>
atomic_load_add_32(ptr, val): 	(atomic_load_add:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_add_32_acq_rel(ptr, val): 	(atomic_load_add:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_add_32>>
atomic_load_add_32_acquire(ptr, val): 	(atomic_load_add:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_add_32>>
atomic_load_add_32_monotonic(ptr, val): 	(atomic_load_add:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_add_32>>
atomic_load_add_32_release(ptr, val): 	(atomic_load_add:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_add_32>>
atomic_load_add_32_seq_cst(ptr, val): 	(atomic_load_add:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_add_32>>
atomic_load_add_64(ptr, val): 	(atomic_load_add:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_add_64_acq_rel(ptr, val): 	(atomic_load_add:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_add_64>>
atomic_load_add_64_acquire(ptr, val): 	(atomic_load_add:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_add_64>>
atomic_load_add_64_monotonic(ptr, val): 	(atomic_load_add:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_add_64>>
atomic_load_add_64_release(ptr, val): 	(atomic_load_add:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_add_64>>
atomic_load_add_64_seq_cst(ptr, val): 	(atomic_load_add:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_add_64>>
atomic_load_add_8(ptr, val): 	(atomic_load_add:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_add_8_acq_rel(ptr, val): 	(atomic_load_add:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_add_8>>
atomic_load_add_8_acquire(ptr, val): 	(atomic_load_add:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_add_8>>
atomic_load_add_8_monotonic(ptr, val): 	(atomic_load_add:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_add_8>>
atomic_load_add_8_release(ptr, val): 	(atomic_load_add:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_add_8>>
atomic_load_add_8_seq_cst(ptr, val): 	(atomic_load_add:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_add_8>>
atomic_load_and_16(ptr, val): 	(atomic_load_and:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_and_16_acq_rel(ptr, val): 	(atomic_load_and:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_and_16>>
atomic_load_and_16_acquire(ptr, val): 	(atomic_load_and:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_and_16>>
atomic_load_and_16_monotonic(ptr, val): 	(atomic_load_and:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_and_16>>
atomic_load_and_16_release(ptr, val): 	(atomic_load_and:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_and_16>>
atomic_load_and_16_seq_cst(ptr, val): 	(atomic_load_and:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_and_16>>
atomic_load_and_32(ptr, val): 	(atomic_load_and:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_and_32_acq_rel(ptr, val): 	(atomic_load_and:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_and_32>>
atomic_load_and_32_acquire(ptr, val): 	(atomic_load_and:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_and_32>>
atomic_load_and_32_monotonic(ptr, val): 	(atomic_load_and:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_and_32>>
atomic_load_and_32_release(ptr, val): 	(atomic_load_and:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_and_32>>
atomic_load_and_32_seq_cst(ptr, val): 	(atomic_load_and:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_and_32>>
atomic_load_and_64(ptr, val): 	(atomic_load_and:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_and_64_acq_rel(ptr, val): 	(atomic_load_and:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_and_64>>
atomic_load_and_64_acquire(ptr, val): 	(atomic_load_and:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_and_64>>
atomic_load_and_64_monotonic(ptr, val): 	(atomic_load_and:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_and_64>>
atomic_load_and_64_release(ptr, val): 	(atomic_load_and:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_and_64>>
atomic_load_and_64_seq_cst(ptr, val): 	(atomic_load_and:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_and_64>>
atomic_load_and_8(ptr, val): 	(atomic_load_and:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_and_8_acq_rel(ptr, val): 	(atomic_load_and:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_and_8>>
atomic_load_and_8_acquire(ptr, val): 	(atomic_load_and:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_and_8>>
atomic_load_and_8_monotonic(ptr, val): 	(atomic_load_and:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_and_8>>
atomic_load_and_8_release(ptr, val): 	(atomic_load_and:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_and_8>>
atomic_load_and_8_seq_cst(ptr, val): 	(atomic_load_and:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_and_8>>
atomic_load_clr_16(ptr, val): 	(atomic_load_clr:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_clr_16_acq_rel(ptr, val): 	(atomic_load_clr:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_clr_16>>
atomic_load_clr_16_acquire(ptr, val): 	(atomic_load_clr:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_clr_16>>
atomic_load_clr_16_monotonic(ptr, val): 	(atomic_load_clr:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_clr_16>>
atomic_load_clr_16_release(ptr, val): 	(atomic_load_clr:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_clr_16>>
atomic_load_clr_16_seq_cst(ptr, val): 	(atomic_load_clr:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_clr_16>>
atomic_load_clr_32(ptr, val): 	(atomic_load_clr:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_clr_32_acq_rel(ptr, val): 	(atomic_load_clr:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_clr_32>>
atomic_load_clr_32_acquire(ptr, val): 	(atomic_load_clr:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_clr_32>>
atomic_load_clr_32_monotonic(ptr, val): 	(atomic_load_clr:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_clr_32>>
atomic_load_clr_32_release(ptr, val): 	(atomic_load_clr:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_clr_32>>
atomic_load_clr_32_seq_cst(ptr, val): 	(atomic_load_clr:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_clr_32>>
atomic_load_clr_64(ptr, val): 	(atomic_load_clr:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_clr_64_acq_rel(ptr, val): 	(atomic_load_clr:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_clr_64>>
atomic_load_clr_64_acquire(ptr, val): 	(atomic_load_clr:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_clr_64>>
atomic_load_clr_64_monotonic(ptr, val): 	(atomic_load_clr:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_clr_64>>
atomic_load_clr_64_release(ptr, val): 	(atomic_load_clr:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_clr_64>>
atomic_load_clr_64_seq_cst(ptr, val): 	(atomic_load_clr:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_clr_64>>
atomic_load_clr_8(ptr, val): 	(atomic_load_clr:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_clr_8_acq_rel(ptr, val): 	(atomic_load_clr:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_clr_8>>
atomic_load_clr_8_acquire(ptr, val): 	(atomic_load_clr:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_clr_8>>
atomic_load_clr_8_monotonic(ptr, val): 	(atomic_load_clr:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_clr_8>>
atomic_load_clr_8_release(ptr, val): 	(atomic_load_clr:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_clr_8>>
atomic_load_clr_8_seq_cst(ptr, val): 	(atomic_load_clr:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_clr_8>>
atomic_load_max_16(ptr, val): 	(atomic_load_max:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_max_16_acq_rel(ptr, val): 	(atomic_load_max:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_max_16>>
atomic_load_max_16_acquire(ptr, val): 	(atomic_load_max:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_max_16>>
atomic_load_max_16_monotonic(ptr, val): 	(atomic_load_max:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_max_16>>
atomic_load_max_16_release(ptr, val): 	(atomic_load_max:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_max_16>>
atomic_load_max_16_seq_cst(ptr, val): 	(atomic_load_max:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_max_16>>
atomic_load_max_32(ptr, val): 	(atomic_load_max:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_max_32_acq_rel(ptr, val): 	(atomic_load_max:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_max_32>>
atomic_load_max_32_acquire(ptr, val): 	(atomic_load_max:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_max_32>>
atomic_load_max_32_monotonic(ptr, val): 	(atomic_load_max:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_max_32>>
atomic_load_max_32_release(ptr, val): 	(atomic_load_max:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_max_32>>
atomic_load_max_32_seq_cst(ptr, val): 	(atomic_load_max:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_max_32>>
atomic_load_max_64(ptr, val): 	(atomic_load_max:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_max_64_acq_rel(ptr, val): 	(atomic_load_max:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_max_64>>
atomic_load_max_64_acquire(ptr, val): 	(atomic_load_max:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_max_64>>
atomic_load_max_64_monotonic(ptr, val): 	(atomic_load_max:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_max_64>>
atomic_load_max_64_release(ptr, val): 	(atomic_load_max:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_max_64>>
atomic_load_max_64_seq_cst(ptr, val): 	(atomic_load_max:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_max_64>>
atomic_load_max_8(ptr, val): 	(atomic_load_max:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_max_8_acq_rel(ptr, val): 	(atomic_load_max:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_max_8>>
atomic_load_max_8_acquire(ptr, val): 	(atomic_load_max:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_max_8>>
atomic_load_max_8_monotonic(ptr, val): 	(atomic_load_max:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_max_8>>
atomic_load_max_8_release(ptr, val): 	(atomic_load_max:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_max_8>>
atomic_load_max_8_seq_cst(ptr, val): 	(atomic_load_max:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_max_8>>
atomic_load_min_16(ptr, val): 	(atomic_load_min:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_min_16_acq_rel(ptr, val): 	(atomic_load_min:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_min_16>>
atomic_load_min_16_acquire(ptr, val): 	(atomic_load_min:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_min_16>>
atomic_load_min_16_monotonic(ptr, val): 	(atomic_load_min:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_min_16>>
atomic_load_min_16_release(ptr, val): 	(atomic_load_min:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_min_16>>
atomic_load_min_16_seq_cst(ptr, val): 	(atomic_load_min:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_min_16>>
atomic_load_min_32(ptr, val): 	(atomic_load_min:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_min_32_acq_rel(ptr, val): 	(atomic_load_min:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_min_32>>
atomic_load_min_32_acquire(ptr, val): 	(atomic_load_min:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_min_32>>
atomic_load_min_32_monotonic(ptr, val): 	(atomic_load_min:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_min_32>>
atomic_load_min_32_release(ptr, val): 	(atomic_load_min:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_min_32>>
atomic_load_min_32_seq_cst(ptr, val): 	(atomic_load_min:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_min_32>>
atomic_load_min_64(ptr, val): 	(atomic_load_min:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_min_64_acq_rel(ptr, val): 	(atomic_load_min:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_min_64>>
atomic_load_min_64_acquire(ptr, val): 	(atomic_load_min:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_min_64>>
atomic_load_min_64_monotonic(ptr, val): 	(atomic_load_min:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_min_64>>
atomic_load_min_64_release(ptr, val): 	(atomic_load_min:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_min_64>>
atomic_load_min_64_seq_cst(ptr, val): 	(atomic_load_min:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_min_64>>
atomic_load_min_8(ptr, val): 	(atomic_load_min:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_min_8_acq_rel(ptr, val): 	(atomic_load_min:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_min_8>>
atomic_load_min_8_acquire(ptr, val): 	(atomic_load_min:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_min_8>>
atomic_load_min_8_monotonic(ptr, val): 	(atomic_load_min:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_min_8>>
atomic_load_min_8_release(ptr, val): 	(atomic_load_min:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_min_8>>
atomic_load_min_8_seq_cst(ptr, val): 	(atomic_load_min:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_min_8>>
atomic_load_nand_16(ptr, val): 	(atomic_load_nand:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_nand_16_acq_rel(ptr, val): 	(atomic_load_nand:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_nand_16>>
atomic_load_nand_16_acquire(ptr, val): 	(atomic_load_nand:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_nand_16>>
atomic_load_nand_16_monotonic(ptr, val): 	(atomic_load_nand:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_nand_16>>
atomic_load_nand_16_release(ptr, val): 	(atomic_load_nand:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_nand_16>>
atomic_load_nand_16_seq_cst(ptr, val): 	(atomic_load_nand:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_nand_16>>
atomic_load_nand_32(ptr, val): 	(atomic_load_nand:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_nand_32_acq_rel(ptr, val): 	(atomic_load_nand:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_nand_32>>
atomic_load_nand_32_acquire(ptr, val): 	(atomic_load_nand:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_nand_32>>
atomic_load_nand_32_monotonic(ptr, val): 	(atomic_load_nand:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_nand_32>>
atomic_load_nand_32_release(ptr, val): 	(atomic_load_nand:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_nand_32>>
atomic_load_nand_32_seq_cst(ptr, val): 	(atomic_load_nand:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_nand_32>>
atomic_load_nand_64(ptr, val): 	(atomic_load_nand:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_nand_64_acq_rel(ptr, val): 	(atomic_load_nand:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_nand_64>>
atomic_load_nand_64_acquire(ptr, val): 	(atomic_load_nand:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_nand_64>>
atomic_load_nand_64_monotonic(ptr, val): 	(atomic_load_nand:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_nand_64>>
atomic_load_nand_64_release(ptr, val): 	(atomic_load_nand:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_nand_64>>
atomic_load_nand_64_seq_cst(ptr, val): 	(atomic_load_nand:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_nand_64>>
atomic_load_nand_8(ptr, val): 	(atomic_load_nand:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_nand_8_acq_rel(ptr, val): 	(atomic_load_nand:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_nand_8>>
atomic_load_nand_8_acquire(ptr, val): 	(atomic_load_nand:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_nand_8>>
atomic_load_nand_8_monotonic(ptr, val): 	(atomic_load_nand:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_nand_8>>
atomic_load_nand_8_release(ptr, val): 	(atomic_load_nand:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_nand_8>>
atomic_load_nand_8_seq_cst(ptr, val): 	(atomic_load_nand:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_nand_8>>
atomic_load_or_16(ptr, val): 	(atomic_load_or:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_or_16_acq_rel(ptr, val): 	(atomic_load_or:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_or_16>>
atomic_load_or_16_acquire(ptr, val): 	(atomic_load_or:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_or_16>>
atomic_load_or_16_monotonic(ptr, val): 	(atomic_load_or:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_or_16>>
atomic_load_or_16_release(ptr, val): 	(atomic_load_or:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_or_16>>
atomic_load_or_16_seq_cst(ptr, val): 	(atomic_load_or:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_or_16>>
atomic_load_or_32(ptr, val): 	(atomic_load_or:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_or_32_acq_rel(ptr, val): 	(atomic_load_or:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_or_32>>
atomic_load_or_32_acquire(ptr, val): 	(atomic_load_or:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_or_32>>
atomic_load_or_32_monotonic(ptr, val): 	(atomic_load_or:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_or_32>>
atomic_load_or_32_release(ptr, val): 	(atomic_load_or:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_or_32>>
atomic_load_or_32_seq_cst(ptr, val): 	(atomic_load_or:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_or_32>>
atomic_load_or_64(ptr, val): 	(atomic_load_or:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_or_64_acq_rel(ptr, val): 	(atomic_load_or:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_or_64>>
atomic_load_or_64_acquire(ptr, val): 	(atomic_load_or:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_or_64>>
atomic_load_or_64_monotonic(ptr, val): 	(atomic_load_or:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_or_64>>
atomic_load_or_64_release(ptr, val): 	(atomic_load_or:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_or_64>>
atomic_load_or_64_seq_cst(ptr, val): 	(atomic_load_or:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_or_64>>
atomic_load_or_8(ptr, val): 	(atomic_load_or:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_or_8_acq_rel(ptr, val): 	(atomic_load_or:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_or_8>>
atomic_load_or_8_acquire(ptr, val): 	(atomic_load_or:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_or_8>>
atomic_load_or_8_monotonic(ptr, val): 	(atomic_load_or:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_or_8>>
atomic_load_or_8_release(ptr, val): 	(atomic_load_or:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_or_8>>
atomic_load_or_8_seq_cst(ptr, val): 	(atomic_load_or:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_or_8>>
atomic_load_sub_16(ptr, val): 	(atomic_load_sub:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_sub_16_acq_rel(ptr, val): 	(atomic_load_sub:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_sub_16>>
atomic_load_sub_16_acquire(ptr, val): 	(atomic_load_sub:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_sub_16>>
atomic_load_sub_16_monotonic(ptr, val): 	(atomic_load_sub:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_sub_16>>
atomic_load_sub_16_release(ptr, val): 	(atomic_load_sub:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_sub_16>>
atomic_load_sub_16_seq_cst(ptr, val): 	(atomic_load_sub:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_sub_16>>
atomic_load_sub_32(ptr, val): 	(atomic_load_sub:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_sub_32_acq_rel(ptr, val): 	(atomic_load_sub:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_sub_32>>
atomic_load_sub_32_acquire(ptr, val): 	(atomic_load_sub:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_sub_32>>
atomic_load_sub_32_monotonic(ptr, val): 	(atomic_load_sub:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_sub_32>>
atomic_load_sub_32_release(ptr, val): 	(atomic_load_sub:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_sub_32>>
atomic_load_sub_32_seq_cst(ptr, val): 	(atomic_load_sub:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_sub_32>>
atomic_load_sub_64(ptr, val): 	(atomic_load_sub:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_sub_64_acq_rel(ptr, val): 	(atomic_load_sub:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_sub_64>>
atomic_load_sub_64_acquire(ptr, val): 	(atomic_load_sub:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_sub_64>>
atomic_load_sub_64_monotonic(ptr, val): 	(atomic_load_sub:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_sub_64>>
atomic_load_sub_64_release(ptr, val): 	(atomic_load_sub:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_sub_64>>
atomic_load_sub_64_seq_cst(ptr, val): 	(atomic_load_sub:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_sub_64>>
atomic_load_sub_8(ptr, val): 	(atomic_load_sub:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_sub_8_acq_rel(ptr, val): 	(atomic_load_sub:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_sub_8>>
atomic_load_sub_8_acquire(ptr, val): 	(atomic_load_sub:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_sub_8>>
atomic_load_sub_8_monotonic(ptr, val): 	(atomic_load_sub:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_sub_8>>
atomic_load_sub_8_release(ptr, val): 	(atomic_load_sub:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_sub_8>>
atomic_load_sub_8_seq_cst(ptr, val): 	(atomic_load_sub:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_sub_8>>
atomic_load_umax_16(ptr, val): 	(atomic_load_umax:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_umax_16_acq_rel(ptr, val): 	(atomic_load_umax:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umax_16>>
atomic_load_umax_16_acquire(ptr, val): 	(atomic_load_umax:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umax_16>>
atomic_load_umax_16_monotonic(ptr, val): 	(atomic_load_umax:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umax_16>>
atomic_load_umax_16_release(ptr, val): 	(atomic_load_umax:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umax_16>>
atomic_load_umax_16_seq_cst(ptr, val): 	(atomic_load_umax:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umax_16>>
atomic_load_umax_32(ptr, val): 	(atomic_load_umax:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_umax_32_acq_rel(ptr, val): 	(atomic_load_umax:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umax_32>>
atomic_load_umax_32_acquire(ptr, val): 	(atomic_load_umax:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umax_32>>
atomic_load_umax_32_monotonic(ptr, val): 	(atomic_load_umax:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umax_32>>
atomic_load_umax_32_release(ptr, val): 	(atomic_load_umax:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umax_32>>
atomic_load_umax_32_seq_cst(ptr, val): 	(atomic_load_umax:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umax_32>>
atomic_load_umax_64(ptr, val): 	(atomic_load_umax:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_umax_64_acq_rel(ptr, val): 	(atomic_load_umax:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umax_64>>
atomic_load_umax_64_acquire(ptr, val): 	(atomic_load_umax:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umax_64>>
atomic_load_umax_64_monotonic(ptr, val): 	(atomic_load_umax:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umax_64>>
atomic_load_umax_64_release(ptr, val): 	(atomic_load_umax:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umax_64>>
atomic_load_umax_64_seq_cst(ptr, val): 	(atomic_load_umax:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umax_64>>
atomic_load_umax_8(ptr, val): 	(atomic_load_umax:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_umax_8_acq_rel(ptr, val): 	(atomic_load_umax:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umax_8>>
atomic_load_umax_8_acquire(ptr, val): 	(atomic_load_umax:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umax_8>>
atomic_load_umax_8_monotonic(ptr, val): 	(atomic_load_umax:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umax_8>>
atomic_load_umax_8_release(ptr, val): 	(atomic_load_umax:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umax_8>>
atomic_load_umax_8_seq_cst(ptr, val): 	(atomic_load_umax:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umax_8>>
atomic_load_umin_16(ptr, val): 	(atomic_load_umin:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_umin_16_acq_rel(ptr, val): 	(atomic_load_umin:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umin_16>>
atomic_load_umin_16_acquire(ptr, val): 	(atomic_load_umin:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umin_16>>
atomic_load_umin_16_monotonic(ptr, val): 	(atomic_load_umin:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umin_16>>
atomic_load_umin_16_release(ptr, val): 	(atomic_load_umin:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umin_16>>
atomic_load_umin_16_seq_cst(ptr, val): 	(atomic_load_umin:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umin_16>>
atomic_load_umin_32(ptr, val): 	(atomic_load_umin:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_umin_32_acq_rel(ptr, val): 	(atomic_load_umin:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umin_32>>
atomic_load_umin_32_acquire(ptr, val): 	(atomic_load_umin:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umin_32>>
atomic_load_umin_32_monotonic(ptr, val): 	(atomic_load_umin:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umin_32>>
atomic_load_umin_32_release(ptr, val): 	(atomic_load_umin:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umin_32>>
atomic_load_umin_32_seq_cst(ptr, val): 	(atomic_load_umin:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umin_32>>
atomic_load_umin_64(ptr, val): 	(atomic_load_umin:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_umin_64_acq_rel(ptr, val): 	(atomic_load_umin:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umin_64>>
atomic_load_umin_64_acquire(ptr, val): 	(atomic_load_umin:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umin_64>>
atomic_load_umin_64_monotonic(ptr, val): 	(atomic_load_umin:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umin_64>>
atomic_load_umin_64_release(ptr, val): 	(atomic_load_umin:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umin_64>>
atomic_load_umin_64_seq_cst(ptr, val): 	(atomic_load_umin:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umin_64>>
atomic_load_umin_8(ptr, val): 	(atomic_load_umin:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_umin_8_acq_rel(ptr, val): 	(atomic_load_umin:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umin_8>>
atomic_load_umin_8_acquire(ptr, val): 	(atomic_load_umin:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umin_8>>
atomic_load_umin_8_monotonic(ptr, val): 	(atomic_load_umin:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umin_8>>
atomic_load_umin_8_release(ptr, val): 	(atomic_load_umin:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umin_8>>
atomic_load_umin_8_seq_cst(ptr, val): 	(atomic_load_umin:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_umin_8>>
atomic_load_xor_16(ptr, val): 	(atomic_load_xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_xor_16_acq_rel(ptr, val): 	(atomic_load_xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_xor_16>>
atomic_load_xor_16_acquire(ptr, val): 	(atomic_load_xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_xor_16>>
atomic_load_xor_16_monotonic(ptr, val): 	(atomic_load_xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_xor_16>>
atomic_load_xor_16_release(ptr, val): 	(atomic_load_xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_xor_16>>
atomic_load_xor_16_seq_cst(ptr, val): 	(atomic_load_xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_xor_16>>
atomic_load_xor_32(ptr, val): 	(atomic_load_xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_xor_32_acq_rel(ptr, val): 	(atomic_load_xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_xor_32>>
atomic_load_xor_32_acquire(ptr, val): 	(atomic_load_xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_xor_32>>
atomic_load_xor_32_monotonic(ptr, val): 	(atomic_load_xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_xor_32>>
atomic_load_xor_32_release(ptr, val): 	(atomic_load_xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_xor_32>>
atomic_load_xor_32_seq_cst(ptr, val): 	(atomic_load_xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_xor_32>>
atomic_load_xor_64(ptr, val): 	(atomic_load_xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_xor_64_acq_rel(ptr, val): 	(atomic_load_xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_xor_64>>
atomic_load_xor_64_acquire(ptr, val): 	(atomic_load_xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_xor_64>>
atomic_load_xor_64_monotonic(ptr, val): 	(atomic_load_xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_xor_64>>
atomic_load_xor_64_release(ptr, val): 	(atomic_load_xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_xor_64>>
atomic_load_xor_64_seq_cst(ptr, val): 	(atomic_load_xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_xor_64>>
atomic_load_xor_8(ptr, val): 	(atomic_load_xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_load_xor_8_acq_rel(ptr, val): 	(atomic_load_xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_xor_8>>
atomic_load_xor_8_acquire(ptr, val): 	(atomic_load_xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_xor_8>>
atomic_load_xor_8_monotonic(ptr, val): 	(atomic_load_xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_xor_8>>
atomic_load_xor_8_release(ptr, val): 	(atomic_load_xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_xor_8>>
atomic_load_xor_8_seq_cst(ptr, val): 	(atomic_load_xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_load_xor_8>>
atomic_store_16(ptr, val): 	(atomic_store node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_store_16_acq_rel(ptr, val): 	(atomic_store node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_store_16>>
atomic_store_16_acquire(ptr, val): 	(atomic_store node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_store_16>>
atomic_store_16_monotonic(ptr, val): 	(atomic_store node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_store_16>>
atomic_store_16_release(ptr, val): 	(atomic_store node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_store_16>>
atomic_store_16_seq_cst(ptr, val): 	(atomic_store node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_store_16>>
atomic_store_32(ptr, val): 	(atomic_store node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_store_32_acq_rel(ptr, val): 	(atomic_store node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_store_32>>
atomic_store_32_acquire(ptr, val): 	(atomic_store node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_store_32>>
atomic_store_32_monotonic(ptr, val): 	(atomic_store node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_store_32>>
atomic_store_32_release(ptr, val): 	(atomic_store node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_store_32>>
atomic_store_32_seq_cst(ptr, val): 	(atomic_store node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_store_32>>
atomic_store_64(ptr, val): 	(atomic_store node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_store_64_acq_rel(ptr, val): 	(atomic_store node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_store_64>>
atomic_store_64_acquire(ptr, val): 	(atomic_store node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_store_64>>
atomic_store_64_monotonic(ptr, val): 	(atomic_store node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_store_64>>
atomic_store_64_release(ptr, val): 	(atomic_store node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_store_64>>
atomic_store_64_seq_cst(ptr, val): 	(atomic_store node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_store_64>>
atomic_store_8(ptr, val): 	(atomic_store node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_store_8_acq_rel(ptr, val): 	(atomic_store node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_store_8>>
atomic_store_8_acquire(ptr, val): 	(atomic_store node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_store_8>>
atomic_store_8_monotonic(ptr, val): 	(atomic_store node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_store_8>>
atomic_store_8_release(ptr, val): 	(atomic_store node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_store_8>>
atomic_store_8_seq_cst(ptr, val): 	(atomic_store node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_store_8>>
atomic_swap_16(ptr, val): 	(atomic_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_swap_16_acq_rel(ptr, val): 	(atomic_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_swap_16>>
atomic_swap_16_acquire(ptr, val): 	(atomic_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_swap_16>>
atomic_swap_16_monotonic(ptr, val): 	(atomic_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_swap_16>>
atomic_swap_16_release(ptr, val): 	(atomic_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_swap_16>>
atomic_swap_16_seq_cst(ptr, val): 	(atomic_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_swap_16>>
atomic_swap_32(ptr, val): 	(atomic_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_swap_32_acq_rel(ptr, val): 	(atomic_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_swap_32>>
atomic_swap_32_acquire(ptr, val): 	(atomic_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_swap_32>>
atomic_swap_32_monotonic(ptr, val): 	(atomic_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_swap_32>>
atomic_swap_32_release(ptr, val): 	(atomic_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_swap_32>>
atomic_swap_32_seq_cst(ptr, val): 	(atomic_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_swap_32>>
atomic_swap_64(ptr, val): 	(atomic_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_swap_64_acq_rel(ptr, val): 	(atomic_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_swap_64>>
atomic_swap_64_acquire(ptr, val): 	(atomic_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_swap_64>>
atomic_swap_64_monotonic(ptr, val): 	(atomic_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_swap_64>>
atomic_swap_64_release(ptr, val): 	(atomic_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_swap_64>>
atomic_swap_64_seq_cst(ptr, val): 	(atomic_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_swap_64>>
atomic_swap_8(ptr, val): 	(atomic_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)
atomic_swap_8_acq_rel(ptr, val): 	(atomic_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_swap_8>>
atomic_swap_8_acquire(ptr, val): 	(atomic_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_swap_8>>
atomic_swap_8_monotonic(ptr, val): 	(atomic_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_swap_8>>
atomic_swap_8_release(ptr, val): 	(atomic_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_swap_8>>
atomic_swap_8_seq_cst(ptr, val): 	(atomic_swap:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[iPTR] }:$ptr, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$val)<<P:Predicate_atomic_swap_8>>
extload(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>>
extloadf16(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_extload>>
extloadf32(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_extload>>
extloadf64(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_extload>>
extloadi1(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_extload>>
extloadi16(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_extload>>
extloadi32(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_extload>>
extloadi8(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_extload>>
extloadvf32(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_extload>>
extloadvf64(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_extload>>
extloadvi1(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_extload>>
extloadvi16(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_extload>>
extloadvi32(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_extload>>
extloadvi8(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_extload>>
fpimm0: 	(fpimm:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] })
fpimm0neg: 	(fpimm:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] })
imm32SExt16: 	(imm:{ *:[i32] })
imm32ZExt16: 	(imm:{ *:[i32] })
immLi16: 	(imm:{ *:[i32] })
immSExt10: 	(imm:{ *:[i32] })
immSExt10_64: 	(imm:{ *:[i64] })
immSExt16: 	(imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })
immSExt16Plus1: 	(imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })
immSExt32: 	(imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })
immSExt32Low16Zero: 	(imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })
immSExt6: 	(imm:{ *:[i32] })
immSExt8: 	(imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })
immSExtAddiur2: 	(imm:{ *:[i32] })
immSExtAddius5: 	(imm:{ *:[i32] })
immZExt1: 	(imm:{ *:[i32] })
immZExt10: 	(imm:{ *:[i32] })
immZExt16: 	(imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })<<X:LO16>>
immZExt16_64: 	(imm:{ *:[i64] })
immZExt1Ptr: 	(imm:{ *:[iPTR] })
immZExt2: 	(imm:{ *:[i32] })
immZExt2Lsa: 	(imm:{ *:[i32] })
immZExt2Ptr: 	(imm:{ *:[iPTR] })
immZExt2Shift: 	(imm:{ *:[i32] })
immZExt3: 	(imm:{ *:[i32] })
immZExt32: 	(imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })
immZExt32Low16Zero: 	(imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })
immZExt3Ptr: 	(imm:{ *:[iPTR] })
immZExt4: 	(imm:{ *:[i32] })
immZExt4Ptr: 	(imm:{ *:[iPTR] })
immZExt5: 	(imm:{ *:[i32] })
immZExt5Plus1: 	(imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })
immZExt5Plus32: 	(imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })
immZExt5Plus33: 	(imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })
immZExt5_64: 	(imm:{ *:[i64] })
immZExt6: 	(imm:{ *:[i32] })
immZExt7: 	(imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })
immZExt8: 	(imm:{ *:[i32] })
immZExtAndi16: 	(imm:{ *:[i32] })
immZExtRange2To64: 	(imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })
immi32Cst15: 	(imm:{ *:[i32] })
immi32Cst31: 	(imm:{ *:[i32] })
immi32Cst7: 	(imm:{ *:[i32] })
immz: 	(imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })
ineg(in): 	(sub:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } 0:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$in)
insve_v16i8(v1, i1, v2, i2): 	(MipsINSVE:{ *:[v16i8] } node:{ *:[v16i8] }:$v1, node:{ *:[i32] }:$i1, node:{ *:[v16i8] }:$v2, node:{ *:[i32] }:$i2)
insve_v2i64(v1, i1, v2, i2): 	(MipsINSVE:{ *:[v2i64] } node:{ *:[v2i64] }:$v1, node:{ *:[i32] }:$i1, node:{ *:[v2i64] }:$v2, node:{ *:[i32] }:$i2)
insve_v4i32(v1, i1, v2, i2): 	(MipsINSVE:{ *:[v4i32] } node:{ *:[v4i32] }:$v1, node:{ *:[i32] }:$i1, node:{ *:[v4i32] }:$v2, node:{ *:[i32] }:$i2)
insve_v8i16(v1, i1, v2, i2): 	(MipsINSVE:{ *:[v8i16] } node:{ *:[v8i16] }:$v1, node:{ *:[i32] }:$i1, node:{ *:[v8i16] }:$v2, node:{ *:[i32] }:$i2)
istore(val, base, offset): 	(ist:{ *:[iPTR] } node:{}:$val, node:{ *:[iPTR] }:$base, node:{ *:[iPTR] }:$offset)
itruncstore(val, base, offset): 	(ist:{ *:[iPTR] } node:{}:$val, node:{ *:[iPTR] }:$base, node:{ *:[iPTR] }:$offset)
load(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>>
mul_fexp2(ws, wt): 	(fmul:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$ws, (fexp2:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] } node:{ *:[f16 f32 f64 v8f16 v4f32 v2f64] }:$wt))
muladd(wd, ws, wt): 	(add:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$wd, (mul:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$ws, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$wt))
mulsub(wd, ws, wt): 	(sub:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$wd, (mul:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$ws, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$wt))
nontemporalload(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_load>>
nontemporalstore(val, ptr): 	(st node:{}:$val, node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
not(in): 	(xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$in, -1:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })
post_store(val, ptr, offset): 	(ist:{ *:[iPTR] } node:{}:$val, node:{ *:[iPTR] }:$ptr, node:{ *:[iPTR] }:$offset)<<P:Predicate_istore>>
post_truncst(val, base, offset): 	(ist:{ *:[iPTR] } node:{}:$val, node:{ *:[iPTR] }:$base, node:{ *:[iPTR] }:$offset)<<P:Predicate_itruncstore>>
post_truncstf32(val, base, offset): 	(ist:{ *:[iPTR] } node:{}:$val, node:{ *:[iPTR] }:$base, node:{ *:[iPTR] }:$offset)<<P:Predicate_itruncstore>><<P:Predicate_post_truncst>>
post_truncsti1(val, base, offset): 	(ist:{ *:[iPTR] } node:{}:$val, node:{ *:[iPTR] }:$base, node:{ *:[iPTR] }:$offset)<<P:Predicate_itruncstore>><<P:Predicate_post_truncst>>
post_truncsti16(val, base, offset): 	(ist:{ *:[iPTR] } node:{}:$val, node:{ *:[iPTR] }:$base, node:{ *:[iPTR] }:$offset)<<P:Predicate_itruncstore>><<P:Predicate_post_truncst>>
post_truncsti32(val, base, offset): 	(ist:{ *:[iPTR] } node:{}:$val, node:{ *:[iPTR] }:$base, node:{ *:[iPTR] }:$offset)<<P:Predicate_itruncstore>><<P:Predicate_post_truncst>>
post_truncsti8(val, base, offset): 	(ist:{ *:[iPTR] } node:{}:$val, node:{ *:[iPTR] }:$base, node:{ *:[iPTR] }:$offset)<<P:Predicate_itruncstore>><<P:Predicate_post_truncst>>
post_truncstvi16(val, base, offset): 	(ist:{ *:[iPTR] } node:{}:$val, node:{ *:[iPTR] }:$base, node:{ *:[iPTR] }:$offset)<<P:Predicate_itruncstore>><<P:Predicate_post_truncst>>
post_truncstvi8(val, base, offset): 	(ist:{ *:[iPTR] } node:{}:$val, node:{ *:[iPTR] }:$base, node:{ *:[iPTR] }:$offset)<<P:Predicate_itruncstore>><<P:Predicate_post_truncst>>
pre_store(val, base, offset): 	(ist:{ *:[iPTR] } node:{}:$val, node:{ *:[iPTR] }:$base, node:{ *:[iPTR] }:$offset)<<P:Predicate_istore>>
pre_truncst(val, base, offset): 	(ist:{ *:[iPTR] } node:{}:$val, node:{ *:[iPTR] }:$base, node:{ *:[iPTR] }:$offset)<<P:Predicate_itruncstore>>
pre_truncstf32(val, base, offset): 	(ist:{ *:[iPTR] } node:{}:$val, node:{ *:[iPTR] }:$base, node:{ *:[iPTR] }:$offset)<<P:Predicate_itruncstore>><<P:Predicate_pre_truncst>>
pre_truncsti1(val, base, offset): 	(ist:{ *:[iPTR] } node:{}:$val, node:{ *:[iPTR] }:$base, node:{ *:[iPTR] }:$offset)<<P:Predicate_itruncstore>><<P:Predicate_pre_truncst>>
pre_truncsti16(val, base, offset): 	(ist:{ *:[iPTR] } node:{}:$val, node:{ *:[iPTR] }:$base, node:{ *:[iPTR] }:$offset)<<P:Predicate_itruncstore>><<P:Predicate_pre_truncst>>
pre_truncsti32(val, base, offset): 	(ist:{ *:[iPTR] } node:{}:$val, node:{ *:[iPTR] }:$base, node:{ *:[iPTR] }:$offset)<<P:Predicate_itruncstore>><<P:Predicate_pre_truncst>>
pre_truncsti8(val, base, offset): 	(ist:{ *:[iPTR] } node:{}:$val, node:{ *:[iPTR] }:$base, node:{ *:[iPTR] }:$offset)<<P:Predicate_itruncstore>><<P:Predicate_pre_truncst>>
pre_truncstvi16(val, base, offset): 	(ist:{ *:[iPTR] } node:{}:$val, node:{ *:[iPTR] }:$base, node:{ *:[iPTR] }:$offset)<<P:Predicate_itruncstore>><<P:Predicate_pre_truncst>>
pre_truncstvi8(val, base, offset): 	(ist:{ *:[iPTR] } node:{}:$val, node:{ *:[iPTR] }:$base, node:{ *:[iPTR] }:$offset)<<P:Predicate_itruncstore>><<P:Predicate_pre_truncst>>
seteq(lhs, rhs): 	(setcc:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{}:$lhs, node:{}:$rhs, SETEQ:{ *:[Other] })
setge(lhs, rhs): 	(setcc:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{}:$lhs, node:{}:$rhs, SETGE:{ *:[Other] })
setgt(lhs, rhs): 	(setcc:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{}:$lhs, node:{}:$rhs, SETGT:{ *:[Other] })
setle(lhs, rhs): 	(setcc:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{}:$lhs, node:{}:$rhs, SETLE:{ *:[Other] })
setlt(lhs, rhs): 	(setcc:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{}:$lhs, node:{}:$rhs, SETLT:{ *:[Other] })
setne(lhs, rhs): 	(setcc:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{}:$lhs, node:{}:$rhs, SETNE:{ *:[Other] })
seto(lhs, rhs): 	(setcc:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{}:$lhs, node:{}:$rhs, SETO:{ *:[Other] })
setoeq(lhs, rhs): 	(setcc:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{}:$lhs, node:{}:$rhs, SETOEQ:{ *:[Other] })
setoge(lhs, rhs): 	(setcc:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{}:$lhs, node:{}:$rhs, SETOGE:{ *:[Other] })
setogt(lhs, rhs): 	(setcc:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{}:$lhs, node:{}:$rhs, SETOGT:{ *:[Other] })
setole(lhs, rhs): 	(setcc:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{}:$lhs, node:{}:$rhs, SETOLE:{ *:[Other] })
setolt(lhs, rhs): 	(setcc:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{}:$lhs, node:{}:$rhs, SETOLT:{ *:[Other] })
setone(lhs, rhs): 	(setcc:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{}:$lhs, node:{}:$rhs, SETONE:{ *:[Other] })
setueq(lhs, rhs): 	(setcc:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{}:$lhs, node:{}:$rhs, SETUEQ:{ *:[Other] })
setuge(lhs, rhs): 	(setcc:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{}:$lhs, node:{}:$rhs, SETUGE:{ *:[Other] })
setugt(lhs, rhs): 	(setcc:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{}:$lhs, node:{}:$rhs, SETUGT:{ *:[Other] })
setule(lhs, rhs): 	(setcc:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{}:$lhs, node:{}:$rhs, SETULE:{ *:[Other] })
setult(lhs, rhs): 	(setcc:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{}:$lhs, node:{}:$rhs, SETULT:{ *:[Other] })
setune(lhs, rhs): 	(setcc:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{}:$lhs, node:{}:$rhs, SETUNE:{ *:[Other] })
setuo(lhs, rhs): 	(setcc:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{}:$lhs, node:{}:$rhs, SETUO:{ *:[Other] })
sextload(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>>
sextloadi1(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_sextload>>
sextloadi16(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_sextload>>
sextloadi32(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_sextload>>
sextloadi8(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_sextload>>
sextloadvi1(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_sextload>>
sextloadvi16(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_sextload>>
sextloadvi32(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_sextload>>
sextloadvi8(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_sextload>>
simple_load(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_load>>
simple_store(val, ptr): 	(st node:{}:$val, node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
store(val, ptr): 	(st node:{}:$val, node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedstore>>
strict_extloadf32(ptr): 	(strict_fpextend:{ *:[f64] } (ld:{ *:[f32] } node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_load>>)
strict_extloadf64(ptr): 	(strict_fpextend:{ *:[] } (ld:{ *:[] } node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_load>>)
timmSExt6: 	(timm:{ *:[i32] })
timmZExt1: 	(timm:{ *:[i32] })
timmZExt10: 	(timm:{ *:[i32] })
timmZExt1Ptr: 	(timm:{ *:[iPTR] })
timmZExt2: 	(timm:{ *:[i32] })
timmZExt2Ptr: 	(timm:{ *:[iPTR] })
timmZExt3: 	(timm:{ *:[i32] })
timmZExt3Ptr: 	(timm:{ *:[iPTR] })
timmZExt4: 	(timm:{ *:[i32] })
timmZExt4Ptr: 	(timm:{ *:[iPTR] })
timmZExt5: 	(timm:{ *:[i32] })
timmZExt6: 	(timm:{ *:[i32] })
timmZExt7: 	(timm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })
timmZExt8: 	(timm:{ *:[i32] })
truncstore(val, ptr): 	(st node:{}:$val, node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedstore>>
truncstoref16(val, ptr): 	(st node:{}:$val, node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedstore>><<P:Predicate_truncstore>>
truncstoref32(val, ptr): 	(st node:{}:$val, node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedstore>><<P:Predicate_truncstore>>
truncstoref64(val, ptr): 	(st node:{}:$val, node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedstore>><<P:Predicate_truncstore>>
truncstorei16(val, ptr): 	(st node:{}:$val, node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedstore>><<P:Predicate_truncstore>>
truncstorei32(val, ptr): 	(st node:{}:$val, node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedstore>><<P:Predicate_truncstore>>
truncstorei8(val, ptr): 	(st node:{}:$val, node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedstore>><<P:Predicate_truncstore>>
truncstorevi16(val, ptr): 	(st node:{}:$val, node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedstore>><<P:Predicate_truncstore>>
truncstorevi32(val, ptr): 	(st node:{}:$val, node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedstore>><<P:Predicate_truncstore>>
truncstorevi8(val, ptr): 	(st node:{}:$val, node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedstore>><<P:Predicate_truncstore>>
unalignednontemporalstore(val, ptr): 	(st node:{}:$val, node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedstore>><<P:Predicate_store>><<P:Predicate_nontemporalstore>>
unindexedload(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)
unindexedstore(val, ptr): 	(st node:{}:$val, node:{ *:[iPTR] }:$ptr)
vbclr_b(ws, wt): 	(and:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$ws, (xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } (shl:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } (build_vector:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })<<P:Predicate_vsplat_imm_eq_1>>, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$wt), immAllOnesV:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }))
vbclr_d(ws, wt): 	(and:{ *:[v2i64] } node:{ *:[v2i64] }:$ws, (xor:{ *:[v2i64] } (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$wt), (bitconvert:{ *:[v2i64] } immAllOnesV:{ *:[v4i32] })))
vbclr_h(ws, wt): 	(and:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$ws, (xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } (shl:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } (build_vector:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })<<P:Predicate_vsplat_imm_eq_1>>, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$wt), immAllOnesV:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }))
vbclr_w(ws, wt): 	(and:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$ws, (xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } (shl:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } (build_vector:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })<<P:Predicate_vsplat_imm_eq_1>>, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$wt), immAllOnesV:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }))
vbneg_b(ws, wt): 	(xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$ws, (shl:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } (build_vector:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })<<P:Predicate_vsplat_imm_eq_1>>, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$wt))
vbneg_d(ws, wt): 	(xor:{ *:[v2i64] } node:{ *:[v2i64] }:$ws, (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$wt))
vbneg_h(ws, wt): 	(xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$ws, (shl:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } (build_vector:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })<<P:Predicate_vsplat_imm_eq_1>>, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$wt))
vbneg_w(ws, wt): 	(xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$ws, (shl:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } (build_vector:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })<<P:Predicate_vsplat_imm_eq_1>>, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$wt))
vbset_b(ws, wt): 	(or:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$ws, (shl:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } (build_vector:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })<<P:Predicate_vsplat_imm_eq_1>>, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$wt))
vbset_d(ws, wt): 	(or:{ *:[v2i64] } node:{ *:[v2i64] }:$ws, (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$wt))
vbset_h(ws, wt): 	(or:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$ws, (shl:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } (build_vector:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })<<P:Predicate_vsplat_imm_eq_1>>, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$wt))
vbset_w(ws, wt): 	(or:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$ws, (shl:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } (build_vector:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })<<P:Predicate_vsplat_imm_eq_1>>, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$wt))
vextract_sext_i16(vec, idx): 	(MipsVExtractSExt:{} node:{}:$vec, node:{ *:[iPTR] }:$idx, i16:{ *:[Other] })
vextract_sext_i32(vec, idx): 	(MipsVExtractSExt:{} node:{}:$vec, node:{ *:[iPTR] }:$idx, i32:{ *:[Other] })
vextract_sext_i64(vec, idx): 	(MipsVExtractSExt:{} node:{}:$vec, node:{ *:[iPTR] }:$idx, i64:{ *:[Other] })
vextract_sext_i8(vec, idx): 	(MipsVExtractSExt:{} node:{}:$vec, node:{ *:[iPTR] }:$idx, i8:{ *:[Other] })
vextract_zext_i16(vec, idx): 	(MipsVExtractZExt:{} node:{}:$vec, node:{ *:[iPTR] }:$idx, i16:{ *:[Other] })
vextract_zext_i32(vec, idx): 	(MipsVExtractZExt:{} node:{}:$vec, node:{ *:[iPTR] }:$idx, i32:{ *:[Other] })
vextract_zext_i64(vec, idx): 	(MipsVExtractZExt:{} node:{}:$vec, node:{ *:[iPTR] }:$idx, i64:{ *:[Other] })
vextract_zext_i8(vec, idx): 	(MipsVExtractZExt:{} node:{}:$vec, node:{ *:[iPTR] }:$idx, i8:{ *:[Other] })
vfseteq_v2f64(lhs, rhs): 	(vfsetcc:{ *:[v2i64] } node:{ *:[v2f64] }:$lhs, node:{ *:[v2f64] }:$rhs, SETEQ:{ *:[Other] })
vfseteq_v4f32(lhs, rhs): 	(vfsetcc:{ *:[v4i32] } node:{ *:[v4f32] }:$lhs, node:{ *:[v4f32] }:$rhs, SETEQ:{ *:[Other] })
vfsetge_v2f64(lhs, rhs): 	(vfsetcc:{ *:[v2i64] } node:{ *:[v2f64] }:$lhs, node:{ *:[v2f64] }:$rhs, SETGE:{ *:[Other] })
vfsetge_v4f32(lhs, rhs): 	(vfsetcc:{ *:[v4i32] } node:{ *:[v4f32] }:$lhs, node:{ *:[v4f32] }:$rhs, SETGE:{ *:[Other] })
vfsetgt_v2f64(lhs, rhs): 	(vfsetcc:{ *:[v2i64] } node:{ *:[v2f64] }:$lhs, node:{ *:[v2f64] }:$rhs, SETGT:{ *:[Other] })
vfsetgt_v4f32(lhs, rhs): 	(vfsetcc:{ *:[v4i32] } node:{ *:[v4f32] }:$lhs, node:{ *:[v4f32] }:$rhs, SETGT:{ *:[Other] })
vfsetle_v2f64(lhs, rhs): 	(vfsetcc:{ *:[v2i64] } node:{ *:[v2f64] }:$lhs, node:{ *:[v2f64] }:$rhs, SETLE:{ *:[Other] })
vfsetle_v4f32(lhs, rhs): 	(vfsetcc:{ *:[v4i32] } node:{ *:[v4f32] }:$lhs, node:{ *:[v4f32] }:$rhs, SETLE:{ *:[Other] })
vfsetlt_v2f64(lhs, rhs): 	(vfsetcc:{ *:[v2i64] } node:{ *:[v2f64] }:$lhs, node:{ *:[v2f64] }:$rhs, SETLT:{ *:[Other] })
vfsetlt_v4f32(lhs, rhs): 	(vfsetcc:{ *:[v4i32] } node:{ *:[v4f32] }:$lhs, node:{ *:[v4f32] }:$rhs, SETLT:{ *:[Other] })
vfsetne_v2f64(lhs, rhs): 	(vfsetcc:{ *:[v2i64] } node:{ *:[v2f64] }:$lhs, node:{ *:[v2f64] }:$rhs, SETNE:{ *:[Other] })
vfsetne_v4f32(lhs, rhs): 	(vfsetcc:{ *:[v4i32] } node:{ *:[v4f32] }:$lhs, node:{ *:[v4f32] }:$rhs, SETNE:{ *:[Other] })
vfsetoeq_v2f64(lhs, rhs): 	(vfsetcc:{ *:[v2i64] } node:{ *:[v2f64] }:$lhs, node:{ *:[v2f64] }:$rhs, SETOEQ:{ *:[Other] })
vfsetoeq_v4f32(lhs, rhs): 	(vfsetcc:{ *:[v4i32] } node:{ *:[v4f32] }:$lhs, node:{ *:[v4f32] }:$rhs, SETOEQ:{ *:[Other] })
vfsetoge_v2f64(lhs, rhs): 	(vfsetcc:{ *:[v2i64] } node:{ *:[v2f64] }:$lhs, node:{ *:[v2f64] }:$rhs, SETOGE:{ *:[Other] })
vfsetoge_v4f32(lhs, rhs): 	(vfsetcc:{ *:[v4i32] } node:{ *:[v4f32] }:$lhs, node:{ *:[v4f32] }:$rhs, SETOGE:{ *:[Other] })
vfsetogt_v2f64(lhs, rhs): 	(vfsetcc:{ *:[v2i64] } node:{ *:[v2f64] }:$lhs, node:{ *:[v2f64] }:$rhs, SETOGT:{ *:[Other] })
vfsetogt_v4f32(lhs, rhs): 	(vfsetcc:{ *:[v4i32] } node:{ *:[v4f32] }:$lhs, node:{ *:[v4f32] }:$rhs, SETOGT:{ *:[Other] })
vfsetole_v2f64(lhs, rhs): 	(vfsetcc:{ *:[v2i64] } node:{ *:[v2f64] }:$lhs, node:{ *:[v2f64] }:$rhs, SETOLE:{ *:[Other] })
vfsetole_v4f32(lhs, rhs): 	(vfsetcc:{ *:[v4i32] } node:{ *:[v4f32] }:$lhs, node:{ *:[v4f32] }:$rhs, SETOLE:{ *:[Other] })
vfsetolt_v2f64(lhs, rhs): 	(vfsetcc:{ *:[v2i64] } node:{ *:[v2f64] }:$lhs, node:{ *:[v2f64] }:$rhs, SETOLT:{ *:[Other] })
vfsetolt_v4f32(lhs, rhs): 	(vfsetcc:{ *:[v4i32] } node:{ *:[v4f32] }:$lhs, node:{ *:[v4f32] }:$rhs, SETOLT:{ *:[Other] })
vfsetone_v2f64(lhs, rhs): 	(vfsetcc:{ *:[v2i64] } node:{ *:[v2f64] }:$lhs, node:{ *:[v2f64] }:$rhs, SETONE:{ *:[Other] })
vfsetone_v4f32(lhs, rhs): 	(vfsetcc:{ *:[v4i32] } node:{ *:[v4f32] }:$lhs, node:{ *:[v4f32] }:$rhs, SETONE:{ *:[Other] })
vfsetord_v2f64(lhs, rhs): 	(vfsetcc:{ *:[v2i64] } node:{ *:[v2f64] }:$lhs, node:{ *:[v2f64] }:$rhs, SETO:{ *:[Other] })
vfsetord_v4f32(lhs, rhs): 	(vfsetcc:{ *:[v4i32] } node:{ *:[v4f32] }:$lhs, node:{ *:[v4f32] }:$rhs, SETO:{ *:[Other] })
vfsetueq_v2f64(lhs, rhs): 	(vfsetcc:{ *:[v2i64] } node:{ *:[v2f64] }:$lhs, node:{ *:[v2f64] }:$rhs, SETUEQ:{ *:[Other] })
vfsetueq_v4f32(lhs, rhs): 	(vfsetcc:{ *:[v4i32] } node:{ *:[v4f32] }:$lhs, node:{ *:[v4f32] }:$rhs, SETUEQ:{ *:[Other] })
vfsetuge_v2f64(lhs, rhs): 	(vfsetcc:{ *:[v2i64] } node:{ *:[v2f64] }:$lhs, node:{ *:[v2f64] }:$rhs, SETUGE:{ *:[Other] })
vfsetuge_v4f32(lhs, rhs): 	(vfsetcc:{ *:[v4i32] } node:{ *:[v4f32] }:$lhs, node:{ *:[v4f32] }:$rhs, SETUGE:{ *:[Other] })
vfsetugt_v2f64(lhs, rhs): 	(vfsetcc:{ *:[v2i64] } node:{ *:[v2f64] }:$lhs, node:{ *:[v2f64] }:$rhs, SETUGT:{ *:[Other] })
vfsetugt_v4f32(lhs, rhs): 	(vfsetcc:{ *:[v4i32] } node:{ *:[v4f32] }:$lhs, node:{ *:[v4f32] }:$rhs, SETUGT:{ *:[Other] })
vfsetule_v2f64(lhs, rhs): 	(vfsetcc:{ *:[v2i64] } node:{ *:[v2f64] }:$lhs, node:{ *:[v2f64] }:$rhs, SETULE:{ *:[Other] })
vfsetule_v4f32(lhs, rhs): 	(vfsetcc:{ *:[v4i32] } node:{ *:[v4f32] }:$lhs, node:{ *:[v4f32] }:$rhs, SETULE:{ *:[Other] })
vfsetult_v2f64(lhs, rhs): 	(vfsetcc:{ *:[v2i64] } node:{ *:[v2f64] }:$lhs, node:{ *:[v2f64] }:$rhs, SETULT:{ *:[Other] })
vfsetult_v4f32(lhs, rhs): 	(vfsetcc:{ *:[v4i32] } node:{ *:[v4f32] }:$lhs, node:{ *:[v4f32] }:$rhs, SETULT:{ *:[Other] })
vfsetun_v2f64(lhs, rhs): 	(vfsetcc:{ *:[v2i64] } node:{ *:[v2f64] }:$lhs, node:{ *:[v2f64] }:$rhs, SETUO:{ *:[Other] })
vfsetun_v4f32(lhs, rhs): 	(vfsetcc:{ *:[v4i32] } node:{ *:[v4f32] }:$lhs, node:{ *:[v4f32] }:$rhs, SETUO:{ *:[Other] })
vfsetune_v2f64(lhs, rhs): 	(vfsetcc:{ *:[v2i64] } node:{ *:[v2f64] }:$lhs, node:{ *:[v2f64] }:$rhs, SETUNE:{ *:[Other] })
vfsetune_v4f32(lhs, rhs): 	(vfsetcc:{ *:[v4i32] } node:{ *:[v4f32] }:$lhs, node:{ *:[v4f32] }:$rhs, SETUNE:{ *:[Other] })
vinsert_v16i8(vec, val, idx): 	(vector_insert:{ *:[v16i8] } node:{ *:[v16i8] }:$vec, node:{}:$val, node:{ *:[iPTR] }:$idx)
vinsert_v2i64(vec, val, idx): 	(vector_insert:{ *:[v2i64] } node:{ *:[v2i64] }:$vec, node:{}:$val, node:{ *:[iPTR] }:$idx)
vinsert_v4i32(vec, val, idx): 	(vector_insert:{ *:[v4i32] } node:{ *:[v4i32] }:$vec, node:{}:$val, node:{ *:[iPTR] }:$idx)
vinsert_v8i16(vec, val, idx): 	(vector_insert:{ *:[v8i16] } node:{ *:[v8i16] }:$vec, node:{}:$val, node:{ *:[iPTR] }:$idx)
vnot(in): 	(xor:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$in, immAllOnesV:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] })
vseteq_v16i8(lhs, rhs): 	(vsetcc:{ *:[v16i8] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$lhs, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$rhs, SETEQ:{ *:[Other] })
vseteq_v2i64(lhs, rhs): 	(vsetcc:{ *:[v2i64] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$lhs, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$rhs, SETEQ:{ *:[Other] })
vseteq_v4i32(lhs, rhs): 	(vsetcc:{ *:[v4i32] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$lhs, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$rhs, SETEQ:{ *:[Other] })
vseteq_v8i16(lhs, rhs): 	(vsetcc:{ *:[v8i16] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$lhs, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$rhs, SETEQ:{ *:[Other] })
vsetle_v16i8(lhs, rhs): 	(vsetcc:{ *:[v16i8] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$lhs, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$rhs, SETLE:{ *:[Other] })
vsetle_v2i64(lhs, rhs): 	(vsetcc:{ *:[v2i64] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$lhs, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$rhs, SETLE:{ *:[Other] })
vsetle_v4i32(lhs, rhs): 	(vsetcc:{ *:[v4i32] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$lhs, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$rhs, SETLE:{ *:[Other] })
vsetle_v8i16(lhs, rhs): 	(vsetcc:{ *:[v8i16] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$lhs, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$rhs, SETLE:{ *:[Other] })
vsetlt_v16i8(lhs, rhs): 	(vsetcc:{ *:[v16i8] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$lhs, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$rhs, SETLT:{ *:[Other] })
vsetlt_v2i64(lhs, rhs): 	(vsetcc:{ *:[v2i64] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$lhs, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$rhs, SETLT:{ *:[Other] })
vsetlt_v4i32(lhs, rhs): 	(vsetcc:{ *:[v4i32] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$lhs, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$rhs, SETLT:{ *:[Other] })
vsetlt_v8i16(lhs, rhs): 	(vsetcc:{ *:[v8i16] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$lhs, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$rhs, SETLT:{ *:[Other] })
vsetule_v16i8(lhs, rhs): 	(vsetcc:{ *:[v16i8] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$lhs, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$rhs, SETULE:{ *:[Other] })
vsetule_v2i64(lhs, rhs): 	(vsetcc:{ *:[v2i64] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$lhs, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$rhs, SETULE:{ *:[Other] })
vsetule_v4i32(lhs, rhs): 	(vsetcc:{ *:[v4i32] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$lhs, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$rhs, SETULE:{ *:[Other] })
vsetule_v8i16(lhs, rhs): 	(vsetcc:{ *:[v8i16] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$lhs, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$rhs, SETULE:{ *:[Other] })
vsetult_v16i8(lhs, rhs): 	(vsetcc:{ *:[v16i8] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$lhs, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$rhs, SETULT:{ *:[Other] })
vsetult_v2i64(lhs, rhs): 	(vsetcc:{ *:[v2i64] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$lhs, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$rhs, SETULT:{ *:[Other] })
vsetult_v4i32(lhs, rhs): 	(vsetcc:{ *:[v4i32] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$lhs, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$rhs, SETULT:{ *:[Other] })
vsetult_v8i16(lhs, rhs): 	(vsetcc:{ *:[v8i16] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$lhs, node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$rhs, SETULT:{ *:[Other] })
vsplat_imm_eq_1: 	(build_vector:{})
vsplatf32(e0): 	(build_vector:{ *:[v4f32] } node:{}:$e0, node:{}:$e0, node:{}:$e0, node:{}:$e0)
vsplatf64(e0): 	(build_vector:{ *:[v2f64] } node:{}:$e0, node:{}:$e0)
vsplati16(e0): 	(build_vector:{ *:[v8i16] } node:{}:$e0, node:{}:$e0, node:{}:$e0, node:{}:$e0, node:{}:$e0, node:{}:$e0, node:{}:$e0, node:{}:$e0)
vsplati16_elt(v, i): 	(MipsVSHF:{ *:[v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } (build_vector:{ *:[v8i16] } node:{}:$i, node:{}:$i, node:{}:$i, node:{}:$i, node:{}:$i, node:{}:$i, node:{}:$i, node:{}:$i), node:{ *:[v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$v, node:{ *:[v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$v)
vsplati16imm15(wt): 	(and:{ *:[v8i16] } node:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>))
vsplati32(e0): 	(build_vector:{ *:[v4i32] } node:{}:$e0, node:{}:$e0, node:{}:$e0, node:{}:$e0)
vsplati32_elt(v, i): 	(MipsVSHF:{ *:[v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } (build_vector:{ *:[v4i32] } node:{}:$i, node:{}:$i, node:{}:$i, node:{}:$i), node:{ *:[v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$v, node:{ *:[v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$v)
vsplati32imm31(wt): 	(and:{ *:[v4i32] } node:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>))
vsplati64(e0): 	(build_vector:{ *:[v2i64] } node:{}:$e0, node:{}:$e0)
vsplati64_elt(v, i): 	(MipsVSHF:{ *:[v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } (bitconvert:{ *:[v2i64] } (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] } node:{}:$i, node:{}:$i, node:{}:$i, node:{}:$i), (build_vector:{ *:[v4i32] }))), node:{ *:[v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$v, node:{ *:[v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$v)
vsplati64_imm_eq_1: 	(bitconvert:{} (build_vector:{ *:[v4i32] }))
vsplati64_imm_eq_63: 	(bitconvert:{} (build_vector:{ *:[v4i32] }))
vsplati64_splat_d(e0): 	(bitconvert:{ *:[v2i64] } (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] } node:{}:$e0, node:{}:$e0, node:{}:$e0, node:{}:$e0), (build_vector:{ *:[v4i32] })))
vsplati64imm63(wt): 	(and:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } node:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$wt, (bitconvert:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>)
vsplati8(e0): 	(build_vector:{ *:[v16i8] } node:{}:$e0, node:{}:$e0, node:{}:$e0, node:{}:$e0, node:{}:$e0, node:{}:$e0, node:{}:$e0, node:{}:$e0, node:{}:$e0, node:{}:$e0, node:{}:$e0, node:{}:$e0, node:{}:$e0, node:{}:$e0, node:{}:$e0, node:{}:$e0)
vsplati8_elt(v, i): 	(MipsVSHF:{ *:[v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] } (build_vector:{ *:[v16i8] } node:{}:$i, node:{}:$i, node:{}:$i, node:{}:$i, node:{}:$i, node:{}:$i, node:{}:$i, node:{}:$i, node:{}:$i, node:{}:$i, node:{}:$i, node:{}:$i, node:{}:$i, node:{}:$i, node:{}:$i, node:{}:$i), node:{ *:[v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$v, node:{ *:[v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }:$v)
vsplati8imm7(wt): 	(and:{ *:[v16i8] } node:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>))
vtFP: 	(vt:{ *:[Other] })
vtInt: 	(vt:{ *:[Other] })
zextload(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>>
zextloadi1(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_zextload>>
zextloadi16(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_zextload>>
zextloadi32(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_zextload>>
zextloadi8(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_zextload>>
zextloadvi1(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_zextload>>
zextloadvi16(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_zextload>>
zextloadvi32(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_zextload>>
zextloadvi8(ptr): 	(ld:{} node:{ *:[iPTR] }:$ptr)<<P:Predicate_unindexedload>><<P:Predicate_zextload>>
ABSQ_S_PH: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4045:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
ABSQ_S_PH_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rt, (intrinsic_w_chain:{} 4045:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs))
ABSQ_S_QB: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4046:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
ABSQ_S_QB_MMR2: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rt, (intrinsic_w_chain:{} 4046:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs))
ABSQ_S_W: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4047:{}, GPR32Opnd:{ *:[i32] }:$rt))
ABSQ_S_W_MM: 	(set GPR32Opnd:{ *:[i32] }:$rt, (intrinsic_w_chain:{} 4047:{}, GPR32Opnd:{ *:[i32] }:$rs))
ADDIU_MMR6: 	(set GPR32Opnd:{ *:[i32] }:$rt, (add:{} GPR32Opnd:{ *:[i32] }:$rs, (immSExt16:{}):$imm16))
ADDQH_PH: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4055:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
ADDQH_PH_MMR2: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4055:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
ADDQH_R_PH: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4056:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
ADDQH_R_PH_MMR2: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4056:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
ADDQH_R_W: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_wo_chain:{} 4057:{}, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
ADDQH_R_W_MMR2: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_wo_chain:{} 4057:{}, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
ADDQH_W: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_wo_chain:{} 4058:{}, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
ADDQH_W_MMR2: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_wo_chain:{} 4058:{}, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
ADDQ_S_PH: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4053:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
ADDQ_S_PH_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4053:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
ADDQ_S_W: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4054:{}, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
ADDQ_S_W_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4054:{}, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
ADDS_A_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (intrinsic_wo_chain:{} 4059:{}, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
ADDS_A_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4060:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
ADDS_A_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4061:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
ADDS_A_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4062:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
ADDS_S_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (intrinsic_wo_chain:{} 4063:{}, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
ADDS_S_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4064:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
ADDS_S_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4065:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
ADDS_S_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4066:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
ADDS_U_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (intrinsic_wo_chain:{} 4067:{}, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
ADDS_U_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4068:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
ADDS_U_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4069:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
ADDS_U_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4070:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
ADDU16_MM: 	(set GPRMM16Opnd:{ *:[i32] }:$rd, (add:{} GPRMM16Opnd:{ *:[i32] }:$rs, GPRMM16Opnd:{ *:[i32] }:$rt))
ADDU16_MMR6: 	(set GPRMM16Opnd:{ *:[i32] }:$rd, (add:{} GPRMM16Opnd:{ *:[i32] }:$rs, GPRMM16Opnd:{ *:[i32] }:$rt))
ADDUH_QB: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4076:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
ADDUH_QB_MMR2: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4076:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
ADDUH_R_QB: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4077:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
ADDUH_R_QB_MMR2: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4077:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
ADDU_PH: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4072:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
ADDU_PH_MMR2: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4072:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
ADDU_S_PH: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4074:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
ADDU_S_PH_MMR2: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4074:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
ADDU_S_QB: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4075:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
ADDU_S_QB_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4075:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
ADDVI_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (add:{} MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm5:{ *:[v16i8] }:$imm))
ADDVI_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (add:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, vsplati64_uimm5:{ *:[v2i64] }:$imm))
ADDVI_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (add:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, vsplati16_uimm5:{ *:[v8i16] }:$imm))
ADDVI_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (add:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$imm))
ADDV_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (add:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
ADDV_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (add:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
ADDV_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (add:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
ADDV_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (add:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
ADD_A_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (intrinsic_wo_chain:{} 4048:{}, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
ADD_A_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4049:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
ADD_A_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4050:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
ADD_A_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4051:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
ADDiu: 	(set GPR32Opnd:{ *:[i32] }:$rt, (add:{} GPR32Opnd:{ *:[i32] }:$rs, (imm32SExt16:{}):$imm16))
ADDu: 	(set GPR32Opnd:{ *:[i32] }:$rd, (add:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
ADDu_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (add:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
ADJCALLSTACKDOWN: 	(callseq_start (timm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }):$amt1, (timm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }):$amt2)
ADJCALLSTACKUP: 	(callseq_end (timm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }):$amt1, (timm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }):$amt2)
AND: 	(set GPR32Opnd:{ *:[i32] }:$rd, (and:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
AND16_MM: 	(set GPRMM16Opnd:{ *:[i32] }:$dst, (and:{} GPRMM16Opnd:{ *:[i32] }:$rs, GPRMM16Opnd:{ *:[i32] }:$rt))
AND64: 	(set GPR64Opnd:{ *:[i64] }:$rd, (and:{} GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt))
ANDI_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (and:{} MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm8:{ *:[v16i8] }:$u8))
AND_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (and:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
AND_MMR6: 	(set GPR32Opnd:{ *:[i32] }:$rd, (and:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
AND_V: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (and:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
AND_V_D_PSEUDO: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (and:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
AND_V_H_PSEUDO: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (and:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
AND_V_W_PSEUDO: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (and:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
ANDi: 	(set GPR32Opnd:{ *:[i32] }:$rt, (and:{} GPR32Opnd:{ *:[i32] }:$rs, (imm32ZExt16:{}):$imm16))
ANDi64: 	(set GPR64Opnd:{ *:[i64] }:$rt, (and:{} GPR64Opnd:{ *:[i64] }:$rs, (immZExt16:{}):$imm16))
APPEND: 	(set GPR32Opnd:{ *:[i32] }:$rt, (intrinsic_wo_chain:{} 4089:{}, GPR32Opnd:{ *:[i32] }:$src, GPR32Opnd:{ *:[i32] }:$rs, (timmZExt5:{}):$sa))
APPEND_MMR2: 	(set GPR32Opnd:{ *:[i32] }:$rt, (intrinsic_wo_chain:{} 4089:{}, GPR32Opnd:{ *:[i32] }:$src, GPR32Opnd:{ *:[i32] }:$rs, (timmZExt5:{}):$sa))
ASUB_S_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (intrinsic_wo_chain:{} 4090:{}, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
ASUB_S_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4091:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
ASUB_S_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4092:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
ASUB_S_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4093:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
ASUB_U_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (intrinsic_wo_chain:{} 4094:{}, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
ASUB_U_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4095:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
ASUB_U_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4096:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
ASUB_U_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4097:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
ATOMIC_CMP_SWAP_I16: 	(set GPR32:{ *:[i32] }:$dst, (atomic_cmp_swap_16:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$cmp, GPR32:{ *:[i32] }:$swap))
ATOMIC_CMP_SWAP_I32: 	(set GPR32:{ *:[i32] }:$dst, (atomic_cmp_swap_32:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$cmp, GPR32:{ *:[i32] }:$swap))
ATOMIC_CMP_SWAP_I64: 	(set GPR64:{ *:[i64] }:$dst, (atomic_cmp_swap_64:{} iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$cmp, GPR64:{ *:[i64] }:$swap))
ATOMIC_CMP_SWAP_I8: 	(set GPR32:{ *:[i32] }:$dst, (atomic_cmp_swap_8:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$cmp, GPR32:{ *:[i32] }:$swap))
ATOMIC_LOAD_ADD_I16: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_add_16:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_ADD_I32: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_add_32:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_ADD_I64: 	(set GPR64:{ *:[i64] }:$dst, (atomic_load_add_64:{} iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr))
ATOMIC_LOAD_ADD_I8: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_add_8:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_AND_I16: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_and_16:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_AND_I32: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_and_32:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_AND_I64: 	(set GPR64:{ *:[i64] }:$dst, (atomic_load_and_64:{} iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr))
ATOMIC_LOAD_AND_I8: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_and_8:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_MAX_I16: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_max_16:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_MAX_I32: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_max_32:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_MAX_I64: 	(set GPR64:{ *:[i64] }:$dst, (atomic_load_max_64:{} iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr))
ATOMIC_LOAD_MAX_I8: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_max_8:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_MIN_I16: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_min_16:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_MIN_I32: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_min_32:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_MIN_I64: 	(set GPR64:{ *:[i64] }:$dst, (atomic_load_min_64:{} iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr))
ATOMIC_LOAD_MIN_I8: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_min_8:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_NAND_I16: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_nand_16:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_NAND_I32: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_nand_32:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_NAND_I64: 	(set GPR64:{ *:[i64] }:$dst, (atomic_load_nand_64:{} iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr))
ATOMIC_LOAD_NAND_I8: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_nand_8:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_OR_I16: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_or_16:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_OR_I32: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_or_32:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_OR_I64: 	(set GPR64:{ *:[i64] }:$dst, (atomic_load_or_64:{} iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr))
ATOMIC_LOAD_OR_I8: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_or_8:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_SUB_I16: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_sub_16:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_SUB_I32: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_sub_32:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_SUB_I64: 	(set GPR64:{ *:[i64] }:$dst, (atomic_load_sub_64:{} iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr))
ATOMIC_LOAD_SUB_I8: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_sub_8:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_UMAX_I16: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_umax_16:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_UMAX_I32: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_umax_32:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_UMAX_I64: 	(set GPR64:{ *:[i64] }:$dst, (atomic_load_umax_64:{} iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr))
ATOMIC_LOAD_UMAX_I8: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_umax_8:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_UMIN_I16: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_umin_16:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_UMIN_I32: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_umin_32:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_UMIN_I64: 	(set GPR64:{ *:[i64] }:$dst, (atomic_load_umin_64:{} iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr))
ATOMIC_LOAD_UMIN_I8: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_umin_8:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_XOR_I16: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_xor_16:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_XOR_I32: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_xor_32:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_LOAD_XOR_I64: 	(set GPR64:{ *:[i64] }:$dst, (atomic_load_xor_64:{} iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr))
ATOMIC_LOAD_XOR_I8: 	(set GPR32:{ *:[i32] }:$dst, (atomic_load_xor_8:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_SWAP_I16: 	(set GPR32:{ *:[i32] }:$dst, (atomic_swap_16:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_SWAP_I32: 	(set GPR32:{ *:[i32] }:$dst, (atomic_swap_32:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
ATOMIC_SWAP_I64: 	(set GPR64:{ *:[i64] }:$dst, (atomic_swap_64:{} iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr))
ATOMIC_SWAP_I8: 	(set GPR32:{ *:[i32] }:$dst, (atomic_swap_8:{} iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr))
AVER_S_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (intrinsic_wo_chain:{} 4106:{}, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
AVER_S_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4107:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
AVER_S_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4108:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
AVER_S_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4109:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
AVER_U_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (intrinsic_wo_chain:{} 4110:{}, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
AVER_U_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4111:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
AVER_U_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4112:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
AVER_U_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4113:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
AVE_S_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (intrinsic_wo_chain:{} 4098:{}, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
AVE_S_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4099:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
AVE_S_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4100:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
AVE_S_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4101:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
AVE_U_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (intrinsic_wo_chain:{} 4102:{}, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
AVE_U_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4103:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
AVE_U_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4104:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
AVE_U_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4105:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
B: 	(br (bb:{ *:[Other] }):$offset)
BADDu: 	(set GPR64Opnd:{ *:[i64] }:$rd, (and:{} (add:{} GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt), 255:{}))
BALIGN: 	(set GPR32Opnd:{ *:[i32] }:$rt, (intrinsic_wo_chain:{} 4114:{}, GPR32Opnd:{ *:[i32] }:$src, GPR32Opnd:{ *:[i32] }:$rs, (timmZExt2:{}):$sa))
BALIGN_MMR2: 	(set GPR32Opnd:{ *:[i32] }:$rt, (intrinsic_wo_chain:{} 4114:{}, GPR32Opnd:{ *:[i32] }:$src, GPR32Opnd:{ *:[i32] }:$rs, (immZExt2:{}):$bp))
BBIT0: 	(brcond (seteq:{ *:[i32] } (and:{} GPR64Opnd:{ *:[i64] }:$rs, (shl:{} 1:{}, (immZExt5_64:{}):$p)), 0:{}), (bb:{ *:[Other] }):$offset)
BBIT032: 	(brcond (seteq:{ *:[i32] } (and:{} GPR64Opnd:{ *:[i64] }:$rs, (shl:{} 4294967296:{}, (immZExt5_64:{}):$p)), 0:{}), (bb:{ *:[Other] }):$offset)
BBIT1: 	(brcond (setne:{ *:[i32] } (and:{} GPR64Opnd:{ *:[i64] }:$rs, (shl:{} 1:{}, (immZExt5_64:{}):$p)), 0:{}), (bb:{ *:[Other] }):$offset)
BBIT132: 	(brcond (setne:{ *:[i32] } (and:{} GPR64Opnd:{ *:[i64] }:$rs, (shl:{} 4294967296:{}, (immZExt5_64:{}):$p)), 0:{}), (bb:{ *:[Other] }):$offset)
BC1F: 	(MipsFPBrcond (MIPS_BRANCH_F:{}), FCCRegsOpnd:{ *:[i32] }:$fcc, (bb:{ *:[Other] }):$offset)
BC1F_MM: 	(MipsFPBrcond (MIPS_BRANCH_F:{}), FCCRegsOpnd:{ *:[i32] }:$fcc, (bb:{ *:[Other] }):$offset)
BC1T: 	(MipsFPBrcond (MIPS_BRANCH_T:{}), FCCRegsOpnd:{ *:[i32] }:$fcc, (bb:{ *:[Other] }):$offset)
BC1T_MM: 	(MipsFPBrcond (MIPS_BRANCH_T:{}), FCCRegsOpnd:{ *:[i32] }:$fcc, (bb:{ *:[Other] }):$offset)
BCLRI_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (and:{} MSA128BOpnd:{ *:[v16i8] }:$ws, vsplat_uimm_inv_pow2:{ *:[v4i8 v16i8 v2i16 v8i16 v4i32 v2i64 v8f16 v4f32 v2f64] }:$m))
BCLRI_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (and:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, vsplat_uimm_inv_pow2:{ *:[v4i8 v16i8 v2i16 v8i16 v4i32 v2i64 v8f16 v4f32 v2f64] }:$m))
BCLRI_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (and:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, vsplat_uimm_inv_pow2:{ *:[v4i8 v16i8 v2i16 v8i16 v4i32 v2i64 v8f16 v4f32 v2f64] }:$m))
BCLRI_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (and:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, vsplat_uimm_inv_pow2:{ *:[v4i8 v16i8 v2i16 v8i16 v4i32 v2i64 v8f16 v4f32 v2f64] }:$m))
BCLR_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (vbclr_b:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
BCLR_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vbclr_d:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
BCLR_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (vbclr_h:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
BCLR_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vbclr_w:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
BC_MMR6: 	(br (bb:{ *:[Other] }):$offset)
BEQ: 	(brcond (seteq:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt), (bb:{ *:[Other] }):$offset)
BEQ64: 	(brcond (seteq:{ *:[i32] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt), (bb:{ *:[Other] }):$offset)
BEQ_MM: 	(brcond (seteq:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt), (bb:{ *:[Other] }):$offset)
BGEZ: 	(brcond (setge:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, 0:{}), (bb:{ *:[Other] }):$offset)
BGEZ64: 	(brcond (setge:{ *:[i32] } GPR64Opnd:{ *:[i64] }:$rs, 0:{}), (bb:{ *:[Other] }):$offset)
BGEZ_MM: 	(brcond (setge:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, 0:{}), (bb:{ *:[Other] }):$offset)
BGTZ: 	(brcond (setgt:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, 0:{}), (bb:{ *:[Other] }):$offset)
BGTZ64: 	(brcond (setgt:{ *:[i32] } GPR64Opnd:{ *:[i64] }:$rs, 0:{}), (bb:{ *:[Other] }):$offset)
BGTZ_MM: 	(brcond (setgt:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, 0:{}), (bb:{ *:[Other] }):$offset)
BINSLI_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (vselect:{} vsplat_maskl_bits_uimm3:{ *:[v16i8] }:$m, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wd_in))
BINSLI_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vselect:{} vsplat_maskl_bits_uimm6:{ *:[v2i64] }:$m, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd_in))
BINSLI_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (vselect:{} vsplat_maskl_bits_uimm4:{ *:[v8i16] }:$m, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd_in))
BINSLI_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vselect:{} vsplat_maskl_bits_uimm5:{ *:[v4i32] }:$m, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd_in))
BINSL_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (intrinsic_wo_chain:{} 4123:{}, MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
BINSL_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4124:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd_in, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
BINSL_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4125:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd_in, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
BINSL_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4126:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd_in, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
BINSRI_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (vselect:{} vsplat_maskr_bits_uimm3:{ *:[v16i8] }:$m, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wd_in))
BINSRI_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vselect:{} vsplat_maskr_bits_uimm6:{ *:[v2i64] }:$m, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd_in))
BINSRI_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (vselect:{} vsplat_maskr_bits_uimm4:{ *:[v8i16] }:$m, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd_in))
BINSRI_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vselect:{} vsplat_maskr_bits_uimm5:{ *:[v4i32] }:$m, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd_in))
BINSR_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (intrinsic_wo_chain:{} 4131:{}, MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
BINSR_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4132:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd_in, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
BINSR_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4133:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd_in, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
BINSR_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4134:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd_in, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
BITREV: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_wo_chain:{} 4139:{}, GPR32Opnd:{ *:[i32] }:$rt))
BITREV_MM: 	(set GPR32Opnd:{ *:[i32] }:$rt, (intrinsic_wo_chain:{} 4139:{}, GPR32Opnd:{ *:[i32] }:$rs))
BLEZ: 	(brcond (setle:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, 0:{}), (bb:{ *:[Other] }):$offset)
BLEZ64: 	(brcond (setle:{ *:[i32] } GPR64Opnd:{ *:[i64] }:$rs, 0:{}), (bb:{ *:[Other] }):$offset)
BLEZ_MM: 	(brcond (setle:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, 0:{}), (bb:{ *:[Other] }):$offset)
BLTZ: 	(brcond (setlt:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, 0:{}), (bb:{ *:[Other] }):$offset)
BLTZ64: 	(brcond (setlt:{ *:[i32] } GPR64Opnd:{ *:[i64] }:$rs, 0:{}), (bb:{ *:[Other] }):$offset)
BLTZ_MM: 	(brcond (setlt:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, 0:{}), (bb:{ *:[Other] }):$offset)
BMNZI_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (vselect:{} vsplati8_uimm8:{ *:[v16i8] }:$u8, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wd_in))
BMNZ_V: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (vselect:{} MSA128BOpnd:{ *:[v16i8] }:$wt, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wd_in))
BMZI_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (vselect:{} vsplati8_uimm8:{ *:[v16i8] }:$u8, MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws))
BMZ_V: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (vselect:{} MSA128BOpnd:{ *:[v16i8] }:$wt, MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws))
BNE: 	(brcond (setne:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt), (bb:{ *:[Other] }):$offset)
BNE64: 	(brcond (setne:{ *:[i32] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt), (bb:{ *:[Other] }):$offset)
BNEGI_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (xor:{} MSA128BOpnd:{ *:[v16i8] }:$ws, vsplat_uimm_pow2:{ *:[v4i8 v16i8 v2i16 v8i16 v4i32 v2i64 v8f16 v4f32 v2f64] }:$m))
BNEGI_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (xor:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, vsplat_uimm_pow2:{ *:[v4i8 v16i8 v2i16 v8i16 v4i32 v2i64 v8f16 v4f32 v2f64] }:$m))
BNEGI_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (xor:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, vsplat_uimm_pow2:{ *:[v4i8 v16i8 v2i16 v8i16 v4i32 v2i64 v8f16 v4f32 v2f64] }:$m))
BNEGI_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (xor:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, vsplat_uimm_pow2:{ *:[v4i8 v16i8 v2i16 v8i16 v4i32 v2i64 v8f16 v4f32 v2f64] }:$m))
BNEG_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (vbneg_b:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
BNEG_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vbneg_d:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
BNEG_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (vbneg_h:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
BNEG_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vbneg_w:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
BNE_MM: 	(brcond (setne:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt), (bb:{ *:[Other] }):$offset)
BPOSGE32_PSEUDO: 	(set GPR32Opnd:{ *:[i32] }:$dst, (intrinsic_w_chain:{} 4157:{}))
BSELI_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (vselect:{} MSA128BOpnd:{ *:[v16i8] }:$wd_in, vsplati8_uimm8:{ *:[v16i8] }:$u8, MSA128BOpnd:{ *:[v16i8] }:$ws))
BSEL_D_PSEUDO: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vselect:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd_in, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws))
BSEL_FD_PSEUDO: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vselect:{ *:[v2f64] } MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd_in, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws))
BSEL_FW_PSEUDO: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vselect:{ *:[v4f32] } MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd_in, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws))
BSEL_H_PSEUDO: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (vselect:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd_in, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws))
BSEL_V: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (vselect:{} MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$wt, MSA128BOpnd:{ *:[v16i8] }:$ws))
BSEL_W_PSEUDO: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vselect:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd_in, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws))
BSETI_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (or:{} MSA128BOpnd:{ *:[v16i8] }:$ws, vsplat_uimm_pow2:{ *:[v4i8 v16i8 v2i16 v8i16 v4i32 v2i64 v8f16 v4f32 v2f64] }:$m))
BSETI_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (or:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, vsplat_uimm_pow2:{ *:[v4i8 v16i8 v2i16 v8i16 v4i32 v2i64 v8f16 v4f32 v2f64] }:$m))
BSETI_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (or:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, vsplat_uimm_pow2:{ *:[v4i8 v16i8 v2i16 v8i16 v4i32 v2i64 v8f16 v4f32 v2f64] }:$m))
BSETI_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (or:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, vsplat_uimm_pow2:{ *:[v4i8 v16i8 v2i16 v8i16 v4i32 v2i64 v8f16 v4f32 v2f64] }:$m))
BSET_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (vbset_b:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
BSET_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vbset_d:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
BSET_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (vbset_h:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
BSET_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vbset_w:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
B_MM: 	(br (bb:{ *:[Other] }):$offset)
BuildPairF64: 	(set AFGR64Opnd:{ *:[f64] }:$dst, (MipsBuildPairF64:{} GPR32Opnd:{ *:[i32] }:$lo, GPR32Opnd:{ *:[i32] }:$hi))
BuildPairF64_64: 	(set FGR64Opnd:{ *:[f64] }:$dst, (MipsBuildPairF64:{} GPR32Opnd:{ *:[i32] }:$lo, GPR32Opnd:{ *:[i32] }:$hi))
CEQI_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (vseteq_v16i8:{} MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_simm5:{ *:[v16i8] }:$imm))
CEQI_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vseteq_v2i64:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, vsplati64_simm5:{ *:[v2i64] }:$imm))
CEQI_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (vseteq_v8i16:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, vsplati16_simm5:{ *:[v8i16] }:$imm))
CEQI_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vseteq_v4i32:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, vsplati32_simm5:{ *:[v4i32] }:$imm))
CEQ_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (vseteq_v16i8:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
CEQ_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vseteq_v2i64:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
CEQ_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (vseteq_v8i16:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
CEQ_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vseteq_v4i32:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
CINS: 	(set GPR64Opnd:{ *:[i64] }:$rt, (MipsCIns:{} GPR64Opnd:{ *:[i64] }:$rs, (immZExt5:{}):$pos, (imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }):$lenm1))
CINS32: 	(set GPR64Opnd:{ *:[i64] }:$rt, (MipsCIns:{} GPR64Opnd:{ *:[i64] }:$rs, (immZExt5Plus32:{}):$pos, (imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }):$lenm1))
CINS_i32: 	(set GPR32Opnd:{ *:[i32] }:$rt, (MipsCIns:{} GPR32Opnd:{ *:[i32] }:$rs, (immZExt5:{}):$pos, (imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }):$lenm1))
CLEI_S_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (vsetle_v16i8:{} MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_simm5:{ *:[v16i8] }:$imm))
CLEI_S_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vsetle_v2i64:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, vsplati64_simm5:{ *:[v2i64] }:$imm))
CLEI_S_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (vsetle_v8i16:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, vsplati16_simm5:{ *:[v8i16] }:$imm))
CLEI_S_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vsetle_v4i32:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, vsplati32_simm5:{ *:[v4i32] }:$imm))
CLEI_U_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (vsetule_v16i8:{} MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm5:{ *:[v16i8] }:$imm))
CLEI_U_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vsetule_v2i64:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, vsplati64_uimm5:{ *:[v2i64] }:$imm))
CLEI_U_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (vsetule_v8i16:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, vsplati16_uimm5:{ *:[v8i16] }:$imm))
CLEI_U_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vsetule_v4i32:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$imm))
CLE_S_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (vsetle_v16i8:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
CLE_S_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vsetle_v2i64:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
CLE_S_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (vsetle_v8i16:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
CLE_S_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vsetle_v4i32:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
CLE_U_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (vsetule_v16i8:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
CLE_U_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vsetule_v2i64:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
CLE_U_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (vsetule_v8i16:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
CLE_U_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vsetule_v4i32:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
CLO: 	(set GPR32Opnd:{ *:[i32] }:$rd, (ctlz:{} (not:{} GPR32Opnd:{ *:[i32] }:$rs)))
CLO_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (ctlz:{} (not:{} GPR32Opnd:{ *:[i32] }:$rs)))
CLO_R6: 	(set GPR32Opnd:{ *:[i32] }:$rd, (ctlz:{} (not:{} GPR32Opnd:{ *:[i32] }:$rs)))
CLTI_S_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (vsetlt_v16i8:{} MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_simm5:{ *:[v16i8] }:$imm))
CLTI_S_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vsetlt_v2i64:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, vsplati64_simm5:{ *:[v2i64] }:$imm))
CLTI_S_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (vsetlt_v8i16:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, vsplati16_simm5:{ *:[v8i16] }:$imm))
CLTI_S_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vsetlt_v4i32:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, vsplati32_simm5:{ *:[v4i32] }:$imm))
CLTI_U_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (vsetult_v16i8:{} MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm5:{ *:[v16i8] }:$imm))
CLTI_U_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vsetult_v2i64:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, vsplati64_uimm5:{ *:[v2i64] }:$imm))
CLTI_U_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (vsetult_v8i16:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, vsplati16_uimm5:{ *:[v8i16] }:$imm))
CLTI_U_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vsetult_v4i32:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$imm))
CLT_S_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (vsetlt_v16i8:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
CLT_S_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vsetlt_v2i64:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
CLT_S_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (vsetlt_v8i16:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
CLT_S_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vsetlt_v4i32:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
CLT_U_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (vsetult_v16i8:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
CLT_U_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vsetult_v2i64:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
CLT_U_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (vsetult_v8i16:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
CLT_U_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vsetult_v4i32:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
CLZ: 	(set GPR32Opnd:{ *:[i32] }:$rd, (ctlz:{} GPR32Opnd:{ *:[i32] }:$rs))
CLZ_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (ctlz:{} GPR32Opnd:{ *:[i32] }:$rs))
CLZ_R6: 	(set GPR32Opnd:{ *:[i32] }:$rd, (ctlz:{} GPR32Opnd:{ *:[i32] }:$rs))
CMPGDU_EQ_QB: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4217:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
CMPGDU_EQ_QB_MMR2: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4217:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
CMPGDU_LE_QB: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4218:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
CMPGDU_LE_QB_MMR2: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4218:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
CMPGDU_LT_QB: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4219:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
CMPGDU_LT_QB_MMR2: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4219:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
CMPGU_EQ_QB: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4220:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
CMPGU_EQ_QB_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4220:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
CMPGU_LE_QB: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4221:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
CMPGU_LE_QB_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4221:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
CMPGU_LT_QB: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4222:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
CMPGU_LT_QB_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4222:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
CMPU_EQ_QB: 	(intrinsic_void 4223:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt)
CMPU_EQ_QB_MM: 	(intrinsic_void 4223:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt)
CMPU_LE_QB: 	(intrinsic_void 4224:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt)
CMPU_LE_QB_MM: 	(intrinsic_void 4224:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt)
CMPU_LT_QB: 	(intrinsic_void 4225:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt)
CMPU_LT_QB_MM: 	(intrinsic_void 4225:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt)
CMP_EQ_D: 	(set FGRCCOpnd:{ *:[i32] }:$fd, (setoeq:{} FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft))
CMP_EQ_D_MMR6: 	(set FGRCCOpnd:{ *:[i32] }:$fd, (setoeq:{} FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft))
CMP_EQ_PH: 	(intrinsic_void 4214:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt)
CMP_EQ_PH_MM: 	(intrinsic_void 4214:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt)
CMP_EQ_S: 	(set FGRCCOpnd:{ *:[i32] }:$fd, (setoeq:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft))
CMP_EQ_S_MMR6: 	(set FGRCCOpnd:{ *:[i32] }:$fd, (setoeq:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft))
CMP_LE_D: 	(set FGRCCOpnd:{ *:[i32] }:$fd, (setole:{} FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft))
CMP_LE_D_MMR6: 	(set FGRCCOpnd:{ *:[i32] }:$fd, (setole:{} FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft))
CMP_LE_PH: 	(intrinsic_void 4215:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt)
CMP_LE_PH_MM: 	(intrinsic_void 4215:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt)
CMP_LE_S: 	(set FGRCCOpnd:{ *:[i32] }:$fd, (setole:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft))
CMP_LE_S_MMR6: 	(set FGRCCOpnd:{ *:[i32] }:$fd, (setole:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft))
CMP_LT_D: 	(set FGRCCOpnd:{ *:[i32] }:$fd, (setolt:{} FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft))
CMP_LT_D_MMR6: 	(set FGRCCOpnd:{ *:[i32] }:$fd, (setolt:{} FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft))
CMP_LT_PH: 	(intrinsic_void 4216:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt)
CMP_LT_PH_MM: 	(intrinsic_void 4216:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt)
CMP_LT_S: 	(set FGRCCOpnd:{ *:[i32] }:$fd, (setolt:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft))
CMP_LT_S_MMR6: 	(set FGRCCOpnd:{ *:[i32] }:$fd, (setolt:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft))
CMP_UEQ_D: 	(set FGRCCOpnd:{ *:[i32] }:$fd, (setueq:{} FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft))
CMP_UEQ_D_MMR6: 	(set FGRCCOpnd:{ *:[i32] }:$fd, (setueq:{} FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft))
CMP_UEQ_S: 	(set FGRCCOpnd:{ *:[i32] }:$fd, (setueq:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft))
CMP_UEQ_S_MMR6: 	(set FGRCCOpnd:{ *:[i32] }:$fd, (setueq:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft))
CMP_ULE_D: 	(set FGRCCOpnd:{ *:[i32] }:$fd, (setule:{} FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft))
CMP_ULE_D_MMR6: 	(set FGRCCOpnd:{ *:[i32] }:$fd, (setule:{} FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft))
CMP_ULE_S: 	(set FGRCCOpnd:{ *:[i32] }:$fd, (setule:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft))
CMP_ULE_S_MMR6: 	(set FGRCCOpnd:{ *:[i32] }:$fd, (setule:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft))
CMP_ULT_D: 	(set FGRCCOpnd:{ *:[i32] }:$fd, (setult:{} FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft))
CMP_ULT_D_MMR6: 	(set FGRCCOpnd:{ *:[i32] }:$fd, (setult:{} FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft))
CMP_ULT_S: 	(set FGRCCOpnd:{ *:[i32] }:$fd, (setult:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft))
CMP_ULT_S_MMR6: 	(set FGRCCOpnd:{ *:[i32] }:$fd, (setult:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft))
CMP_UN_D: 	(set FGRCCOpnd:{ *:[i32] }:$fd, (setuo:{} FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft))
CMP_UN_D_MMR6: 	(set FGRCCOpnd:{ *:[i32] }:$fd, (setuo:{} FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft))
CMP_UN_S: 	(set FGRCCOpnd:{ *:[i32] }:$fd, (setuo:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft))
CMP_UN_S_MMR6: 	(set FGRCCOpnd:{ *:[i32] }:$fd, (setuo:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft))
COPY_FD_PSEUDO: 	(set FGR64:{ *:[f64] }:$wd, (vector_extract:{} MSA128D:{ *:[v2f64] }:$ws, (immZExt1Ptr:{}):$n))
COPY_FW_PSEUDO: 	(set FGR32:{ *:[f32] }:$wd, (vector_extract:{} MSA128W:{ *:[v4f32] }:$ws, (immZExt2Ptr:{}):$n))
COPY_S_B: 	(set GPR32Opnd:{ *:[i32] }:$rd, (vextract_sext_i8:{} MSA128BOpnd:{ *:[v16i8] }:$ws, (immZExt4Ptr:{}):$n))
COPY_S_D: 	(set GPR64Opnd:{ *:[i64] }:$rd, (vextract_sext_i64:{} MSA128DOpnd:{ *:[v2i64] }:$ws, (immZExt1Ptr:{}):$n))
COPY_S_H: 	(set GPR32Opnd:{ *:[i32] }:$rd, (vextract_sext_i16:{} MSA128HOpnd:{ *:[v8i16] }:$ws, (immZExt3Ptr:{}):$n))
COPY_S_W: 	(set GPR32Opnd:{ *:[i32] }:$rd, (vextract_sext_i32:{} MSA128WOpnd:{ *:[v4i32] }:$ws, (immZExt2Ptr:{}):$n))
COPY_U_B: 	(set GPR32Opnd:{ *:[i32] }:$rd, (vextract_zext_i8:{} MSA128BOpnd:{ *:[v16i8] }:$ws, (immZExt4Ptr:{}):$n))
COPY_U_H: 	(set GPR32Opnd:{ *:[i32] }:$rd, (vextract_zext_i16:{} MSA128HOpnd:{ *:[v8i16] }:$ws, (immZExt3Ptr:{}):$n))
COPY_U_W: 	(set GPR32Opnd:{ *:[i32] }:$rd, (vextract_zext_i32:{} MSA128WOpnd:{ *:[v4i32] }:$ws, (immZExt2Ptr:{}):$n))
DADDiu: 	(set GPR64Opnd:{ *:[i64] }:$rt, (add:{} GPR64Opnd:{ *:[i64] }:$rs, (immSExt16:{}):$imm16))
DADDu: 	(set GPR64Opnd:{ *:[i64] }:$rd, (add:{} GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt))
DCLO: 	(set GPR64Opnd:{ *:[i64] }:$rd, (ctlz:{} (not:{} GPR64Opnd:{ *:[i64] }:$rs)))
DCLO_R6: 	(set GPR64Opnd:{ *:[i64] }:$rd, (ctlz:{} (not:{} GPR64Opnd:{ *:[i64] }:$rs)))
DCLZ: 	(set GPR64Opnd:{ *:[i64] }:$rd, (ctlz:{} GPR64Opnd:{ *:[i64] }:$rs))
DCLZ_R6: 	(set GPR64Opnd:{ *:[i64] }:$rd, (ctlz:{} GPR64Opnd:{ *:[i64] }:$rs))
DDIV: 	(set GPR64Opnd:{ *:[i64] }:$rd, (sdiv:{} GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt))
DDIVU: 	(set GPR64Opnd:{ *:[i64] }:$rd, (udiv:{} GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt))
DEXT: 	(set GPR64Opnd:{ *:[i64] }:$rt, (MipsExt:{} GPR64Opnd:{ *:[i64] }:$rs, (immZExt5:{}):$pos, (immZExt5Plus1:{}):$size))
DEXTM: 	(set GPR64Opnd:{ *:[i64] }:$rt, (MipsExt:{} GPR64Opnd:{ *:[i64] }:$rs, (immZExt5:{}):$pos, (immZExt5Plus33:{}):$size))
DEXTU: 	(set GPR64Opnd:{ *:[i64] }:$rt, (MipsExt:{} GPR64Opnd:{ *:[i64] }:$rs, (immZExt5Plus32:{}):$pos, (immZExt5Plus1:{}):$size))
DIV: 	(set GPR32Opnd:{ *:[i32] }:$rd, (sdiv:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
DIVU: 	(set GPR32Opnd:{ *:[i32] }:$rd, (udiv:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
DIVU_MMR6: 	(set GPR32Opnd:{ *:[i32] }:$rd, (udiv:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
DIV_MMR6: 	(set GPR32Opnd:{ *:[i32] }:$rd, (sdiv:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
DIV_S_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (sdiv:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
DIV_S_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (sdiv:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
DIV_S_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (sdiv:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
DIV_S_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (sdiv:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
DIV_U_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (udiv:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
DIV_U_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (udiv:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
DIV_U_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (udiv:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
DIV_U_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (udiv:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
DLSA: 	(set GPR64Opnd:{ *:[i64] }:$rd, (add:{} GPR64Opnd:{ *:[i64] }:$rt, (shl:{} GPR64Opnd:{ *:[i64] }:$rs, (immZExt2Lsa:{}):$sa)))
DMFC1: 	(set GPR64Opnd:{ *:[i64] }:$rt, (bitconvert:{} FGR64Opnd:{ *:[f64] }:$fs))
DMOD: 	(set GPR64Opnd:{ *:[i64] }:$rd, (srem:{} GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt))
DMODU: 	(set GPR64Opnd:{ *:[i64] }:$rd, (urem:{} GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt))
DMTC1: 	(set FGR64Opnd:{ *:[f64] }:$fs, (bitconvert:{} GPR64Opnd:{ *:[i64] }:$rt))
DMUH: 	(set GPR64Opnd:{ *:[i64] }:$rd, (mulhs:{} GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt))
DMUHU: 	(set GPR64Opnd:{ *:[i64] }:$rd, (mulhu:{} GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt))
DMUL: 	(set GPR64Opnd:{ *:[i64] }:$rd, (mul:{} GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt))
DMUL_R6: 	(set GPR64Opnd:{ *:[i64] }:$rd, (mul:{} GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt))
DOTP_S_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4244:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
DOTP_S_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4245:{}, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
DOTP_S_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4246:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
DOTP_U_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4247:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
DOTP_U_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4248:{}, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
DOTP_U_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4249:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
DPADD_S_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4251:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd_in, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
DPADD_S_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4252:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
DPADD_S_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4253:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd_in, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
DPADD_U_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4254:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd_in, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
DPADD_U_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4255:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
DPADD_U_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4256:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd_in, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
DPAQX_SA_W_PH: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPAQX_SA_W_PH:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPAQX_SA_W_PH_MMR2: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPAQX_SA_W_PH:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPAQX_S_W_PH: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPAQX_S_W_PH:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPAQX_S_W_PH_MMR2: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPAQX_S_W_PH:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPAQ_SA_L_W: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPAQ_SA_L_W:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPAQ_SA_L_W_MM: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPAQ_SA_L_W:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPAQ_S_W_PH: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPAQ_S_W_PH:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPAQ_S_W_PH_MM: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPAQ_S_W_PH:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPAU_H_QBL: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPAU_H_QBL:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPAU_H_QBL_MM: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPAU_H_QBL:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPAU_H_QBR: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPAU_H_QBR:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPAU_H_QBR_MM: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPAU_H_QBR:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPAX_W_PH: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPAX_W_PH:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPAX_W_PH_MMR2: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPAX_W_PH:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPA_W_PH: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPA_W_PH:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPA_W_PH_MMR2: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPA_W_PH:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPOP: 	(set GPR64Opnd:{ *:[i64] }:$rd, (ctpop:{} GPR64Opnd:{ *:[i64] }:$rs))
DPSQX_SA_W_PH: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPSQX_SA_W_PH:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPSQX_SA_W_PH_MMR2: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPSQX_SA_W_PH:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPSQX_S_W_PH: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPSQX_S_W_PH:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPSQX_S_W_PH_MMR2: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPSQX_S_W_PH:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPSQ_SA_L_W: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPSQ_SA_L_W:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPSQ_SA_L_W_MM: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPSQ_SA_L_W:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPSQ_S_W_PH: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPSQ_S_W_PH:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPSQ_S_W_PH_MM: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPSQ_S_W_PH:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPSUB_S_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4271:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd_in, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
DPSUB_S_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4272:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
DPSUB_S_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4273:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd_in, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
DPSUB_U_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4274:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd_in, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
DPSUB_U_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4275:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
DPSUB_U_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4276:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd_in, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
DPSU_H_QBL: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPSU_H_QBL:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPSU_H_QBL_MM: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPSU_H_QBL:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPSU_H_QBR: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPSU_H_QBR:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPSU_H_QBR_MM: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPSU_H_QBR:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPSX_W_PH: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPSX_W_PH:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPSX_W_PH_MMR2: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPSX_W_PH:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPS_W_PH: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPS_W_PH:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DPS_W_PH_MMR2: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsDPS_W_PH:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
DROTR: 	(set GPR64Opnd:{ *:[i64] }:$rd, (rotr:{} GPR64Opnd:{ *:[i64] }:$rt, (immZExt6:{}):$shamt))
DROTRV: 	(set GPR64Opnd:{ *:[i64] }:$rd, (rotr:{} GPR64Opnd:{ *:[i64] }:$rt, GPR32Opnd:{ *:[i32] }:$rs))
DSLL: 	(set GPR64Opnd:{ *:[i64] }:$rd, (shl:{} GPR64Opnd:{ *:[i64] }:$rt, (immZExt6:{}):$shamt))
DSLLV: 	(set GPR64Opnd:{ *:[i64] }:$rd, (shl:{} GPR64Opnd:{ *:[i64] }:$rt, GPR32Opnd:{ *:[i32] }:$rs))
DSRA: 	(set GPR64Opnd:{ *:[i64] }:$rd, (sra:{} GPR64Opnd:{ *:[i64] }:$rt, (immZExt6:{}):$shamt))
DSRAV: 	(set GPR64Opnd:{ *:[i64] }:$rd, (sra:{} GPR64Opnd:{ *:[i64] }:$rt, GPR32Opnd:{ *:[i32] }:$rs))
DSRL: 	(set GPR64Opnd:{ *:[i64] }:$rd, (srl:{} GPR64Opnd:{ *:[i64] }:$rt, (immZExt6:{}):$shamt))
DSRLV: 	(set GPR64Opnd:{ *:[i64] }:$rd, (srl:{} GPR64Opnd:{ *:[i64] }:$rt, GPR32Opnd:{ *:[i32] }:$rs))
DSUBu: 	(set GPR64Opnd:{ *:[i64] }:$rd, (sub:{} GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt))
ERet: 	(MipsERet)
EXT: 	(set GPR32Opnd:{ *:[i32] }:$rt, (MipsExt:{} GPR32Opnd:{ *:[i32] }:$rs, (immZExt5:{}):$pos, (immZExt5Plus1:{}):$size))
EXT_MM: 	(set GPR32Opnd:{ *:[i32] }:$rt, (MipsExt:{} GPR32Opnd:{ *:[i32] }:$rs, (immZExt5:{}):$pos, (immZExt5Plus1:{}):$size))
EXT_MMR6: 	(set GPR32Opnd:{ *:[i32] }:$rt, (MipsExt:{} GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }):$pos, (imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }):$size))
ExtractElementF64: 	(set GPR32Opnd:{ *:[i32] }:$dst, (MipsExtractElementF64:{} AFGR64Opnd:{ *:[f64] }:$src, (imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }):$n))
ExtractElementF64_64: 	(set GPR32Opnd:{ *:[i32] }:$dst, (MipsExtractElementF64:{} FGR64Opnd:{ *:[f64] }:$src, (imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }):$n))
FABS_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (fabs:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws))
FABS_D32: 	(set AFGR64Opnd:{ *:[f64] }:$fd, (fabs:{} AFGR64Opnd:{ *:[f64] }:$fs))
FABS_D32_MM: 	(set AFGR64Opnd:{ *:[f64] }:$fd, (fabs:{} AFGR64Opnd:{ *:[f64] }:$fs))
FABS_D64: 	(set FGR64Opnd:{ *:[f64] }:$fd, (fabs:{} FGR64Opnd:{ *:[f64] }:$fs))
FABS_D64_MM: 	(set FGR64Opnd:{ *:[f64] }:$fd, (fabs:{} FGR64Opnd:{ *:[f64] }:$fs))
FABS_S: 	(set FGR32Opnd:{ *:[f32] }:$fd, (fabs:{} FGR32Opnd:{ *:[f32] }:$fs))
FABS_S_MM: 	(set FGR32Opnd:{ *:[f32] }:$fd, (fabs:{} FGR32Opnd:{ *:[f32] }:$fs))
FABS_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (fabs:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws))
FADD_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (fadd:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FADD_D32: 	(set AFGR64Opnd:{ *:[f64] }:$fd, (fadd:{} AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft))
FADD_D32_MM: 	(set AFGR64Opnd:{ *:[f64] }:$fd, (fadd:{} AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft))
FADD_D64: 	(set FGR64Opnd:{ *:[f64] }:$fd, (fadd:{} FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft))
FADD_D64_MM: 	(set FGR64Opnd:{ *:[f64] }:$fd, (fadd:{} FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft))
FADD_S: 	(set FGR32Opnd:{ *:[f32] }:$fd, (fadd:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft))
FADD_S_MM: 	(set FGR32Opnd:{ *:[f32] }:$fd, (fadd:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft))
FADD_S_MMR6: 	(set FGR32Opnd:{ *:[f32] }:$fd, (fadd:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft))
FADD_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (fadd:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FCAF_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4286:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FCAF_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4287:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FCEQ_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vfsetoeq_v2f64:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FCEQ_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vfsetoeq_v4f32:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FCLASS_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4290:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws))
FCLASS_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4291:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws))
FCLE_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vfsetole_v2f64:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FCLE_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vfsetole_v4f32:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FCLT_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vfsetolt_v2f64:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FCLT_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vfsetolt_v4f32:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FCMP_D32: 	(MipsFPCmp AFGR64:{ *:[f64] }:$fs, AFGR64:{ *:[f64] }:$ft, (imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }):$cond)
FCMP_D32_MM: 	(MipsFPCmp AFGR64:{ *:[f64] }:$fs, AFGR64:{ *:[f64] }:$ft, (imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }):$cond)
FCMP_D64: 	(MipsFPCmp FGR64:{ *:[f64] }:$fs, FGR64:{ *:[f64] }:$ft, (imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }):$cond)
FCMP_S32: 	(MipsFPCmp FGR32:{ *:[f32] }:$fs, FGR32:{ *:[f32] }:$ft, (imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }):$cond)
FCMP_S32_MM: 	(MipsFPCmp FGR32:{ *:[f32] }:$fs, FGR32:{ *:[f32] }:$ft, (imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }):$cond)
FCNE_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vfsetone_v2f64:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FCNE_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vfsetone_v4f32:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FCOR_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vfsetord_v2f64:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FCOR_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vfsetord_v4f32:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FCUEQ_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vfsetueq_v2f64:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FCUEQ_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vfsetueq_v4f32:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FCULE_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vfsetule_v2f64:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FCULE_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vfsetule_v4f32:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FCULT_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vfsetult_v2f64:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FCULT_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vfsetult_v4f32:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FCUNE_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vfsetune_v2f64:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FCUNE_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vfsetune_v4f32:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FCUN_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vfsetun_v2f64:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FCUN_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vfsetun_v4f32:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FDIV_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (fdiv:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FDIV_D32: 	(set AFGR64Opnd:{ *:[f64] }:$fd, (fdiv:{} AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft))
FDIV_D32_MM: 	(set AFGR64Opnd:{ *:[f64] }:$fd, (fdiv:{} AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft))
FDIV_D64: 	(set FGR64Opnd:{ *:[f64] }:$fd, (fdiv:{} FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft))
FDIV_D64_MM: 	(set FGR64Opnd:{ *:[f64] }:$fd, (fdiv:{} FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft))
FDIV_S: 	(set FGR32Opnd:{ *:[f32] }:$fd, (fdiv:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft))
FDIV_S_MM: 	(set FGR32Opnd:{ *:[f32] }:$fd, (fdiv:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft))
FDIV_S_MMR6: 	(set FGR32Opnd:{ *:[f32] }:$fd, (fdiv:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft))
FDIV_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (fdiv:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FEXDO_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4312:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FEXDO_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4313:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FEXP2_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (mul_fexp2:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FEXP2_D_1_PSEUDO: 	(set MSA128D:{ *:[v2i64 v2f64] }:$wd, (fexp2:{} MSA128D:{ *:[v2i64 v2f64] }:$ws))
FEXP2_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (mul_fexp2:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FEXP2_W_1_PSEUDO: 	(set MSA128W:{ *:[v4i32 v4f32] }:$wd, (fexp2:{} MSA128W:{ *:[v4i32 v4f32] }:$ws))
FEXUPL_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4316:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws))
FEXUPL_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4317:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws))
FEXUPR_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4318:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws))
FEXUPR_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4319:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws))
FFINT_S_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (sint_to_fp:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws))
FFINT_S_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (sint_to_fp:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws))
FFINT_U_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (uint_to_fp:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws))
FFINT_U_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (uint_to_fp:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws))
FFQL_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4324:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws))
FFQL_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4325:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws))
FFQR_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4326:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws))
FFQR_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4327:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws))
FILL_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (vsplati8:{ *:[v16i8] } GPR32Opnd:{ *:[i32] }:$rs))
FILL_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vsplati64:{ *:[v2i64] } GPR64Opnd:{ *:[i64] }:$rs))
FILL_FD_PSEUDO: 	(set MSA128D:{ *:[v2i64 v2f64] }:$wd, (vsplatf64:{} FGR64:{ *:[f64] }:$fs))
FILL_FW_PSEUDO: 	(set MSA128W:{ *:[v4i32 v4f32] }:$wd, (vsplatf32:{} FGR32:{ *:[f32] }:$fs))
FILL_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (vsplati16:{ *:[v8i16] } GPR32Opnd:{ *:[i32] }:$rs))
FILL_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vsplati32:{ *:[v4i32] } GPR32Opnd:{ *:[i32] }:$rs))
FLOG2_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (flog2:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws))
FLOG2_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (flog2:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws))
FMADD_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (fma:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd_in, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FMADD_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (fma:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd_in, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FMAX_A_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4336:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FMAX_A_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4337:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FMAX_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4338:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FMAX_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4339:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FMIN_A_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4340:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FMIN_A_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4341:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FMIN_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4342:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FMIN_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4343:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FMSUB_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (MipsFMS:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd_in, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FMSUB_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (MipsFMS:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd_in, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FMUL_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (fmul:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FMUL_D32: 	(set AFGR64Opnd:{ *:[f64] }:$fd, (fmul:{} AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft))
FMUL_D32_MM: 	(set AFGR64Opnd:{ *:[f64] }:$fd, (fmul:{} AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft))
FMUL_D64: 	(set FGR64Opnd:{ *:[f64] }:$fd, (fmul:{} FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft))
FMUL_D64_MM: 	(set FGR64Opnd:{ *:[f64] }:$fd, (fmul:{} FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft))
FMUL_S: 	(set FGR32Opnd:{ *:[f32] }:$fd, (fmul:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft))
FMUL_S_MM: 	(set FGR32Opnd:{ *:[f32] }:$fd, (fmul:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft))
FMUL_S_MMR6: 	(set FGR32Opnd:{ *:[f32] }:$fd, (fmul:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft))
FMUL_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (fmul:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FNEG_D32: 	(set AFGR64Opnd:{ *:[f64] }:$fd, (fneg:{} AFGR64Opnd:{ *:[f64] }:$fs))
FNEG_D32_MM: 	(set AFGR64Opnd:{ *:[f64] }:$fd, (fneg:{} AFGR64Opnd:{ *:[f64] }:$fs))
FNEG_D64: 	(set FGR64Opnd:{ *:[f64] }:$fd, (fneg:{} FGR64Opnd:{ *:[f64] }:$fs))
FNEG_D64_MM: 	(set FGR64Opnd:{ *:[f64] }:$fd, (fneg:{} FGR64Opnd:{ *:[f64] }:$fs))
FNEG_S: 	(set FGR32Opnd:{ *:[f32] }:$fd, (fneg:{} FGR32Opnd:{ *:[f32] }:$fs))
FNEG_S_MM: 	(set FGR32Opnd:{ *:[f32] }:$fd, (fneg:{} FGR32Opnd:{ *:[f32] }:$fs))
FNEG_S_MMR6: 	(set FGR32Opnd:{ *:[f32] }:$ft, (fneg:{} FGR32Opnd:{ *:[f32] }:$fs))
FRCP_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4348:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws))
FRCP_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4349:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws))
FRINT_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (frint:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws))
FRINT_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (frint:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws))
FRSQRT_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4352:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws))
FRSQRT_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4353:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws))
FSAF_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4354:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FSAF_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4355:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FSEQ_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4356:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FSEQ_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4357:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FSLE_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4358:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FSLE_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4359:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FSLT_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4360:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FSLT_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4361:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FSNE_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4362:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FSNE_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4363:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FSOR_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4364:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FSOR_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4365:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FSQRT_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (fsqrt:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws))
FSQRT_D32: 	(set AFGR64Opnd:{ *:[f64] }:$fd, (fsqrt:{} AFGR64Opnd:{ *:[f64] }:$fs))
FSQRT_D32_MM: 	(set AFGR64Opnd:{ *:[f64] }:$fd, (fsqrt:{} AFGR64Opnd:{ *:[f64] }:$fs))
FSQRT_D64: 	(set FGR64Opnd:{ *:[f64] }:$fd, (fsqrt:{} FGR64Opnd:{ *:[f64] }:$fs))
FSQRT_D64_MM: 	(set FGR64Opnd:{ *:[f64] }:$fd, (fsqrt:{} FGR64Opnd:{ *:[f64] }:$fs))
FSQRT_S: 	(set FGR32Opnd:{ *:[f32] }:$fd, (fsqrt:{} FGR32Opnd:{ *:[f32] }:$fs))
FSQRT_S_MM: 	(set FGR32Opnd:{ *:[f32] }:$fd, (fsqrt:{} FGR32Opnd:{ *:[f32] }:$fs))
FSQRT_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (fsqrt:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws))
FSUB_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (fsub:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FSUB_D32: 	(set AFGR64Opnd:{ *:[f64] }:$fd, (fsub:{} AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft))
FSUB_D32_MM: 	(set AFGR64Opnd:{ *:[f64] }:$fd, (fsub:{} AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft))
FSUB_D64: 	(set FGR64Opnd:{ *:[f64] }:$fd, (fsub:{} FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft))
FSUB_D64_MM: 	(set FGR64Opnd:{ *:[f64] }:$fd, (fsub:{} FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft))
FSUB_S: 	(set FGR32Opnd:{ *:[f32] }:$fd, (fsub:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft))
FSUB_S_MM: 	(set FGR32Opnd:{ *:[f32] }:$fd, (fsub:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft))
FSUB_S_MMR6: 	(set FGR32Opnd:{ *:[f32] }:$fd, (fsub:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft))
FSUB_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (fsub:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FSUEQ_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4370:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FSUEQ_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4371:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FSULE_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4372:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FSULE_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4373:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FSULT_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4374:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FSULT_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4375:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FSUNE_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4378:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FSUNE_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4379:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FSUN_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4376:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FSUN_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4377:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FTINT_S_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4380:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws))
FTINT_S_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4381:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws))
FTINT_U_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4382:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws))
FTINT_U_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4383:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws))
FTQ_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4384:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
FTQ_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4385:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
FTRUNC_S_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (fp_to_sint:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws))
FTRUNC_S_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (fp_to_sint:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws))
FTRUNC_U_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (fp_to_uint:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws))
FTRUNC_U_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (fp_to_uint:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws))
HADD_S_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4390:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
HADD_S_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4391:{}, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
HADD_S_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4392:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
HADD_U_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4393:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
HADD_U_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4394:{}, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
HADD_U_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4395:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
HSUB_S_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4396:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
HSUB_S_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4397:{}, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
HSUB_S_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4398:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
HSUB_U_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4399:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
HSUB_U_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4400:{}, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
HSUB_U_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4401:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
ILVEV_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (MipsILVEV:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
ILVEV_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (MipsILVEV:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
ILVEV_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (MipsILVEV:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
ILVEV_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (MipsILVEV:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
ILVL_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (MipsILVL:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
ILVL_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (MipsILVL:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
ILVL_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (MipsILVL:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
ILVL_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (MipsILVL:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
ILVOD_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (MipsILVOD:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
ILVOD_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (MipsILVOD:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
ILVOD_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (MipsILVOD:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
ILVOD_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (MipsILVOD:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
ILVR_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (MipsILVR:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
ILVR_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (MipsILVR:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
ILVR_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (MipsILVR:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
ILVR_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (MipsILVR:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
INSERT_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (vinsert_v16i8:{} MSA128BOpnd:{ *:[v16i8] }:$wd_in, GPR32Opnd:{ *:[i32] }:$rs, (immZExt4Ptr:{}):$n))
INSERT_B_VIDX64_PSEUDO: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (vector_insert:{} MSA128BOpnd:{ *:[v16i8] }:$wd_in, GPR32Opnd:{ *:[i32] }:$fs, GPR64Opnd:{ *:[i64] }:$n))
INSERT_B_VIDX_PSEUDO: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (vector_insert:{} MSA128BOpnd:{ *:[v16i8] }:$wd_in, GPR32Opnd:{ *:[i32] }:$fs, GPR32Opnd:{ *:[i32] }:$n))
INSERT_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vinsert_v2i64:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd_in, GPR64Opnd:{ *:[i64] }:$rs, (immZExt1Ptr:{}):$n))
INSERT_D_VIDX64_PSEUDO: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vector_insert:{} MSA128DOpnd:{ *:[v2i64] }:$wd_in, GPR64Opnd:{ *:[i64] }:$fs, GPR64Opnd:{ *:[i64] }:$n))
INSERT_D_VIDX_PSEUDO: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vector_insert:{} MSA128DOpnd:{ *:[v2i64] }:$wd_in, GPR64Opnd:{ *:[i64] }:$fs, GPR32Opnd:{ *:[i32] }:$n))
INSERT_FD_PSEUDO: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vector_insert:{} MSA128DOpnd:{ *:[v2f64] }:$wd_in, FGR64Opnd:{ *:[f64] }:$fs, (immZExt1Ptr:{}):$n))
INSERT_FD_VIDX64_PSEUDO: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vector_insert:{} MSA128DOpnd:{ *:[v2f64] }:$wd_in, FGR64Opnd:{ *:[f64] }:$fs, GPR64Opnd:{ *:[i64] }:$n))
INSERT_FD_VIDX_PSEUDO: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vector_insert:{} MSA128DOpnd:{ *:[v2f64] }:$wd_in, FGR64Opnd:{ *:[f64] }:$fs, GPR32Opnd:{ *:[i32] }:$n))
INSERT_FW_PSEUDO: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vector_insert:{} MSA128WOpnd:{ *:[v4f32] }:$wd_in, FGR32Opnd:{ *:[f32] }:$fs, (immZExt2Ptr:{}):$n))
INSERT_FW_VIDX64_PSEUDO: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vector_insert:{} MSA128WOpnd:{ *:[v4f32] }:$wd_in, FGR32Opnd:{ *:[f32] }:$fs, GPR64Opnd:{ *:[i64] }:$n))
INSERT_FW_VIDX_PSEUDO: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vector_insert:{} MSA128WOpnd:{ *:[v4f32] }:$wd_in, FGR32Opnd:{ *:[f32] }:$fs, GPR32Opnd:{ *:[i32] }:$n))
INSERT_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (vinsert_v8i16:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd_in, GPR32Opnd:{ *:[i32] }:$rs, (immZExt3Ptr:{}):$n))
INSERT_H_VIDX64_PSEUDO: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (vector_insert:{} MSA128HOpnd:{ *:[v8i16] }:$wd_in, GPR32Opnd:{ *:[i32] }:$fs, GPR64Opnd:{ *:[i64] }:$n))
INSERT_H_VIDX_PSEUDO: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (vector_insert:{} MSA128HOpnd:{ *:[v8i16] }:$wd_in, GPR32Opnd:{ *:[i32] }:$fs, GPR32Opnd:{ *:[i32] }:$n))
INSERT_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vinsert_v4i32:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd_in, GPR32Opnd:{ *:[i32] }:$rs, (immZExt2Ptr:{}):$n))
INSERT_W_VIDX64_PSEUDO: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vector_insert:{} MSA128WOpnd:{ *:[v4i32] }:$wd_in, GPR32Opnd:{ *:[i32] }:$fs, GPR64Opnd:{ *:[i64] }:$n))
INSERT_W_VIDX_PSEUDO: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vector_insert:{} MSA128WOpnd:{ *:[v4i32] }:$wd_in, GPR32Opnd:{ *:[i32] }:$fs, GPR32Opnd:{ *:[i32] }:$n))
INSV: 	(set GPR32Opnd:{ *:[i32] }:$rt, (intrinsic_w_chain:{} 4422:{}, GPR32Opnd:{ *:[i32] }:$src, GPR32Opnd:{ *:[i32] }:$rs))
INSVE_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (insve_v16i8:{} MSA128BOpnd:{ *:[v16i8] }:$wd_in, (timmZExt4:{}):$n, MSA128BOpnd:{ *:[v16i8] }:$ws, (immz:{}):$n2))
INSVE_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (insve_v2i64:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd_in, (timmZExt1:{}):$n, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, (immz:{}):$n2))
INSVE_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (insve_v8i16:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd_in, (timmZExt3:{}):$n, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, (immz:{}):$n2))
INSVE_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (insve_v4i32:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd_in, (timmZExt2:{}):$n, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, (immz:{}):$n2))
INSV_MM: 	(set GPR32Opnd:{ *:[i32] }:$rt, (intrinsic_w_chain:{} 4422:{}, GPR32Opnd:{ *:[i32] }:$src, GPR32Opnd:{ *:[i32] }:$rs))
INS_MMR6: 	(set GPR32Opnd:{ *:[i32] }:$rt, (MipsIns:{} GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }):$pos, (imm:{ *:[i32 i64 v4i8 v16i8 v2i16 v8i16 v4i32 v2i64] }):$size, GPR32Opnd:{ *:[i32] }:$src))
J: 	(br (bb:{ *:[Other] }):$target)
JAL: 	(MipsJmpLink (tglobaladdr:{ *:[iPTR] }):$target)
JALR16_MM: 	(MipsJmpLink GPR32Opnd:{ *:[i32] }:$rs)
JALR64Pseudo: 	(MipsJmpLink GPR64Opnd:{ *:[i64] }:$rs)
JALRC16_MMR6: 	(MipsJmpLink GPR32Opnd:{ *:[i32] }:$rs)
JALRHB64Pseudo: 	(MipsJmpLink GPR64Opnd:{ *:[i64] }:$rs)
JALRHBPseudo: 	(MipsJmpLink GPR32Opnd:{ *:[i32] }:$rs)
JALRPseudo: 	(MipsJmpLink GPR32Opnd:{ *:[i32] }:$rs)
JALX: 	(MipsJmpLink (tglobaladdr:{ *:[iPTR] }):$target)
JALX_MM: 	(MipsJmpLink (tglobaladdr:{ *:[iPTR] }):$target)
JAL_MM: 	(MipsJmpLink (tglobaladdr:{ *:[iPTR] }):$target)
J_MM: 	(br (bb:{ *:[Other] }):$target)
JumpLinkReg16: 	(MipsJmpLink CPU16Regs:{ *:[i32] }:$rs)
LB: 	(set GPR32Opnd:{ *:[i32] }:$rt, (sextloadi8:{} addr:{ *:[iPTR] }:$addr))
LB64: 	(set GPR64Opnd:{ *:[i64] }:$rt, (sextloadi8:{} addr:{ *:[iPTR] }:$addr))
LBUX: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4427:{}, iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index))
LBUX_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4427:{}, iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index))
LB_MM: 	(set GPR32Opnd:{ *:[i32] }:$rt, (sextloadi8:{} addr:{ *:[iPTR] }:$addr))
LBu: 	(set GPR32Opnd:{ *:[i32] }:$rt, (zextloadi8:{} addrDefault:{ *:[iPTR] }:$addr))
LBu64: 	(set GPR64Opnd:{ *:[i64] }:$rt, (zextloadi8:{} addr:{ *:[iPTR] }:$addr))
LBu_MM: 	(set GPR32Opnd:{ *:[i32] }:$rt, (zextloadi8:{} addr:{ *:[iPTR] }:$addr))
LD: 	(set GPR64Opnd:{ *:[i64] }:$rt, (load:{} addr:{ *:[iPTR] }:$addr))
LDC1: 	(set AFGR64Opnd:{ *:[f64] }:$rt, (load:{} addrDefault:{ *:[iPTR] }:$addr))
LDC164: 	(set FGR64Opnd:{ *:[f64] }:$rt, (load:{} addrDefault:{ *:[iPTR] }:$addr))
LDC1_D64_MMR6: 	(set FGR64Opnd:{ *:[f64] }:$ft, (load:{} addrimm16:{ *:[iPTR] }:$addr))
LDC1_MM: 	(set AFGR64Opnd:{ *:[f64] }:$rt, (load:{} addrDefault:{ *:[iPTR] }:$addr))
LDC2: 	(set COP2Opnd:{ *:[i32] }:$rt, (load:{} addrDefault:{ *:[iPTR] }:$addr))
LDC2_MMR6: 	(set COP2Opnd:{ *:[i32] }:$rt, (load:{} addrimm11:{ *:[iPTR] }:$addr))
LDC3: 	(set COP3Opnd:{ *:[i32] }:$rt, (load:{} addrDefault:{ *:[iPTR] }:$addr))
LDL: 	(set GPR64Opnd:{ *:[i64] }:$rt, (MipsLDL:{} addr:{ *:[iPTR] }:$addr, GPR64Opnd:{ *:[i64] }:$src))
LDR: 	(set GPR64Opnd:{ *:[i64] }:$rt, (MipsLDR:{} addr:{ *:[iPTR] }:$addr, GPR64Opnd:{ *:[i64] }:$src))
LDR_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$dst, (intrinsic_w_chain:{} 4436:{}, iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$imm))
LDR_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$dst, (intrinsic_w_chain:{} 4437:{}, iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$imm))
LDXC1: 	(set AFGR64Opnd:{ *:[f64] }:$fd, (load:{} (add:{} iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index)))
LDXC164: 	(set FGR64Opnd:{ *:[f64] }:$fd, (load:{} (add:{} iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index)))
LD_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (load:{ *:[v16i8] } addrimm10:{ *:[iPTR] }:$addr))
LD_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (load:{ *:[v2i64] } addrimm10lsl3:{ *:[iPTR] }:$addr))
LD_F16: 	(set MSA128F16:{ *:[f16] }:$ws, (load:{ *:[f16] } addrimm10:{ *:[iPTR] }:$addr))
LD_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (load:{ *:[v8i16] } addrimm10lsl1:{ *:[iPTR] }:$addr))
LD_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (load:{ *:[v4i32] } addrimm10lsl2:{ *:[iPTR] }:$addr))
LEA_ADDiu: 	(set GPR32Opnd:{ *:[i32] }:$rt, addr:{ *:[iPTR] }:$addr)
LEA_ADDiu64: 	(set GPR64Opnd:{ *:[i64] }:$rt, addr:{ *:[iPTR] }:$addr)
LEA_ADDiu_MM: 	(set GPR32Opnd:{ *:[i32] }:$rt, addr:{ *:[iPTR] }:$addr)
LH: 	(set GPR32Opnd:{ *:[i32] }:$rt, (sextloadi16:{} addrDefault:{ *:[iPTR] }:$addr))
LH64: 	(set GPR64Opnd:{ *:[i64] }:$rt, (sextloadi16:{} addr:{ *:[iPTR] }:$addr))
LHX: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4438:{}, iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index))
LHX_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4438:{}, iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index))
LH_MM: 	(set GPR32Opnd:{ *:[i32] }:$rt, (sextloadi16:{} addrDefault:{ *:[iPTR] }:$addr))
LHu: 	(set GPR32Opnd:{ *:[i32] }:$rt, (zextloadi16:{} addr:{ *:[iPTR] }:$addr))
LHu64: 	(set GPR64Opnd:{ *:[i64] }:$rt, (zextloadi16:{} addr:{ *:[iPTR] }:$addr))
LHu_MM: 	(set GPR32Opnd:{ *:[i32] }:$rt, (zextloadi16:{} addr:{ *:[iPTR] }:$addr))
LSA: 	(set GPR32Opnd:{ *:[i32] }:$rd, (add:{} GPR32Opnd:{ *:[i32] }:$rt, (shl:{} GPR32Opnd:{ *:[i32] }:$rs, (immZExt2Lsa:{}):$sa)))
LW: 	(set GPR32Opnd:{ *:[i32] }:$rt, (load:{} addrDefault:{ *:[iPTR] }:$addr))
LW64: 	(set GPR64Opnd:{ *:[i64] }:$rt, (sextloadi32:{} addr:{ *:[iPTR] }:$addr))
LWC1: 	(set FGR32Opnd:{ *:[f32] }:$rt, (load:{} addrDefault:{ *:[iPTR] }:$addr))
LWC1_MM: 	(set FGR32Opnd:{ *:[f32] }:$rt, (load:{} addrDefault:{ *:[iPTR] }:$addr))
LWC2: 	(set COP2Opnd:{ *:[i32] }:$rt, (load:{} addrDefault:{ *:[iPTR] }:$addr))
LWC2_MMR6: 	(set COP2Opnd:{ *:[i32] }:$rt, (load:{} addrimm11:{ *:[iPTR] }:$addr))
LWC3: 	(set COP3Opnd:{ *:[i32] }:$rt, (load:{} addrDefault:{ *:[iPTR] }:$addr))
LWL: 	(set GPR32Opnd:{ *:[i32] }:$rt, (MipsLWL:{} addr:{ *:[iPTR] }:$addr, GPR32Opnd:{ *:[i32] }:$src))
LWL64: 	(set GPR64Opnd:{ *:[i64] }:$rt, (MipsLWL:{} addr:{ *:[iPTR] }:$addr, GPR64Opnd:{ *:[i64] }:$src))
LWLE_MM: 	(set GPR32Opnd:{ *:[i32] }:$rt, (MipsLWL:{} addrimm12:{ *:[iPTR] }:$addr, GPR32Opnd:{ *:[i32] }:$src))
LWL_MM: 	(set GPR32Opnd:{ *:[i32] }:$rt, (MipsLWL:{} addrimm12:{ *:[iPTR] }:$addr, GPR32Opnd:{ *:[i32] }:$src))
LWR: 	(set GPR32Opnd:{ *:[i32] }:$rt, (MipsLWR:{} addr:{ *:[iPTR] }:$addr, GPR32Opnd:{ *:[i32] }:$src))
LWR64: 	(set GPR64Opnd:{ *:[i64] }:$rt, (MipsLWR:{} addr:{ *:[iPTR] }:$addr, GPR64Opnd:{ *:[i64] }:$src))
LWRE_MM: 	(set GPR32Opnd:{ *:[i32] }:$rt, (MipsLWR:{} addrimm12:{ *:[iPTR] }:$addr, GPR32Opnd:{ *:[i32] }:$src))
LWR_MM: 	(set GPR32Opnd:{ *:[i32] }:$rt, (MipsLWR:{} addrimm12:{ *:[iPTR] }:$addr, GPR32Opnd:{ *:[i32] }:$src))
LWU_MM: 	(set GPR32Opnd:{ *:[i32] }:$rt, (zextloadi32:{} addrimm12:{ *:[iPTR] }:$addr))
LWX: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4440:{}, iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index))
LWXC1: 	(set FGR32Opnd:{ *:[f32] }:$fd, (load:{} (add:{} iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index)))
LWXC1_MM: 	(set FGR32Opnd:{ *:[f32] }:$fd, (load:{} (add:{} iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index)))
LWX_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4440:{}, iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index))
LW_MMR6: 	(set GPR32Opnd:{ *:[i32] }:$rt, (load:{} addrDefault:{ *:[iPTR] }:$addr))
LWu: 	(set GPR64Opnd:{ *:[i64] }:$rt, (zextloadi32:{} addr:{ *:[iPTR] }:$addr))
MADDR_Q_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4444:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd_in, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
MADDR_Q_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4445:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd_in, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
MADDU_DSP: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsMAddu:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
MADDU_DSP_MM: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsMAddu:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
MADDV_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (muladd:{} MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
MADDV_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (muladd:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd_in, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
MADDV_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (muladd:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd_in, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
MADDV_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (muladd:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd_in, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
MADD_D32: 	(set AFGR64Opnd:{ *:[f64] }:$fd, (fadd:{} (fmul:{} AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft), AFGR64Opnd:{ *:[f64] }:$fr))
MADD_D64: 	(set FGR64Opnd:{ *:[f64] }:$fd, (fadd:{} (fmul:{} FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft), FGR64Opnd:{ *:[f64] }:$fr))
MADD_DSP: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsMAdd:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
MADD_DSP_MM: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsMAdd:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
MADD_Q_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4442:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd_in, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
MADD_Q_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4443:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd_in, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
MADD_S: 	(set FGR32Opnd:{ *:[f32] }:$fd, (fadd:{} (fmul:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft), FGR32Opnd:{ *:[f32] }:$fr))
MAQ_SA_W_PHL: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsMAQ_SA_W_PHL:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
MAQ_SA_W_PHL_MM: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsMAQ_SA_W_PHL:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
MAQ_SA_W_PHR: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsMAQ_SA_W_PHR:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
MAQ_SA_W_PHR_MM: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsMAQ_SA_W_PHR:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
MAQ_S_W_PHL: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsMAQ_S_W_PHL:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
MAQ_S_W_PHL_MM: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsMAQ_S_W_PHL:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
MAQ_S_W_PHR: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsMAQ_S_W_PHR:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
MAQ_S_W_PHR_MM: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsMAQ_S_W_PHR:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
MAXI_S_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (smax:{} MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_simm5:{ *:[v16i8] }:$imm))
MAXI_S_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (smax:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, vsplati64_simm5:{ *:[v2i64] }:$imm))
MAXI_S_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (smax:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, vsplati16_simm5:{ *:[v8i16] }:$imm))
MAXI_S_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (smax:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, vsplati32_simm5:{ *:[v4i32] }:$imm))
MAXI_U_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (umax:{} MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm5:{ *:[v16i8] }:$imm))
MAXI_U_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (umax:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, vsplati64_uimm5:{ *:[v2i64] }:$imm))
MAXI_U_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (umax:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, vsplati16_uimm5:{ *:[v8i16] }:$imm))
MAXI_U_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (umax:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$imm))
MAX_A_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (intrinsic_wo_chain:{} 4455:{}, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
MAX_A_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4456:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
MAX_A_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4457:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
MAX_A_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4458:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
MAX_S_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (smax:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
MAX_S_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (smax:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
MAX_S_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (smax:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
MAX_S_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (smax:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
MAX_U_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (umax:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
MAX_U_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (umax:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
MAX_U_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (umax:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
MAX_U_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (umax:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
MFC1: 	(set GPR32Opnd:{ *:[i32] }:$rt, (bitconvert:{} FGR32Opnd:{ *:[f32] }:$fs))
MFC1_MM: 	(set GPR32Opnd:{ *:[i32] }:$rt, (bitconvert:{} FGR32Opnd:{ *:[f32] }:$fs))
MFC1_MMR6: 	(set GPR32Opnd:{ *:[i32] }:$rt, (bitconvert:{} FGR32Opnd:{ *:[f32] }:$fs))
MFHI_DSP: 	(set GPR32Opnd:{ *:[i32] }:$rd, (MipsMFHI:{} ACC64DSPOpnd:{ *:[Untyped] }:$ac))
MFHI_DSP_MM: 	(set GPR32Opnd:{ *:[i32] }:$rs, (MipsMFHI:{} ACC64DSPOpnd:{ *:[Untyped] }:$ac))
MFLO_DSP: 	(set GPR32Opnd:{ *:[i32] }:$rd, (MipsMFLO:{} ACC64DSPOpnd:{ *:[Untyped] }:$ac))
MFLO_DSP_MM: 	(set GPR32Opnd:{ *:[i32] }:$rs, (MipsMFLO:{} ACC64DSPOpnd:{ *:[Untyped] }:$ac))
MINI_S_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (smin:{} MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_simm5:{ *:[v16i8] }:$imm))
MINI_S_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (smin:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, vsplati64_simm5:{ *:[v2i64] }:$imm))
MINI_S_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (smin:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, vsplati16_simm5:{ *:[v8i16] }:$imm))
MINI_S_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (smin:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, vsplati32_simm5:{ *:[v4i32] }:$imm))
MINI_U_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (umin:{} MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm5:{ *:[v16i8] }:$imm))
MINI_U_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (umin:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, vsplati64_uimm5:{ *:[v2i64] }:$imm))
MINI_U_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (umin:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, vsplati16_uimm5:{ *:[v8i16] }:$imm))
MINI_U_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (umin:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$imm))
MIN_A_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (intrinsic_wo_chain:{} 4475:{}, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
MIN_A_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4476:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
MIN_A_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4477:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
MIN_A_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4478:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
MIN_S_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (smin:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
MIN_S_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (smin:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
MIN_S_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (smin:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
MIN_S_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (smin:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
MIN_U_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (umin:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
MIN_U_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (umin:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
MIN_U_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (umin:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
MIN_U_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (umin:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
MIPSeh_return32: 	(MIPSehret GPR32:{ *:[i32] }:$spoff, GPR32:{ *:[i32] }:$dst)
MIPSeh_return64: 	(MIPSehret GPR64:{ *:[i64] }:$spoff, GPR64:{ *:[i64] }:$dst)
MOD: 	(set GPR32Opnd:{ *:[i32] }:$rd, (srem:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
MODSUB: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_wo_chain:{} 4503:{}, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
MODSUB_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_wo_chain:{} 4503:{}, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
MODU: 	(set GPR32Opnd:{ *:[i32] }:$rd, (urem:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
MODU_MMR6: 	(set GPR32Opnd:{ *:[i32] }:$rd, (urem:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
MOD_MMR6: 	(set GPR32Opnd:{ *:[i32] }:$rd, (srem:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
MOD_S_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (srem:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
MOD_S_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (srem:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
MOD_S_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (srem:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
MOD_S_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (srem:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
MOD_U_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (urem:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
MOD_U_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (urem:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
MOD_U_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (urem:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
MOD_U_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (urem:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
MOVF_D32: 	(set AFGR64Opnd:{ *:[f64] }:$fd, (MipsCMovFP_F:{} AFGR64Opnd:{ *:[f64] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, AFGR64Opnd:{ *:[f64] }:$F))
MOVF_D32_MM: 	(set AFGR64Opnd:{ *:[f64] }:$fd, (MipsCMovFP_F:{} AFGR64Opnd:{ *:[f64] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, AFGR64Opnd:{ *:[f64] }:$F))
MOVF_D64: 	(set FGR64Opnd:{ *:[f64] }:$fd, (MipsCMovFP_F:{} FGR64Opnd:{ *:[f64] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, FGR64Opnd:{ *:[f64] }:$F))
MOVF_I: 	(set GPR32Opnd:{ *:[i32] }:$rd, (MipsCMovFP_F:{} GPR32Opnd:{ *:[i32] }:$rs, FCCRegsOpnd:{ *:[i32] }:$fcc, GPR32Opnd:{ *:[i32] }:$F))
MOVF_I64: 	(set GPR64Opnd:{ *:[i64] }:$rd, (MipsCMovFP_F:{} GPR64Opnd:{ *:[i64] }:$rs, FCCRegsOpnd:{ *:[i32] }:$fcc, GPR64Opnd:{ *:[i64] }:$F))
MOVF_I_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (MipsCMovFP_F:{} GPR32Opnd:{ *:[i32] }:$rs, FCCRegsOpnd:{ *:[i32] }:$fcc, GPR32Opnd:{ *:[i32] }:$F))
MOVF_S: 	(set FGR32Opnd:{ *:[f32] }:$fd, (MipsCMovFP_F:{} FGR32Opnd:{ *:[f32] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, FGR32Opnd:{ *:[f32] }:$F))
MOVF_S_MM: 	(set FGR32Opnd:{ *:[f32] }:$fd, (MipsCMovFP_F:{} FGR32Opnd:{ *:[f32] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, FGR32Opnd:{ *:[f32] }:$F))
MOVT_D32: 	(set AFGR64Opnd:{ *:[f64] }:$fd, (MipsCMovFP_T:{} AFGR64Opnd:{ *:[f64] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, AFGR64Opnd:{ *:[f64] }:$F))
MOVT_D32_MM: 	(set AFGR64Opnd:{ *:[f64] }:$fd, (MipsCMovFP_T:{} AFGR64Opnd:{ *:[f64] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, AFGR64Opnd:{ *:[f64] }:$F))
MOVT_D64: 	(set FGR64Opnd:{ *:[f64] }:$fd, (MipsCMovFP_T:{} FGR64Opnd:{ *:[f64] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, FGR64Opnd:{ *:[f64] }:$F))
MOVT_I: 	(set GPR32Opnd:{ *:[i32] }:$rd, (MipsCMovFP_T:{} GPR32Opnd:{ *:[i32] }:$rs, FCCRegsOpnd:{ *:[i32] }:$fcc, GPR32Opnd:{ *:[i32] }:$F))
MOVT_I64: 	(set GPR64Opnd:{ *:[i64] }:$rd, (MipsCMovFP_T:{} GPR64Opnd:{ *:[i64] }:$rs, FCCRegsOpnd:{ *:[i32] }:$fcc, GPR64Opnd:{ *:[i64] }:$F))
MOVT_I_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (MipsCMovFP_T:{} GPR32Opnd:{ *:[i32] }:$rs, FCCRegsOpnd:{ *:[i32] }:$fcc, GPR32Opnd:{ *:[i32] }:$F))
MOVT_S: 	(set FGR32Opnd:{ *:[f32] }:$fd, (MipsCMovFP_T:{} FGR32Opnd:{ *:[f32] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, FGR32Opnd:{ *:[f32] }:$F))
MOVT_S_MM: 	(set FGR32Opnd:{ *:[f32] }:$fd, (MipsCMovFP_T:{} FGR32Opnd:{ *:[f32] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, FGR32Opnd:{ *:[f32] }:$F))
MSA_FP_EXTEND_D_PSEUDO: 	(set FGR64Opnd:{ *:[f64] }:$fd, (fpextend:{ *:[f64] } MSA128F16:{ *:[f16] }:$ws))
MSA_FP_EXTEND_W_PSEUDO: 	(set FGR32Opnd:{ *:[f32] }:$fd, (fpextend:{ *:[f32] } MSA128F16:{ *:[f16] }:$ws))
MSA_FP_ROUND_D_PSEUDO: 	(set MSA128F16:{ *:[f16] }:$wd, (fpround:{ *:[f16] } FGR64Opnd:{ *:[f64] }:$fs))
MSA_FP_ROUND_W_PSEUDO: 	(set MSA128F16:{ *:[f16] }:$wd, (fpround:{ *:[f16] } FGR32Opnd:{ *:[f32] }:$fs))
MSUBR_Q_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4508:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd_in, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
MSUBR_Q_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4509:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd_in, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
MSUBU_DSP: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsMSubu:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
MSUBU_DSP_MM: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsMSubu:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
MSUBV_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (mulsub:{} MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
MSUBV_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (mulsub:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd_in, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
MSUBV_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (mulsub:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd_in, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
MSUBV_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (mulsub:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd_in, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
MSUB_D32: 	(set AFGR64Opnd:{ *:[f64] }:$fd, (fsub:{} (fmul:{} AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft), AFGR64Opnd:{ *:[f64] }:$fr))
MSUB_D64: 	(set FGR64Opnd:{ *:[f64] }:$fd, (fsub:{} (fmul:{} FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft), FGR64Opnd:{ *:[f64] }:$fr))
MSUB_DSP: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsMSub:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
MSUB_DSP_MM: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsMSub:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
MSUB_Q_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4506:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd_in, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
MSUB_Q_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4507:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd_in, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
MSUB_S: 	(set FGR32Opnd:{ *:[f32] }:$fd, (fsub:{} (fmul:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft), FGR32Opnd:{ *:[f32] }:$fr))
MTC1: 	(set FGR32Opnd:{ *:[f32] }:$fs, (bitconvert:{} GPR32Opnd:{ *:[i32] }:$rt))
MTC1_MM: 	(set FGR32Opnd:{ *:[f32] }:$fs, (bitconvert:{} GPR32Opnd:{ *:[i32] }:$rt))
MTC1_MMR6: 	(set FGR32Opnd:{ *:[f32] }:$fs, (bitconvert:{} GPR32Opnd:{ *:[i32] }:$rt))
MTHLIP: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsMTHLIP:{} GPR32Opnd:{ *:[i32] }:$rs, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
MTHLIP_MM: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsMTHLIP:{} GPR32Opnd:{ *:[i32] }:$rs, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
MUH: 	(set GPR32Opnd:{ *:[i32] }:$rd, (mulhs:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
MUHU: 	(set GPR32Opnd:{ *:[i32] }:$rd, (mulhu:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
MUHU_MMR6: 	(set GPR32Opnd:{ *:[i32] }:$rd, (mulhu:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
MUH_MMR6: 	(set GPR32Opnd:{ *:[i32] }:$rd, (mulhs:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
MUL: 	(set GPR32Opnd:{ *:[i32] }:$rd, (mul:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
MULEQ_S_W_PHL: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4520:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
MULEQ_S_W_PHL_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4520:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
MULEQ_S_W_PHR: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4521:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
MULEQ_S_W_PHR_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4521:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
MULEU_S_PH_QBL: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4522:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
MULEU_S_PH_QBL_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4522:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
MULEU_S_PH_QBR: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4523:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
MULEU_S_PH_QBR_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4523:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
MULQ_RS_PH: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4524:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
MULQ_RS_PH_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4524:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
MULQ_RS_W: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4525:{}, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
MULQ_RS_W_MMR2: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4525:{}, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
MULQ_S_PH: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4526:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
MULQ_S_PH_MMR2: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4526:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
MULQ_S_W: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4527:{}, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
MULQ_S_W_MMR2: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4527:{}, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
MULR_Q_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4528:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
MULR_Q_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4529:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
MULSAQ_S_W_PH: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsMULSAQ_S_W_PH:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
MULSAQ_S_W_PH_MM: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsMULSAQ_S_W_PH:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
MULSA_W_PH: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsMULSA_W_PH:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
MULSA_W_PH_MMR2: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsMULSA_W_PH:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
MULTU_DSP: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsMultu:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
MULTU_DSP_MM: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsMultu:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
MULT_DSP: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsMult:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
MULT_DSP_MM: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsMult:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
MULV_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (mul:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
MULV_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (mul:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
MULV_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (mul:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
MULV_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (mul:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
MUL_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (mul:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
MUL_MMR6: 	(set GPR32Opnd:{ *:[i32] }:$rd, (mul:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
MUL_Q_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4517:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
MUL_Q_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4518:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
MUL_R6: 	(set GPR32Opnd:{ *:[i32] }:$rd, (mul:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
MUL_S_PH: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4519:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
MUL_S_PH_MMR2: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4519:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
NLOC_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (intrinsic_wo_chain:{} 4538:{}, MSA128BOpnd:{ *:[v16i8] }:$ws))
NLOC_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4539:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws))
NLOC_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4540:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws))
NLOC_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4541:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws))
NLZC_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (ctlz:{} MSA128BOpnd:{ *:[v16i8] }:$ws))
NLZC_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (ctlz:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws))
NLZC_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (ctlz:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws))
NLZC_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (ctlz:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws))
NMADD_D32: 	(set AFGR64Opnd:{ *:[f64] }:$fd, (fsub:{} (fpimm0:{}), (fadd:{} (fmul:{} AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft), AFGR64Opnd:{ *:[f64] }:$fr)))
NMADD_D64: 	(set FGR64Opnd:{ *:[f64] }:$fd, (fsub:{} (fpimm0:{}), (fadd:{} (fmul:{} FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft), FGR64Opnd:{ *:[f64] }:$fr)))
NMADD_S: 	(set FGR32Opnd:{ *:[f32] }:$fd, (fsub:{} (fpimm0:{}), (fadd:{} (fmul:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft), FGR32Opnd:{ *:[f32] }:$fr)))
NMSUB_D32: 	(set AFGR64Opnd:{ *:[f64] }:$fd, (fsub:{} (fpimm0:{}), (fsub:{} (fmul:{} AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft), AFGR64Opnd:{ *:[f64] }:$fr)))
NMSUB_D64: 	(set FGR64Opnd:{ *:[f64] }:$fd, (fsub:{} (fpimm0:{}), (fsub:{} (fmul:{} FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft), FGR64Opnd:{ *:[f64] }:$fr)))
NMSUB_S: 	(set FGR32Opnd:{ *:[f32] }:$fd, (fsub:{} (fpimm0:{}), (fsub:{} (fmul:{} FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft), FGR32Opnd:{ *:[f32] }:$fr)))
NOR: 	(set GPR32Opnd:{ *:[i32] }:$rd, (not:{} (or:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)))
NOR64: 	(set GPR64Opnd:{ *:[i64] }:$rd, (not:{} (or:{} GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)))
NORI_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (MipsVNOR:{} MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm8:{ *:[v16i8] }:$u8))
NOR_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (not:{} (or:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)))
NOR_MMR6: 	(set GPR32Opnd:{ *:[i32] }:$rd, (not:{} (or:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)))
NOR_V: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (MipsVNOR:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
NOR_V_D_PSEUDO: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (MipsVNOR:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
NOR_V_H_PSEUDO: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (MipsVNOR:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
NOR_V_W_PSEUDO: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (MipsVNOR:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
NOT16_MM: 	(set GPRMM16Opnd:{ *:[i32] }:$rt, (not:{} GPRMM16Opnd:{ *:[i32] }:$rs))
NOT16_MMR6: 	(set GPRMM16Opnd:{ *:[i32] }:$rt, (not:{} GPRMM16Opnd:{ *:[i32] }:$rs))
OR: 	(set GPR32Opnd:{ *:[i32] }:$rd, (or:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
OR16_MM: 	(set GPRMM16Opnd:{ *:[i32] }:$dst, (or:{} GPRMM16Opnd:{ *:[i32] }:$rs, GPRMM16Opnd:{ *:[i32] }:$rt))
OR64: 	(set GPR64Opnd:{ *:[i64] }:$rd, (or:{} GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt))
ORI_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (or:{} MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm8:{ *:[v16i8] }:$u8))
ORI_MMR6: 	(set GPR32Opnd:{ *:[i32] }:$rt, (or:{} GPR32Opnd:{ *:[i32] }:$rs, (immZExt16:{}):$imm16))
OR_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (or:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
OR_MMR6: 	(set GPR32Opnd:{ *:[i32] }:$rd, (or:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
OR_V: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (or:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
OR_V_D_PSEUDO: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (or:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
OR_V_H_PSEUDO: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (or:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
OR_V_W_PSEUDO: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (or:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
ORi: 	(set GPR32Opnd:{ *:[i32] }:$rt, (or:{} GPR32Opnd:{ *:[i32] }:$rs, (imm32ZExt16:{}):$imm16))
ORi64: 	(set GPR64Opnd:{ *:[i64] }:$rt, (or:{} GPR64Opnd:{ *:[i64] }:$rs, (immZExt16:{}):$imm16))
ORi_MM: 	(set GPR32Opnd:{ *:[i32] }:$rt, (or:{} GPR32Opnd:{ *:[i32] }:$rs, (immZExt16:{}):$imm16))
PACKRL_PH: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4550:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
PACKRL_PH_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4550:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
PCKEV_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (MipsPCKEV:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
PCKEV_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (MipsPCKEV:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
PCKEV_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (MipsPCKEV:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
PCKEV_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (MipsPCKEV:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
PCKOD_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (MipsPCKOD:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
PCKOD_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (MipsPCKOD:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
PCKOD_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (MipsPCKOD:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
PCKOD_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (MipsPCKOD:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
PCNT_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (ctpop:{} MSA128BOpnd:{ *:[v16i8] }:$ws))
PCNT_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (ctpop:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws))
PCNT_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (ctpop:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws))
PCNT_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (ctpop:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws))
PICK_PH: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4563:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
PICK_PH_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4563:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
PICK_QB: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4564:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
PICK_QB_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4564:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
POP: 	(set GPR32Opnd:{ *:[i32] }:$rd, (ctpop:{} GPR32Opnd:{ *:[i32] }:$rs))
PRECEQU_PH_QBL: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4567:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
PRECEQU_PH_QBLA: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4568:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
PRECEQU_PH_QBLA_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rt, (intrinsic_wo_chain:{} 4568:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs))
PRECEQU_PH_QBL_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rt, (intrinsic_wo_chain:{} 4567:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs))
PRECEQU_PH_QBR: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4569:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
PRECEQU_PH_QBRA: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4570:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
PRECEQU_PH_QBRA_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rt, (intrinsic_wo_chain:{} 4570:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs))
PRECEQU_PH_QBR_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rt, (intrinsic_wo_chain:{} 4569:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs))
PRECEQ_W_PHL: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_wo_chain:{} 4565:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
PRECEQ_W_PHL_MM: 	(set GPR32Opnd:{ *:[i32] }:$rt, (intrinsic_wo_chain:{} 4565:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs))
PRECEQ_W_PHR: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_wo_chain:{} 4566:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
PRECEQ_W_PHR_MM: 	(set GPR32Opnd:{ *:[i32] }:$rt, (intrinsic_wo_chain:{} 4566:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs))
PRECEU_PH_QBL: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4571:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
PRECEU_PH_QBLA: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4572:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
PRECEU_PH_QBLA_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rt, (intrinsic_wo_chain:{} 4572:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs))
PRECEU_PH_QBL_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rt, (intrinsic_wo_chain:{} 4571:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs))
PRECEU_PH_QBR: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4573:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
PRECEU_PH_QBRA: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4574:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
PRECEU_PH_QBRA_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rt, (intrinsic_wo_chain:{} 4574:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs))
PRECEU_PH_QBR_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rt, (intrinsic_wo_chain:{} 4573:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs))
PRECRQU_S_QB_PH: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4581:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
PRECRQU_S_QB_PH_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4581:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
PRECRQ_PH_W: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4578:{}, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
PRECRQ_PH_W_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4578:{}, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
PRECRQ_QB_PH: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4579:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
PRECRQ_QB_PH_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4579:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
PRECRQ_RS_PH_W: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4580:{}, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
PRECRQ_RS_PH_W_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4580:{}, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
PRECR_QB_PH: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4575:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
PRECR_QB_PH_MMR2: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4575:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
PRECR_SRA_PH_W: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rt, (intrinsic_wo_chain:{} 4576:{}, GPR32Opnd:{ *:[i32] }:$src, GPR32Opnd:{ *:[i32] }:$rs, (timmZExt5:{}):$sa))
PRECR_SRA_PH_W_MMR2: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rt, (intrinsic_wo_chain:{} 4576:{}, GPR32Opnd:{ *:[i32] }:$src, GPR32Opnd:{ *:[i32] }:$rs, (timmZExt5:{}):$sa))
PRECR_SRA_R_PH_W: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rt, (intrinsic_wo_chain:{} 4577:{}, GPR32Opnd:{ *:[i32] }:$src, GPR32Opnd:{ *:[i32] }:$rs, (timmZExt5:{}):$sa))
PRECR_SRA_R_PH_W_MMR2: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rt, (intrinsic_wo_chain:{} 4577:{}, GPR32Opnd:{ *:[i32] }:$src, GPR32Opnd:{ *:[i32] }:$rs, (timmZExt5:{}):$sa))
PREPEND: 	(set GPR32Opnd:{ *:[i32] }:$rt, (intrinsic_wo_chain:{} 4582:{}, GPR32Opnd:{ *:[i32] }:$src, GPR32Opnd:{ *:[i32] }:$rs, (timmZExt5:{}):$sa))
PREPEND_MMR2: 	(set GPR32Opnd:{ *:[i32] }:$rt, (intrinsic_wo_chain:{} 4582:{}, GPR32Opnd:{ *:[i32] }:$src, GPR32Opnd:{ *:[i32] }:$rs, (timmZExt5:{}):$sa))
PseudoDMULT: 	(set ACC128:{ *:[Untyped] }:$ac, (MipsMult:{} GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt))
PseudoDMULTu: 	(set ACC128:{ *:[Untyped] }:$ac, (MipsMultu:{} GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt))
PseudoDSDIV: 	(set ACC128:{ *:[Untyped] }:$ac, (MipsDivRem:{} GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt))
PseudoDUDIV: 	(set ACC128:{ *:[Untyped] }:$ac, (MipsDivRemU:{} GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt))
PseudoIndirectBranch: 	(brind GPR32Opnd:{ *:[i32] }:$rs)
PseudoIndirectBranch64: 	(brind GPR64Opnd:{ *:[i64] }:$rs)
PseudoIndirectBranch64R6: 	(brind GPR64Opnd:{ *:[i64] }:$rs)
PseudoIndirectBranchR6: 	(brind GPR32Opnd:{ *:[i32] }:$rs)
PseudoIndirectBranch_MM: 	(brind GPR32Opnd:{ *:[i32] }:$rs)
PseudoIndirectBranch_MMR6: 	(brind GPR32Opnd:{ *:[i32] }:$rs)
PseudoIndirectHazardBranch: 	(brind GPR32Opnd:{ *:[i32] }:$rs)
PseudoIndirectHazardBranch64: 	(brind GPR64Opnd:{ *:[i64] }:$rs)
PseudoIndrectHazardBranch64R6: 	(brind GPR64Opnd:{ *:[i64] }:$rs)
PseudoIndrectHazardBranchR6: 	(brind GPR32Opnd:{ *:[i32] }:$rs)
PseudoMADD: 	(set ACC64:{ *:[Untyped] }:$ac, (MipsMAdd:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64:{ *:[Untyped] }:$acin))
PseudoMADDU: 	(set ACC64:{ *:[Untyped] }:$ac, (MipsMAddu:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64:{ *:[Untyped] }:$acin))
PseudoMADDU_MM: 	(set ACC64:{ *:[Untyped] }:$ac, (MipsMAddu:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64:{ *:[Untyped] }:$acin))
PseudoMADD_MM: 	(set ACC64:{ *:[Untyped] }:$ac, (MipsMAdd:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64:{ *:[Untyped] }:$acin))
PseudoMFHI: 	(set GPR32:{ *:[i32] }:$rd, (MipsMFHI:{} ACC64:{ *:[Untyped] }:$hilo))
PseudoMFHI64: 	(set GPR64:{ *:[i64] }:$rd, (MipsMFHI:{} ACC128:{ *:[Untyped] }:$hilo))
PseudoMFHI_MM: 	(set GPR32:{ *:[i32] }:$rd, (MipsMFHI:{} ACC64:{ *:[Untyped] }:$hilo))
PseudoMFLO: 	(set GPR32:{ *:[i32] }:$rd, (MipsMFLO:{} ACC64:{ *:[Untyped] }:$hilo))
PseudoMFLO64: 	(set GPR64:{ *:[i64] }:$rd, (MipsMFLO:{} ACC128:{ *:[Untyped] }:$hilo))
PseudoMFLO_MM: 	(set GPR32:{ *:[i32] }:$rd, (MipsMFLO:{} ACC64:{ *:[Untyped] }:$hilo))
PseudoMSUB: 	(set ACC64:{ *:[Untyped] }:$ac, (MipsMSub:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64:{ *:[Untyped] }:$acin))
PseudoMSUBU: 	(set ACC64:{ *:[Untyped] }:$ac, (MipsMSubu:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64:{ *:[Untyped] }:$acin))
PseudoMSUBU_MM: 	(set ACC64:{ *:[Untyped] }:$ac, (MipsMSubu:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64:{ *:[Untyped] }:$acin))
PseudoMSUB_MM: 	(set ACC64:{ *:[Untyped] }:$ac, (MipsMSub:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64:{ *:[Untyped] }:$acin))
PseudoMTLOHI: 	(set ACC64:{ *:[Untyped] }:$lohi, (MipsMTLOHI:{} GPR32:{ *:[i32] }:$lo, GPR32:{ *:[i32] }:$hi))
PseudoMTLOHI64: 	(set ACC128:{ *:[Untyped] }:$lohi, (MipsMTLOHI:{} GPR64:{ *:[i64] }:$lo, GPR64:{ *:[i64] }:$hi))
PseudoMTLOHI_DSP: 	(set ACC64DSP:{ *:[Untyped] }:$lohi, (MipsMTLOHI:{} GPR32:{ *:[i32] }:$lo, GPR32:{ *:[i32] }:$hi))
PseudoMTLOHI_MM: 	(set ACC64:{ *:[Untyped] }:$lohi, (MipsMTLOHI:{} GPR32:{ *:[i32] }:$lo, GPR32:{ *:[i32] }:$hi))
PseudoMULT: 	(set ACC64:{ *:[Untyped] }:$ac, (MipsMult:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
PseudoMULT_MM: 	(set ACC64:{ *:[Untyped] }:$ac, (MipsMult:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
PseudoMULTu: 	(set ACC64:{ *:[Untyped] }:$ac, (MipsMultu:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
PseudoMULTu_MM: 	(set ACC64:{ *:[Untyped] }:$ac, (MipsMultu:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
PseudoSDIV: 	(set ACC64:{ *:[Untyped] }:$ac, (MipsDivRem:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
PseudoSELECTFP_F_D32: 	(set AFGR64Opnd:{ *:[f64] }:$dst, (MipsCMovFP_F:{} AFGR64Opnd:{ *:[f64] }:$T, FCCRegsOpnd:{ *:[i32] }:$cond, AFGR64Opnd:{ *:[f64] }:$F))
PseudoSELECTFP_F_D64: 	(set FGR64Opnd:{ *:[f64] }:$dst, (MipsCMovFP_F:{} FGR64Opnd:{ *:[f64] }:$T, FCCRegsOpnd:{ *:[i32] }:$cond, FGR64Opnd:{ *:[f64] }:$F))
PseudoSELECTFP_F_I: 	(set GPR32Opnd:{ *:[i32] }:$dst, (MipsCMovFP_F:{} GPR32Opnd:{ *:[i32] }:$T, FCCRegsOpnd:{ *:[i32] }:$cond, GPR32Opnd:{ *:[i32] }:$F))
PseudoSELECTFP_F_I64: 	(set GPR64Opnd:{ *:[i64] }:$dst, (MipsCMovFP_F:{} GPR64Opnd:{ *:[i64] }:$T, FCCRegsOpnd:{ *:[i32] }:$cond, GPR64Opnd:{ *:[i64] }:$F))
PseudoSELECTFP_F_S: 	(set FGR32Opnd:{ *:[f32] }:$dst, (MipsCMovFP_F:{} FGR32Opnd:{ *:[f32] }:$T, FCCRegsOpnd:{ *:[i32] }:$cond, FGR32Opnd:{ *:[f32] }:$F))
PseudoSELECTFP_T_D32: 	(set AFGR64Opnd:{ *:[f64] }:$dst, (MipsCMovFP_T:{} AFGR64Opnd:{ *:[f64] }:$T, FCCRegsOpnd:{ *:[i32] }:$cond, AFGR64Opnd:{ *:[f64] }:$F))
PseudoSELECTFP_T_D64: 	(set FGR64Opnd:{ *:[f64] }:$dst, (MipsCMovFP_T:{} FGR64Opnd:{ *:[f64] }:$T, FCCRegsOpnd:{ *:[i32] }:$cond, FGR64Opnd:{ *:[f64] }:$F))
PseudoSELECTFP_T_I: 	(set GPR32Opnd:{ *:[i32] }:$dst, (MipsCMovFP_T:{} GPR32Opnd:{ *:[i32] }:$T, FCCRegsOpnd:{ *:[i32] }:$cond, GPR32Opnd:{ *:[i32] }:$F))
PseudoSELECTFP_T_I64: 	(set GPR64Opnd:{ *:[i64] }:$dst, (MipsCMovFP_T:{} GPR64Opnd:{ *:[i64] }:$T, FCCRegsOpnd:{ *:[i32] }:$cond, GPR64Opnd:{ *:[i64] }:$F))
PseudoSELECTFP_T_S: 	(set FGR32Opnd:{ *:[f32] }:$dst, (MipsCMovFP_T:{} FGR32Opnd:{ *:[f32] }:$T, FCCRegsOpnd:{ *:[i32] }:$cond, FGR32Opnd:{ *:[f32] }:$F))
PseudoSELECT_D32: 	(set AFGR64Opnd:{ *:[f64] }:$dst, (select:{} GPR32Opnd:{ *:[i32] }:$cond, AFGR64Opnd:{ *:[f64] }:$T, AFGR64Opnd:{ *:[f64] }:$F))
PseudoSELECT_D64: 	(set FGR64Opnd:{ *:[f64] }:$dst, (select:{} GPR32Opnd:{ *:[i32] }:$cond, FGR64Opnd:{ *:[f64] }:$T, FGR64Opnd:{ *:[f64] }:$F))
PseudoSELECT_I: 	(set GPR32Opnd:{ *:[i32] }:$dst, (select:{} GPR32Opnd:{ *:[i32] }:$cond, GPR32Opnd:{ *:[i32] }:$T, GPR32Opnd:{ *:[i32] }:$F))
PseudoSELECT_I64: 	(set GPR64Opnd:{ *:[i64] }:$dst, (select:{} GPR32Opnd:{ *:[i32] }:$cond, GPR64Opnd:{ *:[i64] }:$T, GPR64Opnd:{ *:[i64] }:$F))
PseudoSELECT_S: 	(set FGR32Opnd:{ *:[f32] }:$dst, (select:{} GPR32Opnd:{ *:[i32] }:$cond, FGR32Opnd:{ *:[f32] }:$T, FGR32Opnd:{ *:[f32] }:$F))
PseudoUDIV: 	(set ACC64:{ *:[Untyped] }:$ac, (MipsDivRemU:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
RADDU_W_QB: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_wo_chain:{} 4583:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs))
RADDU_W_QB_MM: 	(set GPR32Opnd:{ *:[i32] }:$rt, (intrinsic_wo_chain:{} 4583:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs))
RDDSP: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4584:{}, (timmZExt10:{}):$mask))
RDDSP_MM: 	(set GPR32Opnd:{ *:[i32] }:$rt, (intrinsic_w_chain:{} 4584:{}, (timmZExt7:{}):$mask))
REPLV_PH: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4585:{}, GPR32Opnd:{ *:[i32] }:$rt))
REPLV_PH_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rt, (intrinsic_wo_chain:{} 4585:{}, GPR32Opnd:{ *:[i32] }:$rs))
REPLV_QB: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4586:{}, GPR32Opnd:{ *:[i32] }:$rt))
REPLV_QB_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rt, (intrinsic_wo_chain:{} 4586:{}, GPR32Opnd:{ *:[i32] }:$rs))
REPL_PH: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4585:{}, (immSExt10:{}):$imm))
REPL_PH_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4585:{}, (immSExt10:{}):$imm))
REPL_QB: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4586:{}, (immZExt8:{}):$imm))
REPL_QB_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rt, (intrinsic_wo_chain:{} 4586:{}, (immZExt8:{}):$imm))
ROTR: 	(set GPR32Opnd:{ *:[i32] }:$rd, (rotr:{} GPR32Opnd:{ *:[i32] }:$rt, (immZExt5:{}):$shamt))
ROTRV: 	(set GPR32Opnd:{ *:[i32] }:$rd, (rotr:{} GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rs))
ROTRV_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (rotr:{} GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rs))
ROTR_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (rotr:{} GPR32Opnd:{ *:[i32] }:$rt, (immZExt5:{}):$shamt))
RetRA: 	(MipsRet)
RetRA16: 	(MipsRet)
SAT_S_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (intrinsic_wo_chain:{} 4587:{}, MSA128BOpnd:{ *:[v16i8] }:$ws, (timmZExt3:{}):$m))
SAT_S_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4588:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, (timmZExt6:{}):$m))
SAT_S_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4589:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, (timmZExt4:{}):$m))
SAT_S_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4590:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, (timmZExt5:{}):$m))
SAT_U_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (intrinsic_wo_chain:{} 4591:{}, MSA128BOpnd:{ *:[v16i8] }:$ws, (timmZExt3:{}):$m))
SAT_U_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4592:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, (timmZExt6:{}):$m))
SAT_U_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4593:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, (timmZExt4:{}):$m))
SAT_U_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4594:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, (timmZExt5:{}):$m))
SB: 	(truncstorei8 GPR32Opnd:{ *:[i32] }:$rt, addr:{ *:[iPTR] }:$addr)
SB64: 	(truncstorei8 GPR64Opnd:{ *:[i64] }:$rt, addr:{ *:[iPTR] }:$addr)
SB_MM: 	(truncstorei8 GPR32Opnd:{ *:[i32] }:$rt, addr:{ *:[iPTR] }:$addr)
SD: 	(store GPR64Opnd:{ *:[i64] }:$rt, addr:{ *:[iPTR] }:$addr)
SDC1: 	(store AFGR64Opnd:{ *:[f64] }:$rt, addrDefault:{ *:[iPTR] }:$addr)
SDC164: 	(store FGR64Opnd:{ *:[f64] }:$rt, addrDefault:{ *:[iPTR] }:$addr)
SDC1_D64_MMR6: 	(store FGR64Opnd:{ *:[f64] }:$ft, addrimm16:{ *:[iPTR] }:$addr)
SDC1_MM: 	(store AFGR64Opnd:{ *:[f64] }:$rt, addrDefault:{ *:[iPTR] }:$addr)
SDC2: 	(store COP2Opnd:{ *:[i32] }:$rt, addrDefault:{ *:[iPTR] }:$addr)
SDC2_MMR6: 	(store COP2Opnd:{ *:[i32] }:$rt, addrimm11:{ *:[iPTR] }:$addr)
SDC3: 	(store COP3Opnd:{ *:[i32] }:$rt, addrDefault:{ *:[iPTR] }:$addr)
SDIV_MM_Pseudo: 	(set ACC64:{ *:[Untyped] }:$ac, (MipsDivRem:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
SDL: 	(MipsSDL GPR64Opnd:{ *:[i64] }:$rt, addr:{ *:[iPTR] }:$addr)
SDR: 	(MipsSDR GPR64Opnd:{ *:[i64] }:$rt, addr:{ *:[iPTR] }:$addr)
SDXC1: 	(store AFGR64Opnd:{ *:[f64] }:$fs, (add:{} iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index))
SDXC164: 	(store FGR64Opnd:{ *:[f64] }:$fs, (add:{} iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index))
SEB: 	(set GPR32Opnd:{ *:[i32] }:$rd, (sext_inreg:{} GPR32Opnd:{ *:[i32] }:$rt, i8:{}))
SEB64: 	(set GPR64Opnd:{ *:[i64] }:$rd, (sext_inreg:{} GPR64Opnd:{ *:[i64] }:$rt, i8:{}))
SEB_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (sext_inreg:{} GPR32Opnd:{ *:[i32] }:$rt, i8:{}))
SEH: 	(set GPR32Opnd:{ *:[i32] }:$rd, (sext_inreg:{} GPR32Opnd:{ *:[i32] }:$rt, i16:{}))
SEH64: 	(set GPR64Opnd:{ *:[i64] }:$rd, (sext_inreg:{} GPR64Opnd:{ *:[i64] }:$rt, i16:{}))
SEH_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (sext_inreg:{} GPR32Opnd:{ *:[i32] }:$rt, i16:{}))
SEL_D: 	(set FGR64Opnd:{ *:[f64] }:$fd, (MipsFSelect:{} FGR64Opnd:{ *:[f64] }:$fd_in, FGR64Opnd:{ *:[f64] }:$ft, FGR64Opnd:{ *:[f64] }:$fs))
SEL_D_MMR6: 	(set FGR64Opnd:{ *:[f64] }:$fd, (MipsFSelect:{} FGR64Opnd:{ *:[f64] }:$fd_in, FGR64Opnd:{ *:[f64] }:$ft, FGR64Opnd:{ *:[f64] }:$fs))
SEL_S: 	(set FGR32Opnd:{ *:[f32] }:$fd, (select:{} FGRCCOpnd:{ *:[i32] }:$fd_in, FGR32Opnd:{ *:[f32] }:$ft, FGR32Opnd:{ *:[f32] }:$fs))
SEL_S_MMR6: 	(set FGR32Opnd:{ *:[f32] }:$fd, (select:{} FGRCCOpnd:{ *:[i32] }:$fd_in, FGR32Opnd:{ *:[f32] }:$ft, FGR32Opnd:{ *:[f32] }:$fs))
SEQ: 	(set GPR64Opnd:{ *:[i64] }:$rd, (zext:{} (seteq:{} GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)))
SEQi: 	(set GPR64Opnd:{ *:[i64] }:$rt, (zext:{} (seteq:{} GPR64Opnd:{ *:[i64] }:$rs, (immSExt10_64:{}):$imm10)))
SH: 	(truncstorei16 GPR32Opnd:{ *:[i32] }:$rt, addr:{ *:[iPTR] }:$addr)
SH64: 	(truncstorei16 GPR64Opnd:{ *:[i64] }:$rt, addr:{ *:[iPTR] }:$addr)
SHF_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (MipsSHF:{} (timmZExt8:{}):$u8, MSA128BOpnd:{ *:[v16i8] }:$ws))
SHF_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (MipsSHF:{} (timmZExt8:{}):$u8, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws))
SHF_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (MipsSHF:{} (timmZExt8:{}):$u8, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws))
SHILO: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsSHILO:{} (immSExt6:{}):$shift, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
SHILOV: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsSHILO:{} GPR32Opnd:{ *:[i32] }:$rs, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
SHILOV_MM: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsSHILO:{} GPR32Opnd:{ *:[i32] }:$rs, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
SHILO_MM: 	(set ACC64DSPOpnd:{ *:[Untyped] }:$ac, (MipsSHILO:{} (immSExt6:{}):$shift, ACC64DSPOpnd:{ *:[Untyped] }:$acin))
SHLLV_PH: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4599:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa))
SHLLV_PH_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4599:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs))
SHLLV_QB: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4600:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa))
SHLLV_QB_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4600:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs))
SHLLV_S_PH: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4601:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa))
SHLLV_S_PH_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4601:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs))
SHLLV_S_W: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4602:{}, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa))
SHLLV_S_W_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4602:{}, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rs))
SHLL_S_PH: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4601:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt, (immZExt4:{}):$rs_sa))
SHLL_S_PH_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rt, (intrinsic_w_chain:{} 4601:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, (immZExt4:{}):$sa))
SHLL_S_W: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4602:{}, GPR32Opnd:{ *:[i32] }:$rt, (immZExt5:{}):$rs_sa))
SHLL_S_W_MM: 	(set GPR32Opnd:{ *:[i32] }:$rt, (intrinsic_w_chain:{} 4602:{}, GPR32Opnd:{ *:[i32] }:$rs, (immZExt5:{}):$sa))
SHRAV_PH: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4603:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa))
SHRAV_PH_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4603:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs))
SHRAV_QB: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4604:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa))
SHRAV_QB_MMR2: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4604:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs))
SHRAV_R_PH: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4605:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa))
SHRAV_R_PH_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4605:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs))
SHRAV_R_QB: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4606:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa))
SHRAV_R_QB_MMR2: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4606:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs))
SHRAV_R_W: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_wo_chain:{} 4607:{}, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa))
SHRAV_R_W_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_wo_chain:{} 4607:{}, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rs))
SHRA_R_PH: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4605:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt, (immZExt4:{}):$rs_sa))
SHRA_R_PH_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rt, (intrinsic_wo_chain:{} 4605:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, (immZExt4:{}):$sa))
SHRA_R_QB: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4606:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt, (immZExt3:{}):$rs_sa))
SHRA_R_QB_MMR2: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rt, (intrinsic_wo_chain:{} 4606:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, (immZExt3:{}):$sa))
SHRA_R_W: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_wo_chain:{} 4607:{}, GPR32Opnd:{ *:[i32] }:$rt, (immZExt5:{}):$rs_sa))
SHRA_R_W_MM: 	(set GPR32Opnd:{ *:[i32] }:$rt, (intrinsic_wo_chain:{} 4607:{}, GPR32Opnd:{ *:[i32] }:$rs, (immZExt5:{}):$sa))
SHRLV_PH: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4608:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa))
SHRLV_PH_MMR2: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4608:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs))
SHRLV_QB: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4609:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa))
SHRLV_QB_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4609:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs))
SH_MM: 	(truncstorei16 GPR32Opnd:{ *:[i32] }:$rt, addr:{ *:[iPTR] }:$addr)
SLDI_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (intrinsic_wo_chain:{} 4614:{}, MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, (timmZExt4:{}):$n))
SLDI_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4615:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd_in, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, (timmZExt1:{}):$n))
SLDI_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4616:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd_in, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, (timmZExt3:{}):$n))
SLDI_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4617:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd_in, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, (timmZExt2:{}):$n))
SLD_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (intrinsic_wo_chain:{} 4610:{}, MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, GPR32Opnd:{ *:[i32] }:$rt))
SLD_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4611:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd_in, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, GPR32Opnd:{ *:[i32] }:$rt))
SLD_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4612:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd_in, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, GPR32Opnd:{ *:[i32] }:$rt))
SLD_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4613:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd_in, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, GPR32Opnd:{ *:[i32] }:$rt))
SLL: 	(set GPR32Opnd:{ *:[i32] }:$rd, (shl:{} GPR32Opnd:{ *:[i32] }:$rt, (immZExt5:{}):$shamt))
SLLI_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (shl:{} MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm3:{ *:[v16i8] }:$m))
SLLI_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (shl:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, vsplati64_uimm6:{ *:[v2i64] }:$m))
SLLI_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (shl:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, vsplati16_uimm4:{ *:[v8i16] }:$m))
SLLI_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (shl:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$m))
SLLV: 	(set GPR32Opnd:{ *:[i32] }:$rd, (shl:{} GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rs))
SLL_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (shl:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
SLL_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (shl:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
SLL_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (shl:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
SLL_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (shl:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
SLT: 	(set GPR32Opnd:{ *:[i32] }:$rd, (setlt:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
SLT64: 	(set GPR32Opnd:{ *:[i32] }:$rd, (setlt:{} GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt))
SLT_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (setlt:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
SLTi: 	(set GPR32Opnd:{ *:[i32] }:$rt, (setlt:{} GPR32Opnd:{ *:[i32] }:$rs, (immSExt16:{}):$imm16))
SLTi64: 	(set GPR32Opnd:{ *:[i32] }:$rt, (setlt:{} GPR64Opnd:{ *:[i64] }:$rs, (immSExt16:{}):$imm16))
SLTi_MM: 	(set GPR32Opnd:{ *:[i32] }:$rt, (setlt:{} GPR32Opnd:{ *:[i32] }:$rs, (immSExt16:{}):$imm16))
SLTiu: 	(set GPR32Opnd:{ *:[i32] }:$rt, (setult:{} GPR32Opnd:{ *:[i32] }:$rs, (immSExt16:{}):$imm16))
SLTiu64: 	(set GPR32Opnd:{ *:[i32] }:$rt, (setult:{} GPR64Opnd:{ *:[i64] }:$rs, (immSExt16:{}):$imm16))
SLTiu_MM: 	(set GPR32Opnd:{ *:[i32] }:$rt, (setult:{} GPR32Opnd:{ *:[i32] }:$rs, (immSExt16:{}):$imm16))
SLTu: 	(set GPR32Opnd:{ *:[i32] }:$rd, (setult:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
SLTu64: 	(set GPR32Opnd:{ *:[i32] }:$rd, (setult:{} GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt))
SLTu_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (setult:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
SNE: 	(set GPR64Opnd:{ *:[i64] }:$rd, (zext:{} (setne:{} GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)))
SNEi: 	(set GPR64Opnd:{ *:[i64] }:$rt, (zext:{} (setne:{} GPR64Opnd:{ *:[i64] }:$rs, (immSExt10_64:{}):$imm10)))
SNZ_B_PSEUDO: 	(set GPR32:{ *:[i32] }:$dst, (MipsVAllNonZero:{} MSA128B:{ *:[v16i8] }:$ws))
SNZ_D_PSEUDO: 	(set GPR32:{ *:[i32] }:$dst, (MipsVAllNonZero:{} MSA128D:{ *:[v2i64] }:$ws))
SNZ_H_PSEUDO: 	(set GPR32:{ *:[i32] }:$dst, (MipsVAllNonZero:{} MSA128H:{ *:[v8i16] }:$ws))
SNZ_V_PSEUDO: 	(set GPR32:{ *:[i32] }:$dst, (MipsVAnyNonZero:{} MSA128B:{ *:[v16i8] }:$ws))
SNZ_W_PSEUDO: 	(set GPR32:{ *:[i32] }:$dst, (MipsVAllNonZero:{} MSA128W:{ *:[v4i32] }:$ws))
SPLATI_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (MipsVSHF:{} vsplati8_uimm4:{ *:[v16i8] }:$n, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$ws))
SPLATI_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (MipsVSHF:{} vsplati64_uimm1:{ *:[v2i64] }:$n, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws))
SPLATI_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (MipsVSHF:{} vsplati16_uimm3:{ *:[v8i16] }:$n, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws))
SPLATI_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (MipsVSHF:{} vsplati32_uimm2:{ *:[v4i32] }:$n, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws))
SPLAT_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (vsplati8_elt:{} MSA128BOpnd:{ *:[v16i8] }:$ws, GPR32Opnd:{ *:[i32] }:$rt))
SPLAT_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (vsplati64_elt:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, GPR32Opnd:{ *:[i32] }:$rt))
SPLAT_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (vsplati16_elt:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, GPR32Opnd:{ *:[i32] }:$rt))
SPLAT_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (vsplati32_elt:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, GPR32Opnd:{ *:[i32] }:$rt))
SRA: 	(set GPR32Opnd:{ *:[i32] }:$rd, (sra:{} GPR32Opnd:{ *:[i32] }:$rt, (immZExt5:{}):$shamt))
SRAI_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (sra:{} MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm3:{ *:[v16i8] }:$m))
SRAI_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (sra:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, vsplati64_uimm6:{ *:[v2i64] }:$m))
SRAI_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (sra:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, vsplati16_uimm4:{ *:[v8i16] }:$m))
SRAI_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (sra:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$m))
SRARI_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (intrinsic_wo_chain:{} 4646:{}, MSA128BOpnd:{ *:[v16i8] }:$ws, (timmZExt3:{}):$m))
SRARI_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4647:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, (timmZExt6:{}):$m))
SRARI_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4648:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, (timmZExt4:{}):$m))
SRARI_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4649:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, (timmZExt5:{}):$m))
SRAR_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (intrinsic_wo_chain:{} 4642:{}, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
SRAR_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4643:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
SRAR_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4644:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
SRAR_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4645:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
SRAV: 	(set GPR32Opnd:{ *:[i32] }:$rd, (sra:{} GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rs))
SRA_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (sra:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
SRA_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (sra:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
SRA_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (sra:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
SRA_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (sra:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
SRL: 	(set GPR32Opnd:{ *:[i32] }:$rd, (srl:{} GPR32Opnd:{ *:[i32] }:$rt, (immZExt5:{}):$shamt))
SRLI_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (srl:{} MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm3:{ *:[v16i8] }:$m))
SRLI_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (srl:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, vsplati64_uimm6:{ *:[v2i64] }:$m))
SRLI_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (srl:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, vsplati16_uimm4:{ *:[v8i16] }:$m))
SRLI_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (srl:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$m))
SRLRI_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (intrinsic_wo_chain:{} 4662:{}, MSA128BOpnd:{ *:[v16i8] }:$ws, (timmZExt3:{}):$m))
SRLRI_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4663:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, (timmZExt6:{}):$m))
SRLRI_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4664:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, (timmZExt4:{}):$m))
SRLRI_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4665:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, (timmZExt5:{}):$m))
SRLR_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (intrinsic_wo_chain:{} 4658:{}, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
SRLR_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4659:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
SRLR_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4660:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
SRLR_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4661:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
SRLV: 	(set GPR32Opnd:{ *:[i32] }:$rd, (srl:{} GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rs))
SRL_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (srl:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
SRL_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (srl:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
SRL_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (srl:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
SRL_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (srl:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
STR_D: 	(intrinsic_void 4670:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$dst, iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$imm)
STR_W: 	(intrinsic_void 4671:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$dst, iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$imm)
ST_B: 	(store MSA128BOpnd:{ *:[v16i8] }:$wd, addrimm10:{ *:[iPTR] }:$addr)
ST_D: 	(store MSA128DOpnd:{ *:[v2i64] }:$wd, addrimm10lsl3:{ *:[iPTR] }:$addr)
ST_F16: 	(store MSA128F16:{ *:[f16] }:$ws, (addrimm10:{}):$addr)
ST_H: 	(store MSA128HOpnd:{ *:[v8i16] }:$wd, addrimm10lsl1:{ *:[iPTR] }:$addr)
ST_W: 	(store MSA128WOpnd:{ *:[v4i32] }:$wd, addrimm10lsl2:{ *:[iPTR] }:$addr)
SUBQH_PH: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4675:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
SUBQH_PH_MMR2: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4675:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
SUBQH_R_PH: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4676:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
SUBQH_R_PH_MMR2: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4676:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
SUBQH_R_W: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_wo_chain:{} 4677:{}, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
SUBQH_R_W_MMR2: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_wo_chain:{} 4677:{}, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
SUBQH_W: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_wo_chain:{} 4678:{}, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
SUBQH_W_MMR2: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_wo_chain:{} 4678:{}, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
SUBQ_S_PH: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4673:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
SUBQ_S_PH_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4673:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
SUBQ_S_W: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4674:{}, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
SUBQ_S_W_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (intrinsic_w_chain:{} 4674:{}, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
SUBSUS_U_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (intrinsic_wo_chain:{} 4687:{}, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
SUBSUS_U_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4688:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
SUBSUS_U_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4689:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
SUBSUS_U_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4690:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
SUBSUU_S_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (intrinsic_wo_chain:{} 4691:{}, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
SUBSUU_S_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4692:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
SUBSUU_S_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4693:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
SUBSUU_S_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4694:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
SUBS_S_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (intrinsic_wo_chain:{} 4679:{}, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
SUBS_S_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4680:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
SUBS_S_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4681:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
SUBS_S_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4682:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
SUBS_U_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (intrinsic_wo_chain:{} 4683:{}, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
SUBS_U_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (intrinsic_wo_chain:{} 4684:{}, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
SUBS_U_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (intrinsic_wo_chain:{} 4685:{}, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
SUBS_U_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (intrinsic_wo_chain:{} 4686:{}, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
SUBU16_MM: 	(set GPRMM16Opnd:{ *:[i32] }:$rd, (sub:{} GPRMM16Opnd:{ *:[i32] }:$rs, GPRMM16Opnd:{ *:[i32] }:$rt))
SUBU16_MMR6: 	(set GPRMM16Opnd:{ *:[i32] }:$rd, (sub:{} GPRMM16Opnd:{ *:[i32] }:$rs, GPRMM16Opnd:{ *:[i32] }:$rt))
SUBUH_QB: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4699:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
SUBUH_QB_MMR2: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4699:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
SUBUH_R_QB: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4700:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
SUBUH_R_QB_MMR2: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4700:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
SUBU_PH: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4695:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
SUBU_PH_MMR2: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4695:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
SUBU_S_PH: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4697:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
SUBU_S_PH_MMR2: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_w_chain:{} 4697:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
SUBU_S_QB: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4698:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
SUBU_S_QB_MM: 	(set DSPROpnd:{ *:[v4i8 v2i16] }:$rd, (intrinsic_wo_chain:{} 4698:{}, DSPROpnd:{ *:[v4i8 v2i16] }:$rs, DSPROpnd:{ *:[v4i8 v2i16] }:$rt))
SUBVI_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (sub:{} MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm5:{ *:[v16i8] }:$imm))
SUBVI_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (sub:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, vsplati64_uimm5:{ *:[v2i64] }:$imm))
SUBVI_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (sub:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, vsplati16_uimm5:{ *:[v8i16] }:$imm))
SUBVI_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (sub:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$imm))
SUBV_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (sub:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
SUBV_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (sub:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
SUBV_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (sub:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
SUBV_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (sub:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
SUBu: 	(set GPR32Opnd:{ *:[i32] }:$rd, (sub:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
SUBu_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (sub:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
SW: 	(store GPR32Opnd:{ *:[i32] }:$rt, addr:{ *:[iPTR] }:$addr)
SW64: 	(truncstorei32 GPR64Opnd:{ *:[i64] }:$rt, addr:{ *:[iPTR] }:$addr)
SWC1: 	(store FGR32Opnd:{ *:[f32] }:$rt, addrDefault:{ *:[iPTR] }:$addr)
SWC1_MM: 	(store FGR32Opnd:{ *:[f32] }:$rt, addrDefault:{ *:[iPTR] }:$addr)
SWC2: 	(store COP2Opnd:{ *:[i32] }:$rt, addrDefault:{ *:[iPTR] }:$addr)
SWC2_MMR6: 	(store COP2Opnd:{ *:[i32] }:$rt, addrimm11:{ *:[iPTR] }:$addr)
SWC3: 	(store COP3Opnd:{ *:[i32] }:$rt, addrDefault:{ *:[iPTR] }:$addr)
SWL: 	(MipsSWL GPR32Opnd:{ *:[i32] }:$rt, addr:{ *:[iPTR] }:$addr)
SWL64: 	(MipsSWL GPR64Opnd:{ *:[i64] }:$rt, addr:{ *:[iPTR] }:$addr)
SWLE_MM: 	(MipsSWL GPR32Opnd:{ *:[i32] }:$rt, addrimm12:{ *:[iPTR] }:$addr)
SWL_MM: 	(MipsSWL GPR32Opnd:{ *:[i32] }:$rt, addrimm12:{ *:[iPTR] }:$addr)
SWR: 	(MipsSWR GPR32Opnd:{ *:[i32] }:$rt, addr:{ *:[iPTR] }:$addr)
SWR64: 	(MipsSWR GPR64Opnd:{ *:[i64] }:$rt, addr:{ *:[iPTR] }:$addr)
SWRE_MM: 	(MipsSWR GPR32Opnd:{ *:[i32] }:$rt, addrimm12:{ *:[iPTR] }:$addr)
SWR_MM: 	(MipsSWR GPR32Opnd:{ *:[i32] }:$rt, addrimm12:{ *:[iPTR] }:$addr)
SWXC1: 	(store FGR32Opnd:{ *:[f32] }:$fs, (add:{} iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index))
SWXC1_MM: 	(store FGR32Opnd:{ *:[f32] }:$fs, (add:{} iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index))
SYNC: 	(MipsSync (immZExt5:{}):$stype)
SYNC_MM: 	(MipsSync (immZExt5:{}):$stype)
SYNC_MMR6: 	(MipsSync (immZExt5:{}):$stype)
SZ_B_PSEUDO: 	(set GPR32:{ *:[i32] }:$dst, (MipsVAllZero:{} MSA128B:{ *:[v16i8] }:$ws))
SZ_D_PSEUDO: 	(set GPR32:{ *:[i32] }:$dst, (MipsVAllZero:{} MSA128D:{ *:[v2i64] }:$ws))
SZ_H_PSEUDO: 	(set GPR32:{ *:[i32] }:$dst, (MipsVAllZero:{} MSA128H:{ *:[v8i16] }:$ws))
SZ_V_PSEUDO: 	(set GPR32:{ *:[i32] }:$dst, (MipsVAnyZero:{} MSA128B:{ *:[v16i8] }:$ws))
SZ_W_PSEUDO: 	(set GPR32:{ *:[i32] }:$dst, (MipsVAllZero:{} MSA128W:{ *:[v4i32] }:$ws))
TAILCALL64R6REG: 	(MipsTailCall GPR64Opnd:{ *:[i64] }:$rs)
TAILCALLHB64R6REG: 	(MipsTailCall GPR64Opnd:{ *:[i64] }:$rs)
TAILCALLHBR6REG: 	(MipsTailCall GPR32Opnd:{ *:[i32] }:$rs)
TAILCALLR6REG: 	(MipsTailCall GPR32Opnd:{ *:[i32] }:$rs)
TAILCALLREG: 	(MipsTailCall GPR32Opnd:{ *:[i32] }:$rs)
TAILCALLREG64: 	(MipsTailCall GPR64Opnd:{ *:[i64] }:$rs)
TAILCALLREGHB: 	(MipsTailCall GPR32Opnd:{ *:[i32] }:$rs)
TAILCALLREGHB64: 	(MipsTailCall GPR64Opnd:{ *:[i64] }:$rs)
TAILCALLREG_MM: 	(MipsTailCall GPR32Opnd:{ *:[i32] }:$rs)
TAILCALLREG_MMR6: 	(MipsTailCall GPR32Opnd:{ *:[i32] }:$rs)
TRAP: 	(trap)
TRAP_MM: 	(trap)
UDIV_MM_Pseudo: 	(set ACC64:{ *:[Untyped] }:$ac, (MipsDivRemU:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
VSHF_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (MipsVSHF:{} MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
VSHF_D: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (MipsVSHF:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd_in, MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
VSHF_H: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (MipsVSHF:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd_in, MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
VSHF_W: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (MipsVSHF:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd_in, MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
WRDSP: 	(intrinsic_void 4713:{}, GPR32Opnd:{ *:[i32] }:$rs, (timmZExt10:{}):$mask)
WRDSP_MM: 	(intrinsic_void 4713:{}, GPR32Opnd:{ *:[i32] }:$rt, (timmZExt7:{}):$mask)
XOR: 	(set GPR32Opnd:{ *:[i32] }:$rd, (xor:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
XOR16_MM: 	(set GPRMM16Opnd:{ *:[i32] }:$dst, (xor:{} GPRMM16Opnd:{ *:[i32] }:$rs, GPRMM16Opnd:{ *:[i32] }:$rt))
XOR64: 	(set GPR64Opnd:{ *:[i64] }:$rd, (xor:{} GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt))
XORI_B: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (xor:{} MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm8:{ *:[v16i8] }:$u8))
XORI_MMR6: 	(set GPR32Opnd:{ *:[i32] }:$rt, (xor:{} GPR32Opnd:{ *:[i32] }:$rs, (immZExt16:{}):$imm16))
XOR_MM: 	(set GPR32Opnd:{ *:[i32] }:$rd, (xor:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
XOR_MMR6: 	(set GPR32Opnd:{ *:[i32] }:$rd, (xor:{} GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt))
XOR_V: 	(set MSA128BOpnd:{ *:[v16i8] }:$wd, (xor:{} MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
XOR_V_D_PSEUDO: 	(set MSA128DOpnd:{ *:[v2i64 v2f64] }:$wd, (xor:{} MSA128DOpnd:{ *:[v2i64 v2f64] }:$ws, MSA128DOpnd:{ *:[v2i64 v2f64] }:$wt))
XOR_V_H_PSEUDO: 	(set MSA128HOpnd:{ *:[v8i16 v8f16] }:$wd, (xor:{} MSA128HOpnd:{ *:[v8i16 v8f16] }:$ws, MSA128HOpnd:{ *:[v8i16 v8f16] }:$wt))
XOR_V_W_PSEUDO: 	(set MSA128WOpnd:{ *:[v4i32 v4f32] }:$wd, (xor:{} MSA128WOpnd:{ *:[v4i32 v4f32] }:$ws, MSA128WOpnd:{ *:[v4i32 v4f32] }:$wt))
XORi: 	(set GPR32Opnd:{ *:[i32] }:$rt, (xor:{} GPR32Opnd:{ *:[i32] }:$rs, (imm32ZExt16:{}):$imm16))
XORi64: 	(set GPR64Opnd:{ *:[i64] }:$rt, (xor:{} GPR64Opnd:{ *:[i64] }:$rs, (immZExt16:{}):$imm16))
XORi_MM: 	(set GPR32Opnd:{ *:[i32] }:$rt, (xor:{} GPR32Opnd:{ *:[i32] }:$rs, (immZExt16:{}):$imm16))
Generating instruction variants.
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
callseq_start: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
callseq_end: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_add: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_add: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_add: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_sub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_sub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_sub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_and: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_and: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_and: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_or: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_or: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_or: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_nand: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_nand: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_nand: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_swap: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_swap: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_swap: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_cmp_swap: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_cmp_swap: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_cmp_swap: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_min: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_min: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_min: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_max: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_max: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_max: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_umin: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_umin: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_umin: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_umax: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_umax: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_umax: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
mul: Idxs = [ 0 0 ]
mul: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
srl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sra: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
srl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sra: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
rotr: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
rotr: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsLWL: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsLWR: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSWL: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSWR: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSync: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
br: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
br: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsJmpLink: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsJmpLink: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsJmpLink: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsTailCall: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
brind: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MIPSehret: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MIPSehret: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sext_inreg: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sext_inreg: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
ctlz: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
ctlz: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
MipsMult: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMultu: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMFHI: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsMFLO: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsMTLOHI: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMAdd: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMAddu: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMSub: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMSubu: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDivRem: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDivRemU: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsJmpLink: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsTailCall: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
brind: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fabs: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fabs: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fabs: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fneg: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fneg: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fneg: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fsqrt: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fsqrt: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fsqrt: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fadd: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fadd: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fadd: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fdiv: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fdiv: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fdiv: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fsub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fsub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fsub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (fadd:{ *:[f32] } (fmul:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft), FGR32Opnd:{ *:[f32] }:$fr)
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
fsub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (fadd:{ *:[f64] } (fmul:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft), AFGR64Opnd:{ *:[f64] }:$fr)
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
fsub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (fadd:{ *:[f64] } (fmul:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft), FGR64Opnd:{ *:[f64] }:$fr)
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
fsub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
fsub: Idxs = [ 0 0 ]
fsub: Idxs = [ 0 1 ]
FOUND VARIANTS OF: (fsub:{ *:[f32] } (fpimm:{ *:[f32] })<<P:Predicate_fpimm0>>, (fadd:{ *:[f32] } (fmul:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft), FGR32Opnd:{ *:[f32] }:$fr))
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
fsub: Idxs = [ 0 0 ]
fsub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
fsub: Idxs = [ 0 0 ]
fsub: Idxs = [ 0 1 ]
FOUND VARIANTS OF: (fsub:{ *:[f64] } (fpimm:{ *:[f64] })<<P:Predicate_fpimm0>>, (fadd:{ *:[f64] } (fmul:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft), AFGR64Opnd:{ *:[f64] }:$fr))
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
fsub: Idxs = [ 0 0 ]
fsub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
fsub: Idxs = [ 0 0 ]
fsub: Idxs = [ 0 1 ]
FOUND VARIANTS OF: (fsub:{ *:[f64] } (fpimm:{ *:[f64] })<<P:Predicate_fpimm0>>, (fadd:{ *:[f64] } (fmul:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft), FGR64Opnd:{ *:[f64] }:$fr))
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
fsub: Idxs = [ 0 0 ]
fsub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsFPBrcond: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsFPBrcond: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsFPCmp: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsFPCmp: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsFPCmp: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsBuildPairF64: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsBuildPairF64: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsExtractElementF64: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsExtractElementF64: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_add: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_sub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_and: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_or: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_nand: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_swap: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_cmp_swap: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_min: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_max: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_umin: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load_umax: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
srl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sra: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sra: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
srl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
rotr: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
rotr: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsLWL: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsLWR: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSWL: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSWR: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsLDL: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsLDR: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSDL: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSDR: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsJmpLink: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsTailCall: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
brind: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsTailCall: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
brind: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsMult: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMultu: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDivRem: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDivRemU: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMFHI: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsMFLO: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsMTLOHI: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sext_inreg: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sext_inreg: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
ctlz: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
ctlz: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
MipsExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
setcc: Idxs = [ 0 0 0 ]
setcc: Idxs = [ 1 0 0 ]
brcond: Idxs = [ 0 0 ]
brcond: Idxs = [ 1 0 ]
FOUND VARIANTS OF: (brcond (setcc:{ *:[i32] } (and:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (shl:{ *:[i64] } 1:{ *:[i64] }, (imm:{ *:[i64] })<<P:Predicate_immZExt5_64>>:$p)), 0:{ *:[i64] }, SETEQ:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
setcc: Idxs = [ 0 0 0 ]
setcc: Idxs = [ 1 0 0 ]
brcond: Idxs = [ 0 0 ]
brcond: Idxs = [ 1 0 ]
FOUND VARIANTS OF: (brcond (setcc:{ *:[i32] } (and:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (shl:{ *:[i64] } 4294967296:{ *:[i64] }, (imm:{ *:[i64] })<<P:Predicate_immZExt5_64>>:$p)), 0:{ *:[i64] }, SETEQ:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
setcc: Idxs = [ 0 0 0 ]
setcc: Idxs = [ 1 0 0 ]
brcond: Idxs = [ 0 0 ]
brcond: Idxs = [ 1 0 ]
FOUND VARIANTS OF: (brcond (setcc:{ *:[i32] } (and:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (shl:{ *:[i64] } 1:{ *:[i64] }, (imm:{ *:[i64] })<<P:Predicate_immZExt5_64>>:$p)), 0:{ *:[i64] }, SETNE:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
setcc: Idxs = [ 0 0 0 ]
setcc: Idxs = [ 1 0 0 ]
brcond: Idxs = [ 0 0 ]
brcond: Idxs = [ 1 0 ]
FOUND VARIANTS OF: (brcond (setcc:{ *:[i32] } (and:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (shl:{ *:[i64] } 4294967296:{ *:[i64] }, (imm:{ *:[i64] })<<P:Predicate_immZExt5_64>>:$p)), 0:{ *:[i64] }, SETNE:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
Dependent/multiply used variables: <empty set>
mul: Idxs = [ 0 0 ]
mul: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsCIns: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsCIns: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsCIns: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
ctpop: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ctpop: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
zext: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
zext: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
zext: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
zext: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsJmpLink: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsCMovFP_T: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsCMovFP_T: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsCMovFP_F: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsCMovFP_F: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsCMovFP_T: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsCMovFP_F: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsCMovFP_T: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsCMovFP_F: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsCMovFP_T: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsCMovFP_F: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsCMovFP_T: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsCMovFP_T: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsCMovFP_T: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsCMovFP_T: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsCMovFP_T: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsCMovFP_F: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsCMovFP_F: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsCMovFP_F: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsCMovFP_F: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsCMovFP_F: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
ctlz: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ctlz: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
sdiv: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
udiv: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
srem: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
urem: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
mulhs: Idxs = [ 0 0 ]
mulhs: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
mulhu: Idxs = [ 0 0 ]
mulhu: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
mul: Idxs = [ 0 0 ]
mul: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsFSelect: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsTailCall: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
brind: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsTailCall: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
brind: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
ctlz: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ctlz: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
sdiv: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
udiv: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
srem: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
urem: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
mulhs: Idxs = [ 0 0 ]
mulhs: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
mulhu: Idxs = [ 0 0 ]
mulhu: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
mul: Idxs = [ 0 0 ]
mul: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsTailCall: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
brind: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsTailCall: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
brind: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsJmpLink: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMULSAQ_S_W_PH: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMAQ_S_W_PHL: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMAQ_S_W_PHR: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMAQ_SA_W_PHL: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMAQ_SA_W_PHR: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMFHI: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsMFLO: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsDPAU_H_QBL: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPAU_H_QBR: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPSU_H_QBL: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPSU_H_QBR: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPAQ_S_W_PH: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPSQ_S_W_PH: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPAQ_SA_L_W: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPSQ_SA_L_W: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMult: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMultu: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMAdd: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMAddu: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMSub: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMSubu: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_void: Idxs = [ 0 0 0 ]
intrinsic_void: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_void: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_void: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_void: Idxs = [ 0 0 0 ]
intrinsic_void: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_void: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_void: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSHILO: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSHILO: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMTHLIP: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_void: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPA_W_PH: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPS_W_PH: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPAQX_S_W_PH: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPAQX_SA_W_PH: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPAX_W_PH: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPSX_W_PH: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPSQX_S_W_PH: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPSQX_SA_W_PH: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMULSA_W_PH: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMTLOHI: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_void: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_void: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm5:{ *:[v16i8] }:$imm)
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_uimm5:{ *:[v8i16] }:$imm)
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$imm)
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_uimm5:{ *:[v2i64] }:$imm)
Dependent/multiply used variables: <empty set>
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (and:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm8:{ *:[v16i8] }:$u8)
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 1 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 1 0 ]
FOUND VARIANTS OF: (and:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, (xor:{ *:[v16i8] } (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128BOpnd:{ *:[v16i8] }:$wt), immAllOnesV:{ *:[v16i8] }))
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 1 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 1 0 ]
FOUND VARIANTS OF: (and:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, (xor:{ *:[v8i16] } (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128HOpnd:{ *:[v8i16] }:$wt), immAllOnesV:{ *:[v8i16] }))
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 1 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 1 0 ]
FOUND VARIANTS OF: (and:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, (xor:{ *:[v4i32] } (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128WOpnd:{ *:[v4i32] }:$wt), immAllOnesV:{ *:[v4i32] }))
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
shl: Idxs = [ 0 0 ]
bitconvert: Idxs = [ 0 ]
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 1 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 1 0 ]
FOUND VARIANTS OF: (and:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, (xor:{ *:[v2i64] } (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, MSA128DOpnd:{ *:[v2i64] }:$wt), (bitconvert:{ *:[v2i64] } immAllOnesV:{ *:[v4i32] })))
Dependent/multiply used variables: <empty set>
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (and:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplat_uimm_inv_pow2:{ *:[v16i8] }:$m)
Dependent/multiply used variables: <empty set>
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (and:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplat_uimm_inv_pow2:{ *:[v8i16] }:$m)
Dependent/multiply used variables: <empty set>
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (and:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplat_uimm_inv_pow2:{ *:[v4i32] }:$m)
Dependent/multiply used variables: <empty set>
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (and:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplat_uimm_inv_pow2:{ *:[v2i64] }:$m)
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
vselect: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vselect: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vselect: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vselect: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
vselect: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vselect: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vselect: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vselect: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vselect: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vselect: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vselect: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vselect: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (xor:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128BOpnd:{ *:[v16i8] }:$wt))
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (xor:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128HOpnd:{ *:[v8i16] }:$wt))
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (xor:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128WOpnd:{ *:[v4i32] }:$wt))
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
shl: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (xor:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, MSA128DOpnd:{ *:[v2i64] }:$wt))
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (xor:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplat_uimm_pow2:{ *:[v16i8] }:$m)
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (xor:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplat_uimm_pow2:{ *:[v8i16] }:$m)
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (xor:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplat_uimm_pow2:{ *:[v4i32] }:$m)
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (xor:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplat_uimm_pow2:{ *:[v2i64] }:$m)
Dependent/multiply used variables: <empty set>
vselect: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vselect: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vselect: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vselect: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vselect: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vselect: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vselect: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (or:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128BOpnd:{ *:[v16i8] }:$wt))
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (or:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128HOpnd:{ *:[v8i16] }:$wt))
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (or:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128WOpnd:{ *:[v4i32] }:$wt))
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
shl: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (or:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, MSA128DOpnd:{ *:[v2i64] }:$wt))
Dependent/multiply used variables: <empty set>
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (or:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplat_uimm_pow2:{ *:[v16i8] }:$m)
Dependent/multiply used variables: <empty set>
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (or:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplat_uimm_pow2:{ *:[v8i16] }:$m)
Dependent/multiply used variables: <empty set>
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (or:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplat_uimm_pow2:{ *:[v4i32] }:$m)
Dependent/multiply used variables: <empty set>
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (or:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplat_uimm_pow2:{ *:[v2i64] }:$m)
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVExtractSExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVExtractSExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVExtractSExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVExtractSExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVExtractZExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVExtractZExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVExtractZExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vector_extract: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
vector_extract: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sdiv: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sdiv: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sdiv: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sdiv: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
udiv: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
udiv: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
udiv: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
udiv: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
fadd: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fadd: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vfsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vfsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vfsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vfsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vfsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vfsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
vfsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vfsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vfsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vfsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vfsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vfsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vfsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vfsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vfsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vfsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vfsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vfsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vfsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vfsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
fdiv: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fdiv: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
fexp2: Idxs = [ 0 ]
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (fmul:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws, (fexp2:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$wt))
Dependent/multiply used variables: <empty set>
fexp2: Idxs = [ 0 ]
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (fmul:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws, (fexp2:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$wt))
Dependent/multiply used variables: <empty set>
fexp2: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fexp2: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sint_to_fp: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
sint_to_fp: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
uint_to_fp: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
uint_to_fp: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: [ rs ]
build_vector: Idxs = [ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ]
Dependent/multiply used variables: [ rs ]
build_vector: Idxs = [ 0 0 0 0 0 0 0 0 ]
Dependent/multiply used variables: [ rs ]
build_vector: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: [ rs ]
build_vector: Idxs = [ 0 0 ]
Dependent/multiply used variables: [ fs ]
build_vector: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: [ fs ]
build_vector: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
flog2: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
flog2: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fma: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
fma: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsFMS: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsFMS: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
frint: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
frint: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
fsqrt: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fsqrt: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fsub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fsub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
fp_to_sint: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fp_to_sint: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fp_to_uint: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fp_to_uint: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsILVEV: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsILVEV: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsILVEV: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsILVEV: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsILVL: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsILVL: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsILVL: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsILVL: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsILVOD: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsILVOD: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsILVOD: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsILVOD: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsILVR: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsILVR: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsILVR: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsILVR: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
vector_insert: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vector_insert: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vector_insert: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vector_insert: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsINSVE: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsINSVE: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsINSVE: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsINSVE: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
vector_insert: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vector_insert: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vector_insert: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vector_insert: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vector_insert: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vector_insert: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vector_insert: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vector_insert: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vector_insert: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vector_insert: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vector_insert: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vector_insert: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vector_insert: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vector_insert: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, (shl:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immZExt2Lsa>>:$sa))
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rt, (shl:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immZExt2Lsa>>:$sa))
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
mul: Idxs = [ 0 0 ]
mul: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, (mul:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
Dependent/multiply used variables: <empty set>
mul: Idxs = [ 0 0 ]
mul: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, (mul:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt))
Dependent/multiply used variables: <empty set>
mul: Idxs = [ 0 0 ]
mul: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, (mul:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt))
Dependent/multiply used variables: <empty set>
mul: Idxs = [ 0 0 ]
mul: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, (mul:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt))
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
smax: Idxs = [ 0 0 ]
smax: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
smax: Idxs = [ 0 0 ]
smax: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
smax: Idxs = [ 0 0 ]
smax: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
smax: Idxs = [ 0 0 ]
smax: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
umax: Idxs = [ 0 0 ]
umax: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
umax: Idxs = [ 0 0 ]
umax: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
umax: Idxs = [ 0 0 ]
umax: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
umax: Idxs = [ 0 0 ]
umax: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
smax: Idxs = [ 0 0 ]
smax: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (smax:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_simm5:{ *:[v16i8] }:$imm)
Dependent/multiply used variables: <empty set>
smax: Idxs = [ 0 0 ]
smax: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (smax:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_simm5:{ *:[v8i16] }:$imm)
Dependent/multiply used variables: <empty set>
smax: Idxs = [ 0 0 ]
smax: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (smax:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_simm5:{ *:[v4i32] }:$imm)
Dependent/multiply used variables: <empty set>
smax: Idxs = [ 0 0 ]
smax: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (smax:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_simm5:{ *:[v2i64] }:$imm)
Dependent/multiply used variables: <empty set>
umax: Idxs = [ 0 0 ]
umax: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (umax:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm5:{ *:[v16i8] }:$imm)
Dependent/multiply used variables: <empty set>
umax: Idxs = [ 0 0 ]
umax: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (umax:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_uimm5:{ *:[v8i16] }:$imm)
Dependent/multiply used variables: <empty set>
umax: Idxs = [ 0 0 ]
umax: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (umax:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$imm)
Dependent/multiply used variables: <empty set>
umax: Idxs = [ 0 0 ]
umax: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (umax:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_uimm5:{ *:[v2i64] }:$imm)
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
smin: Idxs = [ 0 0 ]
smin: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
smin: Idxs = [ 0 0 ]
smin: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
smin: Idxs = [ 0 0 ]
smin: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
smin: Idxs = [ 0 0 ]
smin: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
umin: Idxs = [ 0 0 ]
umin: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
umin: Idxs = [ 0 0 ]
umin: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
umin: Idxs = [ 0 0 ]
umin: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
umin: Idxs = [ 0 0 ]
umin: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
smin: Idxs = [ 0 0 ]
smin: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (smin:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_simm5:{ *:[v16i8] }:$imm)
Dependent/multiply used variables: <empty set>
smin: Idxs = [ 0 0 ]
smin: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (smin:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_simm5:{ *:[v8i16] }:$imm)
Dependent/multiply used variables: <empty set>
smin: Idxs = [ 0 0 ]
smin: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (smin:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_simm5:{ *:[v4i32] }:$imm)
Dependent/multiply used variables: <empty set>
smin: Idxs = [ 0 0 ]
smin: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (smin:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_simm5:{ *:[v2i64] }:$imm)
Dependent/multiply used variables: <empty set>
umin: Idxs = [ 0 0 ]
umin: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (umin:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm5:{ *:[v16i8] }:$imm)
Dependent/multiply used variables: <empty set>
umin: Idxs = [ 0 0 ]
umin: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (umin:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_uimm5:{ *:[v8i16] }:$imm)
Dependent/multiply used variables: <empty set>
umin: Idxs = [ 0 0 ]
umin: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (umin:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$imm)
Dependent/multiply used variables: <empty set>
umin: Idxs = [ 0 0 ]
umin: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (umin:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_uimm5:{ *:[v2i64] }:$imm)
Dependent/multiply used variables: <empty set>
srem: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
srem: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
srem: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
srem: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
urem: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
urem: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
urem: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
urem: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
mul: Idxs = [ 0 0 ]
mul: Idxs = [ 0 0 ]
sub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
mul: Idxs = [ 0 0 ]
mul: Idxs = [ 0 0 ]
sub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
mul: Idxs = [ 0 0 ]
mul: Idxs = [ 0 0 ]
sub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
mul: Idxs = [ 0 0 ]
mul: Idxs = [ 0 0 ]
sub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
mul: Idxs = [ 0 0 ]
mul: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
mul: Idxs = [ 0 0 ]
mul: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
mul: Idxs = [ 0 0 ]
mul: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
mul: Idxs = [ 0 0 ]
mul: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
ctlz: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ctlz: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ctlz: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ctlz: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsVNOR: Idxs = [ 0 0 ]
MipsVNOR: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVNOR: Idxs = [ 0 0 ]
MipsVNOR: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVNOR: Idxs = [ 0 0 ]
MipsVNOR: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVNOR: Idxs = [ 0 0 ]
MipsVNOR: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVNOR: Idxs = [ 0 0 ]
MipsVNOR: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (MipsVNOR:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm8:{ *:[v16i8] }:$u8)
Dependent/multiply used variables: <empty set>
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (or:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm8:{ *:[v16i8] }:$u8)
Dependent/multiply used variables: <empty set>
MipsPCKEV: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsPCKEV: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsPCKEV: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsPCKEV: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsPCKOD: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsPCKOD: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsPCKOD: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsPCKOD: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
ctpop: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ctpop: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ctpop: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ctpop: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSHF: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSHF: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSHF: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
Dependent/multiply used variables: [ rt ws ]
build_vector: Idxs = [ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ]
MipsVSHF: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: [ rt ws ]
build_vector: Idxs = [ 0 0 0 0 0 0 0 0 ]
MipsVSHF: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: [ rt ws ]
build_vector: Idxs = [ 0 0 0 0 ]
MipsVSHF: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: [ rt ws ]
build_vector: Idxs = [ 0 0 0 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
bitconvert: Idxs = [ 0 ]
bitconvert: Idxs = [ 1 ]
MipsVSHF: Idxs = [ 0 0 0 ]
MipsVSHF: Idxs = [ 1 0 0 ]
FOUND VARIANTS OF: (MipsVSHF:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] } GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt), (build_vector:{ *:[v4i32] }))), MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$ws)
Dependent/multiply used variables: [ ws ]
MipsVSHF: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: [ ws ]
MipsVSHF: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: [ ws ]
MipsVSHF: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: [ ws ]
MipsVSHF: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
sra: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sra: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sra: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sra: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sra: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sra: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sra: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sra: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
srl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
srl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
srl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
srl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
srl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
srl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
srl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
srl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
sub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVSHF: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVSHF: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVSHF: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVSHF: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (xor:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm8:{ *:[v16i8] }:$u8)
Dependent/multiply used variables: <empty set>
fabs: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fabs: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsVAllNonZero: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsVAllNonZero: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsVAllNonZero: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsVAllNonZero: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsVAnyNonZero: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsVAllZero: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsVAllZero: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsVAllZero: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsVAllZero: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsVAnyZero: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fpextend: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fpround: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fpextend: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fpround: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsJmpLink: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
mul: Idxs = [ 0 0 ]
mul: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
rotr: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
rotr: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsLWL: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsLWR: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSWL: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSWR: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsLWL: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsLWR: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSWL: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSWR: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsCMovFP_T: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsCMovFP_F: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
ctlz: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
ctlz: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
sext_inreg: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sext_inreg: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
br: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsJmpLink: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsJmpLink: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
br: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsSync: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
MipsMult: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMultu: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMFHI: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsMFLO: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsMTLOHI: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMAdd: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMAddu: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMSub: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMSubu: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsTailCall: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
brind: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsDivRem: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDivRemU: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fadd: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fdiv: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fsub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fadd: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fadd: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fdiv: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fdiv: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fsub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fsub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsFPCmp: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsFPCmp: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsFPBrcond: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsFPBrcond: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
fsqrt: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fsqrt: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fabs: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fabs: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fabs: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fneg: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fneg: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fneg: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsCMovFP_T: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsCMovFP_F: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsCMovFP_T: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsCMovFP_F: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fsqrt: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
br: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
sdiv: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
udiv: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsJmpLink: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
srem: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
urem: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
mul: Idxs = [ 0 0 ]
mul: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
mulhs: Idxs = [ 0 0 ]
mulhs: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
mulhu: Idxs = [ 0 0 ]
mulhu: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSync: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fadd: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fsub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fdiv: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fneg: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsIns: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsFSelect: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsTailCall: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
brind: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPAQ_S_W_PH: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPAQ_SA_L_W: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPAU_H_QBL: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPAU_H_QBR: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMAdd: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMAddu: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMSub: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMSubu: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMult: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMultu: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPSQ_S_W_PH: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPSQ_SA_L_W: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPSU_H_QBL: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPSU_H_QBR: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMAQ_S_W_PHL: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMAQ_SA_W_PHL: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMAQ_S_W_PHR: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMAQ_SA_W_PHR: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMFHI: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsMFLO: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMTHLIP: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSHILO: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSHILO: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_void: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMULSAQ_S_W_PH: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_void: Idxs = [ 0 0 0 ]
intrinsic_void: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_void: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_void: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_void: Idxs = [ 0 0 0 ]
intrinsic_void: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_void: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_void: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPA_W_PH: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPAQX_S_W_PH: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPAQX_SA_W_PH: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPAX_W_PH: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPS_W_PH: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPSQX_S_W_PH: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPSQX_SA_W_PH: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDPSX_W_PH: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMULSA_W_PH: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
subc: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
addc: Idxs = [ 0 0 ]
addc: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
addc: Idxs = [ 0 0 ]
addc: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
mul: Idxs = [ 0 0 ]
mul: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSync: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsJmpLink: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsTailCall: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsTailCall: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$lo))
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tblockaddress:{ *:[i32] }):$lo))
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tjumptable:{ *:[i32] }):$lo))
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tconstpool:{ *:[i32] }):$lo))
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tglobaltlsaddr:{ *:[i32] }):$lo))
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (texternalsym:{ *:[i32] }):$lo))
Dependent/multiply used variables: <empty set>
MipsGotHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsGotHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsTlsHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsGPRel: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (MipsGPRel:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$in))
Dependent/multiply used variables: <empty set>
MipsGPRel: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (MipsGPRel:{ *:[i32] } (tconstpool:{ *:[i32] }):$in))
Dependent/multiply used variables: <empty set>
MipsWrapper: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsWrapper: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsWrapper: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsWrapper: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsWrapper: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsWrapper: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
bswap: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
atomic_load: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
atomic_load: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
atomic_load: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
atomic_store: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_store: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_store: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
sint_to_fp: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsTruncIntFP: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsMTC1_D64: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
sint_to_fp: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsTruncIntFP: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fpround: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fpextend: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
sint_to_fp: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
sint_to_fp: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
sint_to_fp: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsTruncIntFP: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsTruncIntFP: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsTruncIntFP: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fpround: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fpextend: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
fneg: Idxs = [ 0 ]
fneg: Idxs = [ 1 ]
FOUND VARIANTS OF: (fneg:{ *:[f32] } (fadd:{ *:[f32] } (fmul:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft), FGR32Opnd:{ *:[f32] }:$fr))
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
fsub: Idxs = [ 0 0 ]
fneg: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
fneg: Idxs = [ 0 ]
fneg: Idxs = [ 1 ]
FOUND VARIANTS OF: (fneg:{ *:[f64] } (fadd:{ *:[f64] } (fmul:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft), AFGR64Opnd:{ *:[f64] }:$fr))
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
fsub: Idxs = [ 0 0 ]
fneg: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
fneg: Idxs = [ 0 ]
fneg: Idxs = [ 1 ]
FOUND VARIANTS OF: (fneg:{ *:[f64] } (fadd:{ *:[f64] } (fmul:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft), FGR64Opnd:{ *:[f64] }:$fr))
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
fsub: Idxs = [ 0 0 ]
fneg: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$lo))
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tblockaddress:{ *:[i64] }):$lo))
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tjumptable:{ *:[i64] }):$lo))
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tconstpool:{ *:[i64] }):$lo))
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tglobaltlsaddr:{ *:[i64] }):$lo))
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (texternalsym:{ *:[i64] }):$lo))
Dependent/multiply used variables: <empty set>
MipsGotHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsGotHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsTlsHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsJmpLink: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHighest: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHighest: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHighest: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHighest: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHighest: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHigher: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHigher: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHigher: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHigher: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHigher: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHigher: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHigher:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$lo))
Dependent/multiply used variables: <empty set>
MipsHigher: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHigher:{ *:[i64] } (tblockaddress:{ *:[i64] }):$lo))
Dependent/multiply used variables: <empty set>
MipsHigher: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHigher:{ *:[i64] } (tjumptable:{ *:[i64] }):$lo))
Dependent/multiply used variables: <empty set>
MipsHigher: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHigher:{ *:[i64] } (tconstpool:{ *:[i64] }):$lo))
Dependent/multiply used variables: <empty set>
MipsHigher: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHigher:{ *:[i64] } (texternalsym:{ *:[i64] }):$lo))
Dependent/multiply used variables: <empty set>
MipsHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHi: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHi:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$lo))
Dependent/multiply used variables: <empty set>
MipsHi: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHi:{ *:[i64] } (tblockaddress:{ *:[i64] }):$lo))
Dependent/multiply used variables: <empty set>
MipsHi: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHi:{ *:[i64] } (tjumptable:{ *:[i64] }):$lo))
Dependent/multiply used variables: <empty set>
MipsHi: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHi:{ *:[i64] } (tconstpool:{ *:[i64] }):$lo))
Dependent/multiply used variables: <empty set>
MipsHi: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHi:{ *:[i64] } (texternalsym:{ *:[i64] }):$lo))
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$lo))
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tblockaddress:{ *:[i64] }):$lo))
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tjumptable:{ *:[i64] }):$lo))
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tconstpool:{ *:[i64] }):$lo))
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tglobaltlsaddr:{ *:[i64] }):$lo))
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (texternalsym:{ *:[i64] }):$lo))
Dependent/multiply used variables: <empty set>
MipsGPRel: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i64] } GPR64:{ *:[i64] }:$gp, (MipsGPRel:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$in))
Dependent/multiply used variables: <empty set>
MipsGPRel: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i64] } GPR64:{ *:[i64] }:$gp, (MipsGPRel:{ *:[i64] } (tconstpool:{ *:[i64] }):$in))
Dependent/multiply used variables: <empty set>
MipsWrapper: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsWrapper: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsWrapper: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsWrapper: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsWrapper: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsWrapper: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
assertsext: Idxs = [ 0 ]
trunc: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
assertzext: Idxs = [ 0 ]
trunc: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
trunc: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
trunc: Idxs = [ 0 ]
shl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
trunc: Idxs = [ 0 ]
srl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
trunc: Idxs = [ 0 ]
sra: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
trunc: Idxs = [ 0 ]
rotr: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
anyext: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
zext: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
sext: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
zext: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
zext: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
sext_inreg: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
bswap: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
subc: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
addc: Idxs = [ 0 0 ]
addc: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
addc: Idxs = [ 0 0 ]
addc: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
atomic_load: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
atomic_load: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
atomic_load: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
atomic_store: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_store: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_store: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_store: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
sext: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
sext: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
sub: Idxs = [ 0 0 ]
sext: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
mul: Idxs = [ 0 0 ]
mul: Idxs = [ 0 0 ]
sext: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsMFHI: Idxs = [ 0 ]
sext: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsMFLO: Idxs = [ 0 ]
sext: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
sext: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
sext: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
srl: Idxs = [ 0 0 ]
sext: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
srl: Idxs = [ 0 0 ]
sext: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
sra: Idxs = [ 0 0 ]
sext: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
sra: Idxs = [ 0 0 ]
sext: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
mul: Idxs = [ 0 0 ]
mul: Idxs = [ 0 0 ]
sext: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
sdiv: Idxs = [ 0 0 ]
sext: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
udiv: Idxs = [ 0 0 ]
sext: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
srem: Idxs = [ 0 0 ]
sext: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
urem: Idxs = [ 0 0 ]
sext: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
mul: Idxs = [ 0 0 ]
mul: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
srl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sra: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sra: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
srl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsJmpLink: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsJmpLink: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
brind: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
br: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
MipsDivRem16: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsDivRemU16: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i32] } CPU16Regs:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$lo))
Dependent/multiply used variables: <empty set>
MipsHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsTlsHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsWrapper: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsWrapper: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
sext_inreg: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sext_inreg: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
sub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
mul: Idxs = [ 0 0 ]
mul: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
sub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
addc: Idxs = [ 0 0 ]
addc: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
adde: Idxs = [ 0 0 ]
adde: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSHLL_DSP: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSHRA_DSP: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSHRL_DSP: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSHLL_DSP: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSHRA_DSP: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSHRL_DSP: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_w_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
intrinsic_wo_chain: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSETCC_DSP: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSETCC_DSP: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSETCC_DSP: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSETCC_DSP: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSETCC_DSP: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSETCC_DSP: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSETCC_DSP: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSETCC_DSP: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSETCC_DSP: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSETCC_DSP: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSETCC_DSP: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSETCC_DSP: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSELECT_CC_DSP: Idxs = [ 0 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSELECT_CC_DSP: Idxs = [ 0 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSELECT_CC_DSP: Idxs = [ 0 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSELECT_CC_DSP: Idxs = [ 0 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSELECT_CC_DSP: Idxs = [ 0 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSELECT_CC_DSP: Idxs = [ 0 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSELECT_CC_DSP: Idxs = [ 0 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSELECT_CC_DSP: Idxs = [ 0 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSELECT_CC_DSP: Idxs = [ 0 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSELECT_CC_DSP: Idxs = [ 0 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSELECT_CC_DSP: Idxs = [ 0 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsSELECT_CC_DSP: Idxs = [ 0 0 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsEXTP: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsEXTP: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsEXTPDP: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsEXTPDP: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsEXTR_W: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsEXTR_W: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsEXTR_R_W: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsEXTR_R_W: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsEXTR_RS_W: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsEXTR_RS_W: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsEXTR_S_H: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsEXTR_S_H: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
fsub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
fsub: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (fadd:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$wd, (fmul:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt))
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (fadd:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$wd, (fmul:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt))
Dependent/multiply used variables: <empty set>
extractelt: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsTruncIntFP: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsFPCmp: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
build_vector: Idxs = [ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
shl: Idxs = [ 0 0 ]
shl: Idxs = [ 0 1 ]
FOUND VARIANTS OF: (shl:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>)))
Dependent/multiply used variables: <empty set>
build_vector: Idxs = [ 0 0 0 0 0 0 0 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
shl: Idxs = [ 0 0 ]
shl: Idxs = [ 0 1 ]
FOUND VARIANTS OF: (shl:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>)))
Dependent/multiply used variables: <empty set>
build_vector: Idxs = [ 0 0 0 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
shl: Idxs = [ 0 0 ]
shl: Idxs = [ 0 1 ]
FOUND VARIANTS OF: (shl:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>)))
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
shl: Idxs = [ 0 0 ]
shl: Idxs = [ 0 1 ]
FOUND VARIANTS OF: (shl:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$wt, (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>))
Dependent/multiply used variables: <empty set>
build_vector: Idxs = [ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
shl: Idxs = [ 0 0 ]
shl: Idxs = [ 0 1 ]
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 1 ]
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 1 0 ]
FOUND VARIANTS OF: (xor:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>))))
Dependent/multiply used variables: <empty set>
build_vector: Idxs = [ 0 0 0 0 0 0 0 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
shl: Idxs = [ 0 0 ]
shl: Idxs = [ 0 1 ]
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 1 ]
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 1 0 ]
FOUND VARIANTS OF: (xor:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>))))
Dependent/multiply used variables: <empty set>
build_vector: Idxs = [ 0 0 0 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
shl: Idxs = [ 0 0 ]
shl: Idxs = [ 0 1 ]
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 1 ]
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 1 0 ]
FOUND VARIANTS OF: (xor:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>))))
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
bitconvert: Idxs = [ 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
shl: Idxs = [ 0 0 ]
shl: Idxs = [ 0 1 ]
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 1 ]
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 1 0 ]
FOUND VARIANTS OF: (xor:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$wt, (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>)))
Dependent/multiply used variables: <empty set>
build_vector: Idxs = [ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
srl: Idxs = [ 0 0 ]
srl: Idxs = [ 0 1 ]
FOUND VARIANTS OF: (srl:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>)))
Dependent/multiply used variables: <empty set>
build_vector: Idxs = [ 0 0 0 0 0 0 0 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
srl: Idxs = [ 0 0 ]
srl: Idxs = [ 0 1 ]
FOUND VARIANTS OF: (srl:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>)))
Dependent/multiply used variables: <empty set>
build_vector: Idxs = [ 0 0 0 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
srl: Idxs = [ 0 0 ]
srl: Idxs = [ 0 1 ]
FOUND VARIANTS OF: (srl:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>)))
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
srl: Idxs = [ 0 0 ]
srl: Idxs = [ 0 1 ]
FOUND VARIANTS OF: (srl:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$wt, (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>))
Dependent/multiply used variables: <empty set>
build_vector: Idxs = [ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
sra: Idxs = [ 0 0 ]
sra: Idxs = [ 0 1 ]
FOUND VARIANTS OF: (sra:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>)))
Dependent/multiply used variables: <empty set>
build_vector: Idxs = [ 0 0 0 0 0 0 0 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
sra: Idxs = [ 0 0 ]
sra: Idxs = [ 0 1 ]
FOUND VARIANTS OF: (sra:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>)))
Dependent/multiply used variables: <empty set>
build_vector: Idxs = [ 0 0 0 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
sra: Idxs = [ 0 0 ]
sra: Idxs = [ 0 1 ]
FOUND VARIANTS OF: (sra:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>)))
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
sra: Idxs = [ 0 0 ]
sra: Idxs = [ 0 1 ]
FOUND VARIANTS OF: (sra:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$wt, (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>))
Dependent/multiply used variables: <empty set>
build_vector: Idxs = [ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
shl: Idxs = [ 0 0 ]
shl: Idxs = [ 0 1 ]
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 1 ]
or: Idxs = [ 0 0 ]
or: Idxs = [ 1 0 ]
FOUND VARIANTS OF: (or:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>))))
Dependent/multiply used variables: <empty set>
build_vector: Idxs = [ 0 0 0 0 0 0 0 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
shl: Idxs = [ 0 0 ]
shl: Idxs = [ 0 1 ]
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 1 ]
or: Idxs = [ 0 0 ]
or: Idxs = [ 1 0 ]
FOUND VARIANTS OF: (or:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>))))
Dependent/multiply used variables: <empty set>
build_vector: Idxs = [ 0 0 0 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
shl: Idxs = [ 0 0 ]
shl: Idxs = [ 0 1 ]
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 1 ]
or: Idxs = [ 0 0 ]
or: Idxs = [ 1 0 ]
FOUND VARIANTS OF: (or:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>))))
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
bitconvert: Idxs = [ 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
shl: Idxs = [ 0 0 ]
shl: Idxs = [ 0 1 ]
or: Idxs = [ 0 0 ]
or: Idxs = [ 0 1 ]
or: Idxs = [ 0 0 ]
or: Idxs = [ 1 0 ]
FOUND VARIANTS OF: (or:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$wt, (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>)))
Dependent/multiply used variables: <empty set>
build_vector: Idxs = [ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
shl: Idxs = [ 0 0 ]
shl: Idxs = [ 0 1 ]
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 1 0 ]
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 1 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 1 ]
and: Idxs = [ 0 2 ]
and: Idxs = [ 0 3 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 1 0 ]
and: Idxs = [ 2 0 ]
and: Idxs = [ 3 0 ]
FOUND VARIANTS OF: (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (xor:{ *:[v16i8] } (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>))), immAllOnesV:{ *:[v16i8] }))
Dependent/multiply used variables: <empty set>
build_vector: Idxs = [ 0 0 0 0 0 0 0 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
shl: Idxs = [ 0 0 ]
shl: Idxs = [ 0 1 ]
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 1 0 ]
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 1 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 1 ]
and: Idxs = [ 0 2 ]
and: Idxs = [ 0 3 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 1 0 ]
and: Idxs = [ 2 0 ]
and: Idxs = [ 3 0 ]
FOUND VARIANTS OF: (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (xor:{ *:[v8i16] } (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>))), immAllOnesV:{ *:[v8i16] }))
Dependent/multiply used variables: <empty set>
build_vector: Idxs = [ 0 0 0 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
shl: Idxs = [ 0 0 ]
shl: Idxs = [ 0 1 ]
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 1 0 ]
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 1 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 1 ]
and: Idxs = [ 0 2 ]
and: Idxs = [ 0 3 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 1 0 ]
and: Idxs = [ 2 0 ]
and: Idxs = [ 3 0 ]
FOUND VARIANTS OF: (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (xor:{ *:[v4i32] } (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>))), immAllOnesV:{ *:[v4i32] }))
Dependent/multiply used variables: <empty set>
bitconvert: Idxs = [ 0 ]
bitconvert: Idxs = [ 0 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
shl: Idxs = [ 0 0 ]
shl: Idxs = [ 0 1 ]
bitconvert: Idxs = [ 0 ]
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 1 0 ]
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 1 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 1 ]
and: Idxs = [ 0 2 ]
and: Idxs = [ 0 3 ]
and: Idxs = [ 0 0 ]
and: Idxs = [ 1 0 ]
and: Idxs = [ 2 0 ]
and: Idxs = [ 3 0 ]
FOUND VARIANTS OF: (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (xor:{ *:[v2i64] } (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$wt, (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>)), (bitconvert:{ *:[v2i64] } immAllOnesV:{ *:[v4i32] })))
Dependent/multiply used variables: <empty set>
MipsVExtractZExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVExtractZExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVExtractZExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVExtractZExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVExtractSExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVExtractSExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVExtractSExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVExtractSExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVExtractZExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVExtractZExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVExtractZExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVExtractZExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vector_extract: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
vector_extract: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVExtractSExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVExtractSExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVExtractSExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVExtractSExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVExtractZExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVExtractZExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVExtractZExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsVExtractZExt: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vector_extract: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
vector_extract: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
vfsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vfsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vfsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vfsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vfsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vfsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vfsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
vfsetcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
MipsHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$lo))
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tblockaddress:{ *:[i32] }):$lo))
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tjumptable:{ *:[i32] }):$lo))
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tconstpool:{ *:[i32] }):$lo))
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tglobaltlsaddr:{ *:[i32] }):$lo))
Dependent/multiply used variables: <empty set>
MipsLo: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (texternalsym:{ *:[i32] }):$lo))
Dependent/multiply used variables: <empty set>
MipsGotHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsGotHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsTlsHi: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsGPRel: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (MipsGPRel:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$in))
Dependent/multiply used variables: <empty set>
MipsGPRel: Idxs = [ 0 ]
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
FOUND VARIANTS OF: (add:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (MipsGPRel:{ *:[i32] } (tconstpool:{ *:[i32] }):$in))
Dependent/multiply used variables: <empty set>
MipsWrapper: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsWrapper: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsWrapper: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsWrapper: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsWrapper: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsWrapper: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
atomic_load: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
atomic_load: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
atomic_load: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
add: Idxs = [ 0 0 ]
add: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
shl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
srl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
srl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
srl: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sra: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
sra: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
subc: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
bswap: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsJmpLink: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsTailCall: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsTailCall: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
fneg: Idxs = [ 0 ]
fneg: Idxs = [ 1 ]
FOUND VARIANTS OF: (fneg:{ *:[f32] } (fadd:{ *:[f32] } (fmul:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft), FGR32Opnd:{ *:[f32] }:$fr))
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
fsub: Idxs = [ 0 0 ]
fneg: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
fadd: Idxs = [ 0 0 ]
fneg: Idxs = [ 0 ]
fneg: Idxs = [ 1 ]
FOUND VARIANTS OF: (fneg:{ *:[f64] } (fadd:{ *:[f64] } (fmul:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft), AFGR64Opnd:{ *:[f64] }:$fr))
Dependent/multiply used variables: <empty set>
fmul: Idxs = [ 0 0 ]
fmul: Idxs = [ 0 0 ]
fsub: Idxs = [ 0 0 ]
fneg: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsMTC1_D64: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
fpround: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fpextend: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fpround: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
fpextend: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsTruncIntFP: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsTruncIntFP: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsTruncIntFP: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
subc: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
select: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
MipsTruncIntFP: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsTruncIntFP: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
and: Idxs = [ 0 0 ]
and: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
xor: Idxs = [ 0 0 ]
xor: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
ld: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
st: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
MipsJmpLink: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsJmpLink: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsTailCall: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
MipsTailCall: Idxs = [ 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
setcc: Idxs = [ 0 0 0 ]
brcond: Idxs = [ 0 0 ]
Dependent/multiply used variables: <empty set>
brcond: Idxs = [ 0 0 ]
  VAR#0: (fadd:{ *:[f32] } (fmul:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft), FGR32Opnd:{ *:[f32] }:$fr)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (fadd:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fr, (fmul:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft))

  VAR#0: (fadd:{ *:[f64] } (fmul:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft), AFGR64Opnd:{ *:[f64] }:$fr)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (fadd:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fr, (fmul:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft))

  VAR#0: (fadd:{ *:[f64] } (fmul:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft), FGR64Opnd:{ *:[f64] }:$fr)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (fadd:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fr, (fmul:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft))

  VAR#0: (fsub:{ *:[f32] } (fpimm:{ *:[f32] })<<P:Predicate_fpimm0>>, (fadd:{ *:[f32] } (fmul:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft), FGR32Opnd:{ *:[f32] }:$fr))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (fsub:{ *:[f32] } (fpimm:{ *:[f32] })<<P:Predicate_fpimm0>>, (fadd:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fr, (fmul:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)))

  VAR#0: (fsub:{ *:[f64] } (fpimm:{ *:[f64] })<<P:Predicate_fpimm0>>, (fadd:{ *:[f64] } (fmul:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft), AFGR64Opnd:{ *:[f64] }:$fr))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (fsub:{ *:[f64] } (fpimm:{ *:[f64] })<<P:Predicate_fpimm0>>, (fadd:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fr, (fmul:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)))

  VAR#0: (fsub:{ *:[f64] } (fpimm:{ *:[f64] })<<P:Predicate_fpimm0>>, (fadd:{ *:[f64] } (fmul:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft), FGR64Opnd:{ *:[f64] }:$fr))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (fsub:{ *:[f64] } (fpimm:{ *:[f64] })<<P:Predicate_fpimm0>>, (fadd:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fr, (fmul:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)))

  VAR#0: (brcond (setcc:{ *:[i32] } (and:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (shl:{ *:[i64] } 1:{ *:[i64] }, (imm:{ *:[i64] })<<P:Predicate_immZExt5_64>>:$p)), 0:{ *:[i64] }, SETEQ:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (brcond (setcc:{ *:[i32] } (and:{ *:[i64] } (shl:{ *:[i64] } 1:{ *:[i64] }, (imm:{ *:[i64] })<<P:Predicate_immZExt5_64>>:$p), GPR64Opnd:{ *:[i64] }:$rs), 0:{ *:[i64] }, SETEQ:{ *:[Other] }), (bb:{ *:[Other] }):$offset)

  VAR#0: (brcond (setcc:{ *:[i32] } (and:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (shl:{ *:[i64] } 4294967296:{ *:[i64] }, (imm:{ *:[i64] })<<P:Predicate_immZExt5_64>>:$p)), 0:{ *:[i64] }, SETEQ:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (brcond (setcc:{ *:[i32] } (and:{ *:[i64] } (shl:{ *:[i64] } 4294967296:{ *:[i64] }, (imm:{ *:[i64] })<<P:Predicate_immZExt5_64>>:$p), GPR64Opnd:{ *:[i64] }:$rs), 0:{ *:[i64] }, SETEQ:{ *:[Other] }), (bb:{ *:[Other] }):$offset)

  VAR#0: (brcond (setcc:{ *:[i32] } (and:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (shl:{ *:[i64] } 1:{ *:[i64] }, (imm:{ *:[i64] })<<P:Predicate_immZExt5_64>>:$p)), 0:{ *:[i64] }, SETNE:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (brcond (setcc:{ *:[i32] } (and:{ *:[i64] } (shl:{ *:[i64] } 1:{ *:[i64] }, (imm:{ *:[i64] })<<P:Predicate_immZExt5_64>>:$p), GPR64Opnd:{ *:[i64] }:$rs), 0:{ *:[i64] }, SETNE:{ *:[Other] }), (bb:{ *:[Other] }):$offset)

  VAR#0: (brcond (setcc:{ *:[i32] } (and:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (shl:{ *:[i64] } 4294967296:{ *:[i64] }, (imm:{ *:[i64] })<<P:Predicate_immZExt5_64>>:$p)), 0:{ *:[i64] }, SETNE:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (brcond (setcc:{ *:[i32] } (and:{ *:[i64] } (shl:{ *:[i64] } 4294967296:{ *:[i64] }, (imm:{ *:[i64] })<<P:Predicate_immZExt5_64>>:$p), GPR64Opnd:{ *:[i64] }:$rs), 0:{ *:[i64] }, SETNE:{ *:[Other] }), (bb:{ *:[Other] }):$offset)

  VAR#0: (add:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm5:{ *:[v16i8] }:$imm)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[v16i8] } vsplati8_uimm5:{ *:[v16i8] }:$imm, MSA128BOpnd:{ *:[v16i8] }:$ws)

  VAR#0: (add:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_uimm5:{ *:[v8i16] }:$imm)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[v8i16] } vsplati16_uimm5:{ *:[v8i16] }:$imm, MSA128HOpnd:{ *:[v8i16] }:$ws)

  VAR#0: (add:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$imm)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[v4i32] } vsplati32_uimm5:{ *:[v4i32] }:$imm, MSA128WOpnd:{ *:[v4i32] }:$ws)

  VAR#0: (add:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_uimm5:{ *:[v2i64] }:$imm)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[v2i64] } vsplati64_uimm5:{ *:[v2i64] }:$imm, MSA128DOpnd:{ *:[v2i64] }:$ws)

  VAR#0: (and:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm8:{ *:[v16i8] }:$u8)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (and:{ *:[v16i8] } vsplati8_uimm8:{ *:[v16i8] }:$u8, MSA128BOpnd:{ *:[v16i8] }:$ws)

  VAR#0: (and:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, (xor:{ *:[v16i8] } (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128BOpnd:{ *:[v16i8] }:$wt), immAllOnesV:{ *:[v16i8] }))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (and:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, (xor:{ *:[v16i8] } immAllOnesV:{ *:[v16i8] }, (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128BOpnd:{ *:[v16i8] }:$wt)))
  VAR#2: (and:{ *:[v16i8] } (xor:{ *:[v16i8] } (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128BOpnd:{ *:[v16i8] }:$wt), immAllOnesV:{ *:[v16i8] }), MSA128BOpnd:{ *:[v16i8] }:$ws)
  VAR#3: (and:{ *:[v16i8] } (xor:{ *:[v16i8] } immAllOnesV:{ *:[v16i8] }, (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128BOpnd:{ *:[v16i8] }:$wt)), MSA128BOpnd:{ *:[v16i8] }:$ws)

  VAR#0: (and:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, (xor:{ *:[v8i16] } (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128HOpnd:{ *:[v8i16] }:$wt), immAllOnesV:{ *:[v8i16] }))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (and:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, (xor:{ *:[v8i16] } immAllOnesV:{ *:[v8i16] }, (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128HOpnd:{ *:[v8i16] }:$wt)))
  VAR#2: (and:{ *:[v8i16] } (xor:{ *:[v8i16] } (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128HOpnd:{ *:[v8i16] }:$wt), immAllOnesV:{ *:[v8i16] }), MSA128HOpnd:{ *:[v8i16] }:$ws)
  VAR#3: (and:{ *:[v8i16] } (xor:{ *:[v8i16] } immAllOnesV:{ *:[v8i16] }, (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128HOpnd:{ *:[v8i16] }:$wt)), MSA128HOpnd:{ *:[v8i16] }:$ws)

  VAR#0: (and:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, (xor:{ *:[v4i32] } (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128WOpnd:{ *:[v4i32] }:$wt), immAllOnesV:{ *:[v4i32] }))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (and:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, (xor:{ *:[v4i32] } immAllOnesV:{ *:[v4i32] }, (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128WOpnd:{ *:[v4i32] }:$wt)))
  VAR#2: (and:{ *:[v4i32] } (xor:{ *:[v4i32] } (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128WOpnd:{ *:[v4i32] }:$wt), immAllOnesV:{ *:[v4i32] }), MSA128WOpnd:{ *:[v4i32] }:$ws)
  VAR#3: (and:{ *:[v4i32] } (xor:{ *:[v4i32] } immAllOnesV:{ *:[v4i32] }, (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128WOpnd:{ *:[v4i32] }:$wt)), MSA128WOpnd:{ *:[v4i32] }:$ws)

  VAR#0: (and:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, (xor:{ *:[v2i64] } (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, MSA128DOpnd:{ *:[v2i64] }:$wt), (bitconvert:{ *:[v2i64] } immAllOnesV:{ *:[v4i32] })))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (and:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, (xor:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } immAllOnesV:{ *:[v4i32] }), (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, MSA128DOpnd:{ *:[v2i64] }:$wt)))
  VAR#2: (and:{ *:[v2i64] } (xor:{ *:[v2i64] } (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, MSA128DOpnd:{ *:[v2i64] }:$wt), (bitconvert:{ *:[v2i64] } immAllOnesV:{ *:[v4i32] })), MSA128DOpnd:{ *:[v2i64] }:$ws)
  VAR#3: (and:{ *:[v2i64] } (xor:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } immAllOnesV:{ *:[v4i32] }), (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, MSA128DOpnd:{ *:[v2i64] }:$wt)), MSA128DOpnd:{ *:[v2i64] }:$ws)

  VAR#0: (and:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplat_uimm_inv_pow2:{ *:[v16i8] }:$m)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (and:{ *:[v16i8] } vsplat_uimm_inv_pow2:{ *:[v16i8] }:$m, MSA128BOpnd:{ *:[v16i8] }:$ws)

  VAR#0: (and:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplat_uimm_inv_pow2:{ *:[v8i16] }:$m)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (and:{ *:[v8i16] } vsplat_uimm_inv_pow2:{ *:[v8i16] }:$m, MSA128HOpnd:{ *:[v8i16] }:$ws)

  VAR#0: (and:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplat_uimm_inv_pow2:{ *:[v4i32] }:$m)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (and:{ *:[v4i32] } vsplat_uimm_inv_pow2:{ *:[v4i32] }:$m, MSA128WOpnd:{ *:[v4i32] }:$ws)

  VAR#0: (and:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplat_uimm_inv_pow2:{ *:[v2i64] }:$m)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (and:{ *:[v2i64] } vsplat_uimm_inv_pow2:{ *:[v2i64] }:$m, MSA128DOpnd:{ *:[v2i64] }:$ws)

  VAR#0: (xor:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128BOpnd:{ *:[v16i8] }:$wt))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (xor:{ *:[v16i8] } (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128BOpnd:{ *:[v16i8] }:$wt), MSA128BOpnd:{ *:[v16i8] }:$ws)

  VAR#0: (xor:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128HOpnd:{ *:[v8i16] }:$wt))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (xor:{ *:[v8i16] } (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128HOpnd:{ *:[v8i16] }:$wt), MSA128HOpnd:{ *:[v8i16] }:$ws)

  VAR#0: (xor:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128WOpnd:{ *:[v4i32] }:$wt))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (xor:{ *:[v4i32] } (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128WOpnd:{ *:[v4i32] }:$wt), MSA128WOpnd:{ *:[v4i32] }:$ws)

  VAR#0: (xor:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, MSA128DOpnd:{ *:[v2i64] }:$wt))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (xor:{ *:[v2i64] } (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, MSA128DOpnd:{ *:[v2i64] }:$wt), MSA128DOpnd:{ *:[v2i64] }:$ws)

  VAR#0: (xor:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplat_uimm_pow2:{ *:[v16i8] }:$m)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (xor:{ *:[v16i8] } vsplat_uimm_pow2:{ *:[v16i8] }:$m, MSA128BOpnd:{ *:[v16i8] }:$ws)

  VAR#0: (xor:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplat_uimm_pow2:{ *:[v8i16] }:$m)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (xor:{ *:[v8i16] } vsplat_uimm_pow2:{ *:[v8i16] }:$m, MSA128HOpnd:{ *:[v8i16] }:$ws)

  VAR#0: (xor:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplat_uimm_pow2:{ *:[v4i32] }:$m)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (xor:{ *:[v4i32] } vsplat_uimm_pow2:{ *:[v4i32] }:$m, MSA128WOpnd:{ *:[v4i32] }:$ws)

  VAR#0: (xor:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplat_uimm_pow2:{ *:[v2i64] }:$m)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (xor:{ *:[v2i64] } vsplat_uimm_pow2:{ *:[v2i64] }:$m, MSA128DOpnd:{ *:[v2i64] }:$ws)

  VAR#0: (or:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128BOpnd:{ *:[v16i8] }:$wt))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (or:{ *:[v16i8] } (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128BOpnd:{ *:[v16i8] }:$wt), MSA128BOpnd:{ *:[v16i8] }:$ws)

  VAR#0: (or:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128HOpnd:{ *:[v8i16] }:$wt))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (or:{ *:[v8i16] } (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128HOpnd:{ *:[v8i16] }:$wt), MSA128HOpnd:{ *:[v8i16] }:$ws)

  VAR#0: (or:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128WOpnd:{ *:[v4i32] }:$wt))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (or:{ *:[v4i32] } (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128WOpnd:{ *:[v4i32] }:$wt), MSA128WOpnd:{ *:[v4i32] }:$ws)

  VAR#0: (or:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, MSA128DOpnd:{ *:[v2i64] }:$wt))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (or:{ *:[v2i64] } (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, MSA128DOpnd:{ *:[v2i64] }:$wt), MSA128DOpnd:{ *:[v2i64] }:$ws)

  VAR#0: (or:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplat_uimm_pow2:{ *:[v16i8] }:$m)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (or:{ *:[v16i8] } vsplat_uimm_pow2:{ *:[v16i8] }:$m, MSA128BOpnd:{ *:[v16i8] }:$ws)

  VAR#0: (or:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplat_uimm_pow2:{ *:[v8i16] }:$m)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (or:{ *:[v8i16] } vsplat_uimm_pow2:{ *:[v8i16] }:$m, MSA128HOpnd:{ *:[v8i16] }:$ws)

  VAR#0: (or:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplat_uimm_pow2:{ *:[v4i32] }:$m)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (or:{ *:[v4i32] } vsplat_uimm_pow2:{ *:[v4i32] }:$m, MSA128WOpnd:{ *:[v4i32] }:$ws)

  VAR#0: (or:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplat_uimm_pow2:{ *:[v2i64] }:$m)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (or:{ *:[v2i64] } vsplat_uimm_pow2:{ *:[v2i64] }:$m, MSA128DOpnd:{ *:[v2i64] }:$ws)

  VAR#0: (fmul:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws, (fexp2:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$wt))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (fmul:{ *:[v4f32] } (fexp2:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$wt), MSA128WOpnd:{ *:[v4f32] }:$ws)

  VAR#0: (fmul:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws, (fexp2:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$wt))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (fmul:{ *:[v2f64] } (fexp2:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$wt), MSA128DOpnd:{ *:[v2f64] }:$ws)

  VAR#0: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, (shl:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immZExt2Lsa>>:$sa))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i32] } (shl:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immZExt2Lsa>>:$sa), GPR32Opnd:{ *:[i32] }:$rt)

  VAR#0: (add:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rt, (shl:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immZExt2Lsa>>:$sa))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i64] } (shl:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immZExt2Lsa>>:$sa), GPR64Opnd:{ *:[i64] }:$rt)

  VAR#0: (add:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, (mul:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[v16i8] } (mul:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt), MSA128BOpnd:{ *:[v16i8] }:$wd_in)

  VAR#0: (add:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, (mul:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[v8i16] } (mul:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt), MSA128HOpnd:{ *:[v8i16] }:$wd_in)

  VAR#0: (add:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, (mul:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[v4i32] } (mul:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt), MSA128WOpnd:{ *:[v4i32] }:$wd_in)

  VAR#0: (add:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, (mul:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[v2i64] } (mul:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt), MSA128DOpnd:{ *:[v2i64] }:$wd_in)

  VAR#0: (smax:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_simm5:{ *:[v16i8] }:$imm)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (smax:{ *:[v16i8] } vsplati8_simm5:{ *:[v16i8] }:$imm, MSA128BOpnd:{ *:[v16i8] }:$ws)

  VAR#0: (smax:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_simm5:{ *:[v8i16] }:$imm)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (smax:{ *:[v8i16] } vsplati16_simm5:{ *:[v8i16] }:$imm, MSA128HOpnd:{ *:[v8i16] }:$ws)

  VAR#0: (smax:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_simm5:{ *:[v4i32] }:$imm)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (smax:{ *:[v4i32] } vsplati32_simm5:{ *:[v4i32] }:$imm, MSA128WOpnd:{ *:[v4i32] }:$ws)

  VAR#0: (smax:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_simm5:{ *:[v2i64] }:$imm)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (smax:{ *:[v2i64] } vsplati64_simm5:{ *:[v2i64] }:$imm, MSA128DOpnd:{ *:[v2i64] }:$ws)

  VAR#0: (umax:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm5:{ *:[v16i8] }:$imm)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (umax:{ *:[v16i8] } vsplati8_uimm5:{ *:[v16i8] }:$imm, MSA128BOpnd:{ *:[v16i8] }:$ws)

  VAR#0: (umax:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_uimm5:{ *:[v8i16] }:$imm)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (umax:{ *:[v8i16] } vsplati16_uimm5:{ *:[v8i16] }:$imm, MSA128HOpnd:{ *:[v8i16] }:$ws)

  VAR#0: (umax:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$imm)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (umax:{ *:[v4i32] } vsplati32_uimm5:{ *:[v4i32] }:$imm, MSA128WOpnd:{ *:[v4i32] }:$ws)

  VAR#0: (umax:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_uimm5:{ *:[v2i64] }:$imm)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (umax:{ *:[v2i64] } vsplati64_uimm5:{ *:[v2i64] }:$imm, MSA128DOpnd:{ *:[v2i64] }:$ws)

  VAR#0: (smin:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_simm5:{ *:[v16i8] }:$imm)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (smin:{ *:[v16i8] } vsplati8_simm5:{ *:[v16i8] }:$imm, MSA128BOpnd:{ *:[v16i8] }:$ws)

  VAR#0: (smin:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_simm5:{ *:[v8i16] }:$imm)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (smin:{ *:[v8i16] } vsplati16_simm5:{ *:[v8i16] }:$imm, MSA128HOpnd:{ *:[v8i16] }:$ws)

  VAR#0: (smin:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_simm5:{ *:[v4i32] }:$imm)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (smin:{ *:[v4i32] } vsplati32_simm5:{ *:[v4i32] }:$imm, MSA128WOpnd:{ *:[v4i32] }:$ws)

  VAR#0: (smin:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_simm5:{ *:[v2i64] }:$imm)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (smin:{ *:[v2i64] } vsplati64_simm5:{ *:[v2i64] }:$imm, MSA128DOpnd:{ *:[v2i64] }:$ws)

  VAR#0: (umin:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm5:{ *:[v16i8] }:$imm)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (umin:{ *:[v16i8] } vsplati8_uimm5:{ *:[v16i8] }:$imm, MSA128BOpnd:{ *:[v16i8] }:$ws)

  VAR#0: (umin:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_uimm5:{ *:[v8i16] }:$imm)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (umin:{ *:[v8i16] } vsplati16_uimm5:{ *:[v8i16] }:$imm, MSA128HOpnd:{ *:[v8i16] }:$ws)

  VAR#0: (umin:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$imm)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (umin:{ *:[v4i32] } vsplati32_uimm5:{ *:[v4i32] }:$imm, MSA128WOpnd:{ *:[v4i32] }:$ws)

  VAR#0: (umin:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_uimm5:{ *:[v2i64] }:$imm)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (umin:{ *:[v2i64] } vsplati64_uimm5:{ *:[v2i64] }:$imm, MSA128DOpnd:{ *:[v2i64] }:$ws)

  VAR#0: (MipsVNOR:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm8:{ *:[v16i8] }:$u8)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (MipsVNOR:{ *:[v16i8] } vsplati8_uimm8:{ *:[v16i8] }:$u8, MSA128BOpnd:{ *:[v16i8] }:$ws)

  VAR#0: (or:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm8:{ *:[v16i8] }:$u8)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (or:{ *:[v16i8] } vsplati8_uimm8:{ *:[v16i8] }:$u8, MSA128BOpnd:{ *:[v16i8] }:$ws)

  VAR#0: (MipsVSHF:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] } GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt), (build_vector:{ *:[v4i32] }))), MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$ws)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (MipsVSHF:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] }), (build_vector:{ *:[v4i32] } GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt))), MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$ws)

  VAR#0: (xor:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm8:{ *:[v16i8] }:$u8)
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (xor:{ *:[v16i8] } vsplati8_uimm8:{ *:[v16i8] }:$u8, MSA128BOpnd:{ *:[v16i8] }:$ws)

  VAR#0: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i32] } (MipsLo:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$lo), GPR32Opnd:{ *:[i32] }:$hi)

  VAR#0: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tblockaddress:{ *:[i32] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i32] } (MipsLo:{ *:[i32] } (tblockaddress:{ *:[i32] }):$lo), GPR32Opnd:{ *:[i32] }:$hi)

  VAR#0: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tjumptable:{ *:[i32] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i32] } (MipsLo:{ *:[i32] } (tjumptable:{ *:[i32] }):$lo), GPR32Opnd:{ *:[i32] }:$hi)

  VAR#0: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tconstpool:{ *:[i32] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i32] } (MipsLo:{ *:[i32] } (tconstpool:{ *:[i32] }):$lo), GPR32Opnd:{ *:[i32] }:$hi)

  VAR#0: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tglobaltlsaddr:{ *:[i32] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i32] } (MipsLo:{ *:[i32] } (tglobaltlsaddr:{ *:[i32] }):$lo), GPR32Opnd:{ *:[i32] }:$hi)

  VAR#0: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (texternalsym:{ *:[i32] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i32] } (MipsLo:{ *:[i32] } (texternalsym:{ *:[i32] }):$lo), GPR32Opnd:{ *:[i32] }:$hi)

  VAR#0: (add:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (MipsGPRel:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$in))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i32] } (MipsGPRel:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$in), GPR32:{ *:[i32] }:$gp)

  VAR#0: (add:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (MipsGPRel:{ *:[i32] } (tconstpool:{ *:[i32] }):$in))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i32] } (MipsGPRel:{ *:[i32] } (tconstpool:{ *:[i32] }):$in), GPR32:{ *:[i32] }:$gp)

  VAR#0: (fneg:{ *:[f32] } (fadd:{ *:[f32] } (fmul:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft), FGR32Opnd:{ *:[f32] }:$fr))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (fneg:{ *:[f32] } (fadd:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fr, (fmul:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)))

  VAR#0: (fneg:{ *:[f64] } (fadd:{ *:[f64] } (fmul:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft), AFGR64Opnd:{ *:[f64] }:$fr))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (fneg:{ *:[f64] } (fadd:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fr, (fmul:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)))

  VAR#0: (fneg:{ *:[f64] } (fadd:{ *:[f64] } (fmul:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft), FGR64Opnd:{ *:[f64] }:$fr))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (fneg:{ *:[f64] } (fadd:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fr, (fmul:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)))

  VAR#0: (add:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i64] } (MipsLo:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$lo), GPR64Opnd:{ *:[i64] }:$hi)

  VAR#0: (add:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tblockaddress:{ *:[i64] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i64] } (MipsLo:{ *:[i64] } (tblockaddress:{ *:[i64] }):$lo), GPR64Opnd:{ *:[i64] }:$hi)

  VAR#0: (add:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tjumptable:{ *:[i64] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i64] } (MipsLo:{ *:[i64] } (tjumptable:{ *:[i64] }):$lo), GPR64Opnd:{ *:[i64] }:$hi)

  VAR#0: (add:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tconstpool:{ *:[i64] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i64] } (MipsLo:{ *:[i64] } (tconstpool:{ *:[i64] }):$lo), GPR64Opnd:{ *:[i64] }:$hi)

  VAR#0: (add:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tglobaltlsaddr:{ *:[i64] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i64] } (MipsLo:{ *:[i64] } (tglobaltlsaddr:{ *:[i64] }):$lo), GPR64Opnd:{ *:[i64] }:$hi)

  VAR#0: (add:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (texternalsym:{ *:[i64] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i64] } (MipsLo:{ *:[i64] } (texternalsym:{ *:[i64] }):$lo), GPR64Opnd:{ *:[i64] }:$hi)

  VAR#0: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHigher:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i64] } (MipsHigher:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)

  VAR#0: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHigher:{ *:[i64] } (tblockaddress:{ *:[i64] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i64] } (MipsHigher:{ *:[i64] } (tblockaddress:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)

  VAR#0: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHigher:{ *:[i64] } (tjumptable:{ *:[i64] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i64] } (MipsHigher:{ *:[i64] } (tjumptable:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)

  VAR#0: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHigher:{ *:[i64] } (tconstpool:{ *:[i64] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i64] } (MipsHigher:{ *:[i64] } (tconstpool:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)

  VAR#0: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHigher:{ *:[i64] } (texternalsym:{ *:[i64] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i64] } (MipsHigher:{ *:[i64] } (texternalsym:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)

  VAR#0: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHi:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i64] } (MipsHi:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)

  VAR#0: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHi:{ *:[i64] } (tblockaddress:{ *:[i64] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i64] } (MipsHi:{ *:[i64] } (tblockaddress:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)

  VAR#0: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHi:{ *:[i64] } (tjumptable:{ *:[i64] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i64] } (MipsHi:{ *:[i64] } (tjumptable:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)

  VAR#0: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHi:{ *:[i64] } (tconstpool:{ *:[i64] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i64] } (MipsHi:{ *:[i64] } (tconstpool:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)

  VAR#0: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHi:{ *:[i64] } (texternalsym:{ *:[i64] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i64] } (MipsHi:{ *:[i64] } (texternalsym:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)

  VAR#0: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i64] } (MipsLo:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)

  VAR#0: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tblockaddress:{ *:[i64] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i64] } (MipsLo:{ *:[i64] } (tblockaddress:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)

  VAR#0: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tjumptable:{ *:[i64] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i64] } (MipsLo:{ *:[i64] } (tjumptable:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)

  VAR#0: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tconstpool:{ *:[i64] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i64] } (MipsLo:{ *:[i64] } (tconstpool:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)

  VAR#0: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tglobaltlsaddr:{ *:[i64] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i64] } (MipsLo:{ *:[i64] } (tglobaltlsaddr:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)

  VAR#0: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (texternalsym:{ *:[i64] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i64] } (MipsLo:{ *:[i64] } (texternalsym:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)

  VAR#0: (add:{ *:[i64] } GPR64:{ *:[i64] }:$gp, (MipsGPRel:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$in))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i64] } (MipsGPRel:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$in), GPR64:{ *:[i64] }:$gp)

  VAR#0: (add:{ *:[i64] } GPR64:{ *:[i64] }:$gp, (MipsGPRel:{ *:[i64] } (tconstpool:{ *:[i64] }):$in))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i64] } (MipsGPRel:{ *:[i64] } (tconstpool:{ *:[i64] }):$in), GPR64:{ *:[i64] }:$gp)

  VAR#0: (add:{ *:[i32] } CPU16Regs:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i32] } (MipsLo:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$lo), CPU16Regs:{ *:[i32] }:$hi)

  VAR#0: (fadd:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$wd, (fmul:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (fadd:{ *:[v4f32] } (fmul:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt), MSA128WOpnd:{ *:[v4f32] }:$wd)

  VAR#0: (fadd:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$wd, (fmul:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (fadd:{ *:[v2f64] } (fmul:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt), MSA128DOpnd:{ *:[v2f64] }:$wd)

  VAR#0: (shl:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>)))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (shl:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (and:{ *:[v16i8] } (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>), v16i8:{ *:[v16i8] }:$wt))

  VAR#0: (shl:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>)))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (shl:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (and:{ *:[v8i16] } (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>), v8i16:{ *:[v8i16] }:$wt))

  VAR#0: (shl:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>)))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (shl:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>), v4i32:{ *:[v4i32] }:$wt))

  VAR#0: (shl:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$wt, (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (shl:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (and:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>, v2i64:{ *:[v2i64] }:$wt))

  VAR#0: (xor:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>))))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (xor:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>), v16i8:{ *:[v16i8] }:$wt)))
  VAR#2: (xor:{ *:[v16i8] } (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>))), v16i8:{ *:[v16i8] }:$ws)
  VAR#3: (xor:{ *:[v16i8] } (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>), v16i8:{ *:[v16i8] }:$wt)), v16i8:{ *:[v16i8] }:$ws)

  VAR#0: (xor:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>))))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (xor:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>), v8i16:{ *:[v8i16] }:$wt)))
  VAR#2: (xor:{ *:[v8i16] } (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>))), v8i16:{ *:[v8i16] }:$ws)
  VAR#3: (xor:{ *:[v8i16] } (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>), v8i16:{ *:[v8i16] }:$wt)), v8i16:{ *:[v8i16] }:$ws)

  VAR#0: (xor:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>))))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (xor:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>), v4i32:{ *:[v4i32] }:$wt)))
  VAR#2: (xor:{ *:[v4i32] } (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>))), v4i32:{ *:[v4i32] }:$ws)
  VAR#3: (xor:{ *:[v4i32] } (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>), v4i32:{ *:[v4i32] }:$wt)), v4i32:{ *:[v4i32] }:$ws)

  VAR#0: (xor:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$wt, (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>)))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (xor:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>, v2i64:{ *:[v2i64] }:$wt)))
  VAR#2: (xor:{ *:[v2i64] } (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$wt, (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>)), v2i64:{ *:[v2i64] }:$ws)
  VAR#3: (xor:{ *:[v2i64] } (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>, v2i64:{ *:[v2i64] }:$wt)), v2i64:{ *:[v2i64] }:$ws)

  VAR#0: (srl:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>)))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (srl:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (and:{ *:[v16i8] } (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>), v16i8:{ *:[v16i8] }:$wt))

  VAR#0: (srl:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>)))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (srl:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (and:{ *:[v8i16] } (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>), v8i16:{ *:[v8i16] }:$wt))

  VAR#0: (srl:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>)))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (srl:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>), v4i32:{ *:[v4i32] }:$wt))

  VAR#0: (srl:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$wt, (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (srl:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (and:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>, v2i64:{ *:[v2i64] }:$wt))

  VAR#0: (sra:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>)))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (sra:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (and:{ *:[v16i8] } (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>), v16i8:{ *:[v16i8] }:$wt))

  VAR#0: (sra:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>)))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (sra:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (and:{ *:[v8i16] } (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>), v8i16:{ *:[v8i16] }:$wt))

  VAR#0: (sra:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>)))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (sra:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>), v4i32:{ *:[v4i32] }:$wt))

  VAR#0: (sra:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$wt, (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (sra:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (and:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>, v2i64:{ *:[v2i64] }:$wt))

  VAR#0: (or:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>))))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (or:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>), v16i8:{ *:[v16i8] }:$wt)))
  VAR#2: (or:{ *:[v16i8] } (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>))), v16i8:{ *:[v16i8] }:$ws)
  VAR#3: (or:{ *:[v16i8] } (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>), v16i8:{ *:[v16i8] }:$wt)), v16i8:{ *:[v16i8] }:$ws)

  VAR#0: (or:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>))))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (or:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>), v8i16:{ *:[v8i16] }:$wt)))
  VAR#2: (or:{ *:[v8i16] } (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>))), v8i16:{ *:[v8i16] }:$ws)
  VAR#3: (or:{ *:[v8i16] } (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>), v8i16:{ *:[v8i16] }:$wt)), v8i16:{ *:[v8i16] }:$ws)

  VAR#0: (or:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>))))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (or:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>), v4i32:{ *:[v4i32] }:$wt)))
  VAR#2: (or:{ *:[v4i32] } (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>))), v4i32:{ *:[v4i32] }:$ws)
  VAR#3: (or:{ *:[v4i32] } (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>), v4i32:{ *:[v4i32] }:$wt)), v4i32:{ *:[v4i32] }:$ws)

  VAR#0: (or:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$wt, (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>)))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (or:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>, v2i64:{ *:[v2i64] }:$wt)))
  VAR#2: (or:{ *:[v2i64] } (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$wt, (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>)), v2i64:{ *:[v2i64] }:$ws)
  VAR#3: (or:{ *:[v2i64] } (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>, v2i64:{ *:[v2i64] }:$wt)), v2i64:{ *:[v2i64] }:$ws)

  VAR#0: (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (xor:{ *:[v16i8] } (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>))), immAllOnesV:{ *:[v16i8] }))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (xor:{ *:[v16i8] } (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>), v16i8:{ *:[v16i8] }:$wt)), immAllOnesV:{ *:[v16i8] }))
  VAR#2: (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (xor:{ *:[v16i8] } immAllOnesV:{ *:[v16i8] }, (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>)))))
  VAR#3: (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (xor:{ *:[v16i8] } immAllOnesV:{ *:[v16i8] }, (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>), v16i8:{ *:[v16i8] }:$wt))))
  VAR#4: (and:{ *:[v16i8] } (xor:{ *:[v16i8] } (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>))), immAllOnesV:{ *:[v16i8] }), v16i8:{ *:[v16i8] }:$ws)
  VAR#5: (and:{ *:[v16i8] } (xor:{ *:[v16i8] } (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>), v16i8:{ *:[v16i8] }:$wt)), immAllOnesV:{ *:[v16i8] }), v16i8:{ *:[v16i8] }:$ws)
  VAR#6: (and:{ *:[v16i8] } (xor:{ *:[v16i8] } immAllOnesV:{ *:[v16i8] }, (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>)))), v16i8:{ *:[v16i8] }:$ws)
  VAR#7: (and:{ *:[v16i8] } (xor:{ *:[v16i8] } immAllOnesV:{ *:[v16i8] }, (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>), v16i8:{ *:[v16i8] }:$wt))), v16i8:{ *:[v16i8] }:$ws)

  VAR#0: (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (xor:{ *:[v8i16] } (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>))), immAllOnesV:{ *:[v8i16] }))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (xor:{ *:[v8i16] } (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>), v8i16:{ *:[v8i16] }:$wt)), immAllOnesV:{ *:[v8i16] }))
  VAR#2: (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (xor:{ *:[v8i16] } immAllOnesV:{ *:[v8i16] }, (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>)))))
  VAR#3: (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (xor:{ *:[v8i16] } immAllOnesV:{ *:[v8i16] }, (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>), v8i16:{ *:[v8i16] }:$wt))))
  VAR#4: (and:{ *:[v8i16] } (xor:{ *:[v8i16] } (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>))), immAllOnesV:{ *:[v8i16] }), v8i16:{ *:[v8i16] }:$ws)
  VAR#5: (and:{ *:[v8i16] } (xor:{ *:[v8i16] } (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>), v8i16:{ *:[v8i16] }:$wt)), immAllOnesV:{ *:[v8i16] }), v8i16:{ *:[v8i16] }:$ws)
  VAR#6: (and:{ *:[v8i16] } (xor:{ *:[v8i16] } immAllOnesV:{ *:[v8i16] }, (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>)))), v8i16:{ *:[v8i16] }:$ws)
  VAR#7: (and:{ *:[v8i16] } (xor:{ *:[v8i16] } immAllOnesV:{ *:[v8i16] }, (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>), v8i16:{ *:[v8i16] }:$wt))), v8i16:{ *:[v8i16] }:$ws)

  VAR#0: (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (xor:{ *:[v4i32] } (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>))), immAllOnesV:{ *:[v4i32] }))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (xor:{ *:[v4i32] } (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>), v4i32:{ *:[v4i32] }:$wt)), immAllOnesV:{ *:[v4i32] }))
  VAR#2: (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (xor:{ *:[v4i32] } immAllOnesV:{ *:[v4i32] }, (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>)))))
  VAR#3: (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (xor:{ *:[v4i32] } immAllOnesV:{ *:[v4i32] }, (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>), v4i32:{ *:[v4i32] }:$wt))))
  VAR#4: (and:{ *:[v4i32] } (xor:{ *:[v4i32] } (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>))), immAllOnesV:{ *:[v4i32] }), v4i32:{ *:[v4i32] }:$ws)
  VAR#5: (and:{ *:[v4i32] } (xor:{ *:[v4i32] } (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>), v4i32:{ *:[v4i32] }:$wt)), immAllOnesV:{ *:[v4i32] }), v4i32:{ *:[v4i32] }:$ws)
  VAR#6: (and:{ *:[v4i32] } (xor:{ *:[v4i32] } immAllOnesV:{ *:[v4i32] }, (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>)))), v4i32:{ *:[v4i32] }:$ws)
  VAR#7: (and:{ *:[v4i32] } (xor:{ *:[v4i32] } immAllOnesV:{ *:[v4i32] }, (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>), v4i32:{ *:[v4i32] }:$wt))), v4i32:{ *:[v4i32] }:$ws)

  VAR#0: (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (xor:{ *:[v2i64] } (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$wt, (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>)), (bitconvert:{ *:[v2i64] } immAllOnesV:{ *:[v4i32] })))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (xor:{ *:[v2i64] } (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>, v2i64:{ *:[v2i64] }:$wt)), (bitconvert:{ *:[v2i64] } immAllOnesV:{ *:[v4i32] })))
  VAR#2: (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (xor:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } immAllOnesV:{ *:[v4i32] }), (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$wt, (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>))))
  VAR#3: (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (xor:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } immAllOnesV:{ *:[v4i32] }), (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>, v2i64:{ *:[v2i64] }:$wt))))
  VAR#4: (and:{ *:[v2i64] } (xor:{ *:[v2i64] } (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$wt, (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>)), (bitconvert:{ *:[v2i64] } immAllOnesV:{ *:[v4i32] })), v2i64:{ *:[v2i64] }:$ws)
  VAR#5: (and:{ *:[v2i64] } (xor:{ *:[v2i64] } (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>, v2i64:{ *:[v2i64] }:$wt)), (bitconvert:{ *:[v2i64] } immAllOnesV:{ *:[v4i32] })), v2i64:{ *:[v2i64] }:$ws)
  VAR#6: (and:{ *:[v2i64] } (xor:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } immAllOnesV:{ *:[v4i32] }), (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$wt, (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>))), v2i64:{ *:[v2i64] }:$ws)
  VAR#7: (and:{ *:[v2i64] } (xor:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } immAllOnesV:{ *:[v4i32] }), (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>, v2i64:{ *:[v2i64] }:$wt))), v2i64:{ *:[v2i64] }:$ws)

  VAR#0: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i32] } (MipsLo:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$lo), GPR32Opnd:{ *:[i32] }:$hi)

  VAR#0: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tblockaddress:{ *:[i32] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i32] } (MipsLo:{ *:[i32] } (tblockaddress:{ *:[i32] }):$lo), GPR32Opnd:{ *:[i32] }:$hi)

  VAR#0: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tjumptable:{ *:[i32] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i32] } (MipsLo:{ *:[i32] } (tjumptable:{ *:[i32] }):$lo), GPR32Opnd:{ *:[i32] }:$hi)

  VAR#0: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tconstpool:{ *:[i32] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i32] } (MipsLo:{ *:[i32] } (tconstpool:{ *:[i32] }):$lo), GPR32Opnd:{ *:[i32] }:$hi)

  VAR#0: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tglobaltlsaddr:{ *:[i32] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i32] } (MipsLo:{ *:[i32] } (tglobaltlsaddr:{ *:[i32] }):$lo), GPR32Opnd:{ *:[i32] }:$hi)

  VAR#0: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (texternalsym:{ *:[i32] }):$lo))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i32] } (MipsLo:{ *:[i32] } (texternalsym:{ *:[i32] }):$lo), GPR32Opnd:{ *:[i32] }:$hi)

  VAR#0: (add:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (MipsGPRel:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$in))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i32] } (MipsGPRel:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$in), GPR32:{ *:[i32] }:$gp)

  VAR#0: (add:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (MipsGPRel:{ *:[i32] } (tconstpool:{ *:[i32] }):$in))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (add:{ *:[i32] } (MipsGPRel:{ *:[i32] } (tconstpool:{ *:[i32] }):$in), GPR32:{ *:[i32] }:$gp)

  VAR#0: (fneg:{ *:[f32] } (fadd:{ *:[f32] } (fmul:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft), FGR32Opnd:{ *:[f32] }:$fr))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (fneg:{ *:[f32] } (fadd:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fr, (fmul:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)))

  VAR#0: (fneg:{ *:[f64] } (fadd:{ *:[f64] } (fmul:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft), AFGR64Opnd:{ *:[f64] }:$fr))
  *** ALREADY EXISTS, ignoring variant.
  VAR#1: (fneg:{ *:[f64] } (fadd:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fr, (fmul:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)))



ALL PATTERNS TO MATCH:

PATTERN: (MipsRet)
RESULT:  (RetRA)
PATTERN: (MipsERet)
RESULT:  (ERet)
PATTERN: (callseq_start (timm:{ *:[i32] }):$amt1, (timm:{ *:[i32] }):$amt2)
RESULT:  (ADJCALLSTACKDOWN (timm:{ *:[i32] }):$amt1, (timm:{ *:[i32] }):$amt2)
PATTERN: (callseq_end (timm:{ *:[i32] }):$amt1, (timm:{ *:[i32] }):$amt2)
RESULT:  (ADJCALLSTACKUP (timm:{ *:[i32] }):$amt1, (timm:{ *:[i32] }):$amt2)
PATTERN: (atomic_load_add:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_add_8>>
RESULT:  (ATOMIC_LOAD_ADD_I8:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_load_add:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_add_16>>
RESULT:  (ATOMIC_LOAD_ADD_I16:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_load_add:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_add_32>>
RESULT:  (ATOMIC_LOAD_ADD_I32:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_load_sub:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_sub_8>>
RESULT:  (ATOMIC_LOAD_SUB_I8:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_load_sub:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_sub_16>>
RESULT:  (ATOMIC_LOAD_SUB_I16:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_load_sub:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_sub_32>>
RESULT:  (ATOMIC_LOAD_SUB_I32:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_load_and:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_and_8>>
RESULT:  (ATOMIC_LOAD_AND_I8:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_load_and:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_and_16>>
RESULT:  (ATOMIC_LOAD_AND_I16:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_load_and:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_and_32>>
RESULT:  (ATOMIC_LOAD_AND_I32:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_load_or:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_or_8>>
RESULT:  (ATOMIC_LOAD_OR_I8:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_load_or:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_or_16>>
RESULT:  (ATOMIC_LOAD_OR_I16:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_load_or:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_or_32>>
RESULT:  (ATOMIC_LOAD_OR_I32:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_load_xor:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_xor_8>>
RESULT:  (ATOMIC_LOAD_XOR_I8:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_load_xor:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_xor_16>>
RESULT:  (ATOMIC_LOAD_XOR_I16:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_load_xor:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_xor_32>>
RESULT:  (ATOMIC_LOAD_XOR_I32:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_load_nand:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_nand_8>>
RESULT:  (ATOMIC_LOAD_NAND_I8:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_load_nand:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_nand_16>>
RESULT:  (ATOMIC_LOAD_NAND_I16:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_load_nand:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_nand_32>>
RESULT:  (ATOMIC_LOAD_NAND_I32:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_swap:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_swap_8>>
RESULT:  (ATOMIC_SWAP_I8:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_swap:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_swap_16>>
RESULT:  (ATOMIC_SWAP_I16:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_swap:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_swap_32>>
RESULT:  (ATOMIC_SWAP_I32:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_cmp_swap:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$cmp, GPR32:{ *:[i32] }:$swap)<<P:Predicate_atomic_cmp_swap_8>>
RESULT:  (ATOMIC_CMP_SWAP_I8:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$cmp, GPR32:{ *:[i32] }:$swap)
PATTERN: (atomic_cmp_swap:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$cmp, GPR32:{ *:[i32] }:$swap)<<P:Predicate_atomic_cmp_swap_16>>
RESULT:  (ATOMIC_CMP_SWAP_I16:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$cmp, GPR32:{ *:[i32] }:$swap)
PATTERN: (atomic_cmp_swap:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$cmp, GPR32:{ *:[i32] }:$swap)<<P:Predicate_atomic_cmp_swap_32>>
RESULT:  (ATOMIC_CMP_SWAP_I32:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$cmp, GPR32:{ *:[i32] }:$swap)
PATTERN: (atomic_load_min:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_min_8>>
RESULT:  (ATOMIC_LOAD_MIN_I8:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_load_min:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_min_16>>
RESULT:  (ATOMIC_LOAD_MIN_I16:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_load_min:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_min_32>>
RESULT:  (ATOMIC_LOAD_MIN_I32:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_load_max:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_max_8>>
RESULT:  (ATOMIC_LOAD_MAX_I8:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_load_max:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_max_16>>
RESULT:  (ATOMIC_LOAD_MAX_I16:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_load_max:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_max_32>>
RESULT:  (ATOMIC_LOAD_MAX_I32:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_load_umin:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_umin_8>>
RESULT:  (ATOMIC_LOAD_UMIN_I8:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_load_umin:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_umin_16>>
RESULT:  (ATOMIC_LOAD_UMIN_I16:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_load_umin:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_umin_32>>
RESULT:  (ATOMIC_LOAD_UMIN_I32:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_load_umax:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_umax_8>>
RESULT:  (ATOMIC_LOAD_UMAX_I8:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_load_umax:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_umax_16>>
RESULT:  (ATOMIC_LOAD_UMAX_I16:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (atomic_load_umax:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)<<P:Predicate_atomic_load_umax_32>>
RESULT:  (ATOMIC_LOAD_UMAX_I32:{ *:[i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$incr)
PATTERN: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] })<<P:Predicate_imm32SExt16>>:$imm16)
RESULT:  (ADDiu:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] }):$imm16)
PATTERN: (and:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] })<<P:Predicate_imm32ZExt16>>:$imm16)
RESULT:  (ANDi:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] }):$imm16)
PATTERN: (or:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] })<<P:Predicate_imm32ZExt16>>:$imm16)
RESULT:  (ORi:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] }):$imm16)
PATTERN: (xor:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] })<<P:Predicate_imm32ZExt16>>:$imm16)
RESULT:  (XORi:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] }):$imm16)
PATTERN: (setcc:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$imm16, SETLT:{ *:[Other] })
RESULT:  (SLTi:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] }):$imm16)
PATTERN: (setcc:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$imm16, SETULT:{ *:[Other] })
RESULT:  (SLTiu:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] }):$imm16)
PATTERN: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (ADDu:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (sub:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (SUBu:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (mul:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (MUL:{ *:[i32] }:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (setcc:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, SETLT:{ *:[Other] })
RESULT:  (SLT:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (setcc:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, SETULT:{ *:[Other] })
RESULT:  (SLTu:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (and:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (AND:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (or:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (OR:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (xor:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (XOR:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (xor:{ *:[i32] } (or:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt), -1:{ *:[i32] })
RESULT:  (NOR:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (shl:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$shamt)
RESULT:  (SLL:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, (imm:{ *:[i32] }):$shamt)
PATTERN: (srl:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$shamt)
RESULT:  (SRL:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, (imm:{ *:[i32] }):$shamt)
PATTERN: (sra:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$shamt)
RESULT:  (SRA:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, (imm:{ *:[i32] }):$shamt)
PATTERN: (shl:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (SLLV:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (srl:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (SRLV:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (sra:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (SRAV:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (rotr:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$shamt)
RESULT:  (ROTR:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, (imm:{ *:[i32] }):$shamt)
PATTERN: (rotr:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (ROTRV:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (ld:{ *:[i32] } addr:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_sextload>><<P:Predicate_sextloadi8>>
RESULT:  (LB:{ *:[i32] } addr:{ *:[iPTR] }:$addr)
PATTERN: (ld:{ *:[i32] } addrDefault:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_zextload>><<P:Predicate_zextloadi8>>
RESULT:  (LBu:{ *:[i32] } addrDefault:{ *:[iPTR] }:$addr)
PATTERN: (ld:{ *:[i32] } addrDefault:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_sextload>><<P:Predicate_sextloadi16>>
RESULT:  (LH:{ *:[i32] } addrDefault:{ *:[iPTR] }:$addr)
PATTERN: (ld:{ *:[i32] } addr:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_zextload>><<P:Predicate_zextloadi16>>
RESULT:  (LHu:{ *:[i32] } addr:{ *:[iPTR] }:$addr)
PATTERN: (ld:{ *:[i32] } addrDefault:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LW:{ *:[i32] } addrDefault:{ *:[iPTR] }:$addr)
PATTERN: (st GPR32Opnd:{ *:[i32] }:$rt, addr:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_truncstore>><<P:Predicate_truncstorei8>>
RESULT:  (SB GPR32Opnd:{ *:[i32] }:$rt, addr:{ *:[iPTR] }:$addr)
PATTERN: (st GPR32Opnd:{ *:[i32] }:$rt, addr:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_truncstore>><<P:Predicate_truncstorei16>>
RESULT:  (SH GPR32Opnd:{ *:[i32] }:$rt, addr:{ *:[iPTR] }:$addr)
PATTERN: (st GPR32Opnd:{ *:[i32] }:$rt, addr:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SW GPR32Opnd:{ *:[i32] }:$rt, addr:{ *:[iPTR] }:$addr)
PATTERN: (MipsLWL:{ *:[i32] } addr:{ *:[iPTR] }:$addr, GPR32Opnd:{ *:[i32] }:$src)
RESULT:  (LWL:{ *:[i32] } addr:{ *:[iPTR] }:$addr, GPR32Opnd:{ *:[i32] }:$src)
PATTERN: (MipsLWR:{ *:[i32] } addr:{ *:[iPTR] }:$addr, GPR32Opnd:{ *:[i32] }:$src)
RESULT:  (LWR:{ *:[i32] } addr:{ *:[iPTR] }:$addr, GPR32Opnd:{ *:[i32] }:$src)
PATTERN: (MipsSWL GPR32Opnd:{ *:[i32] }:$rt, addr:{ *:[iPTR] }:$addr)
RESULT:  (SWL GPR32Opnd:{ *:[i32] }:$rt, addr:{ *:[iPTR] }:$addr)
PATTERN: (MipsSWR GPR32Opnd:{ *:[i32] }:$rt, addr:{ *:[iPTR] }:$addr)
RESULT:  (SWR GPR32Opnd:{ *:[i32] }:$rt, addr:{ *:[iPTR] }:$addr)
PATTERN: (ld:{ *:[i32] } addrDefault:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LWC2:{ *:[i32] } addrDefault:{ *:[iPTR] }:$addr)
PATTERN: (st COP2Opnd:{ *:[i32] }:$rt, addrDefault:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SWC2 COP2Opnd:{ *:[i32] }:$rt, addrDefault:{ *:[iPTR] }:$addr)
PATTERN: (ld:{ *:[i32] } addrDefault:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LDC2:{ *:[i32] } addrDefault:{ *:[iPTR] }:$addr)
PATTERN: (st COP2Opnd:{ *:[i32] }:$rt, addrDefault:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SDC2 COP2Opnd:{ *:[i32] }:$rt, addrDefault:{ *:[iPTR] }:$addr)
PATTERN: (ld:{ *:[i32] } addrDefault:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LWC3:{ *:[i32] } addrDefault:{ *:[iPTR] }:$addr)
PATTERN: (st COP3Opnd:{ *:[i32] }:$rt, addrDefault:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SWC3 COP3Opnd:{ *:[i32] }:$rt, addrDefault:{ *:[iPTR] }:$addr)
PATTERN: (ld:{ *:[i32] } addrDefault:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LDC3:{ *:[i32] } addrDefault:{ *:[iPTR] }:$addr)
PATTERN: (st COP3Opnd:{ *:[i32] }:$rt, addrDefault:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SDC3 COP3Opnd:{ *:[i32] }:$rt, addrDefault:{ *:[iPTR] }:$addr)
PATTERN: (MipsSync (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$stype)
RESULT:  (SYNC (imm:{ *:[i32] }):$stype)
PATTERN: (trap)
RESULT:  (TRAP)
PATTERN: (br (bb:{ *:[Other] }):$target)
RESULT:  (J (bb:{ *:[Other] }):$target)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, SETEQ:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
RESULT:  (BEQ GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, (bb:{ *:[Other] }):$offset)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, SETNE:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
RESULT:  (BNE GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, (bb:{ *:[Other] }):$offset)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, 0:{ *:[i32] }, SETGE:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
RESULT:  (BGEZ GPR32Opnd:{ *:[i32] }:$rs, (bb:{ *:[Other] }):$offset)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, 0:{ *:[i32] }, SETGT:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
RESULT:  (BGTZ GPR32Opnd:{ *:[i32] }:$rs, (bb:{ *:[Other] }):$offset)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, 0:{ *:[i32] }, SETLE:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
RESULT:  (BLEZ GPR32Opnd:{ *:[i32] }:$rs, (bb:{ *:[Other] }):$offset)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, 0:{ *:[i32] }, SETLT:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
RESULT:  (BLTZ GPR32Opnd:{ *:[i32] }:$rs, (bb:{ *:[Other] }):$offset)
PATTERN: (br (bb:{ *:[Other] }):$offset)
RESULT:  (B (bb:{ *:[Other] }):$offset)
PATTERN: (MipsJmpLink (tglobaladdr:{ *:[iPTR] }):$target)
RESULT:  (JAL (tglobaladdr:{ *:[iPTR] }):$target)
PATTERN: (MipsJmpLink GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (JALRPseudo GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (MipsJmpLink (tglobaladdr:{ *:[iPTR] }):$target)
RESULT:  (JALX (tglobaladdr:{ *:[iPTR] }):$target)
PATTERN: (MipsTailCall GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (TAILCALLREG GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (brind GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (PseudoIndirectBranch GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (MIPSehret GPR32:{ *:[i32] }:$spoff, GPR32:{ *:[i32] }:$dst)
RESULT:  (MIPSeh_return32 GPR32:{ *:[i32] }:$spoff, GPR32:{ *:[i32] }:$dst)
PATTERN: (MIPSehret GPR64:{ *:[i64] }:$spoff, GPR64:{ *:[i64] }:$dst)
RESULT:  (MIPSeh_return64 GPR64:{ *:[i64] }:$spoff, GPR64:{ *:[i64] }:$dst)
PATTERN: (sext_inreg:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, i8:{ *:[Other] })
RESULT:  (SEB:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (sext_inreg:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, i16:{ *:[Other] })
RESULT:  (SEH:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (ctlz:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (CLZ:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (ctlz:{ *:[i32] } (xor:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, -1:{ *:[i32] }))
RESULT:  (CLO:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: addr:{ *:[i32] }:$addr
RESULT:  (LEA_ADDiu:{ *:[i32] } addr:{ *:[i32] }:$addr)
PATTERN: (MipsMult:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (PseudoMULT:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (MipsMultu:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (PseudoMULTu:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (MipsMFHI:{ *:[i32] } ACC64:{ *:[Untyped] }:$hilo)
RESULT:  (PseudoMFHI:{ *:[i32] } ACC64:{ *:[Untyped] }:$hilo)
PATTERN: (MipsMFLO:{ *:[i32] } ACC64:{ *:[Untyped] }:$hilo)
RESULT:  (PseudoMFLO:{ *:[i32] } ACC64:{ *:[Untyped] }:$hilo)
PATTERN: (MipsMTLOHI:{ *:[Untyped] } GPR32:{ *:[i32] }:$lo, GPR32:{ *:[i32] }:$hi)
RESULT:  (PseudoMTLOHI:{ *:[Untyped] } GPR32:{ *:[i32] }:$lo, GPR32:{ *:[i32] }:$hi)
PATTERN: (MipsMAdd:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64:{ *:[Untyped] }:$acin)
RESULT:  (PseudoMADD:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64:{ *:[Untyped] }:$acin)
PATTERN: (MipsMAddu:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64:{ *:[Untyped] }:$acin)
RESULT:  (PseudoMADDU:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64:{ *:[Untyped] }:$acin)
PATTERN: (MipsMSub:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64:{ *:[Untyped] }:$acin)
RESULT:  (PseudoMSUB:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64:{ *:[Untyped] }:$acin)
PATTERN: (MipsMSubu:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64:{ *:[Untyped] }:$acin)
RESULT:  (PseudoMSUBU:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64:{ *:[Untyped] }:$acin)
PATTERN: (MipsDivRem:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (PseudoSDIV:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (MipsDivRemU:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (PseudoUDIV:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (MipsExt:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$pos, (imm:{ *:[i32] })<<P:Predicate_immZExt5Plus1>>:$size)
RESULT:  (EXT:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] }):$pos, (imm:{ *:[i32] }):$size)
PATTERN: (MipsJmpLink GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (JALRHBPseudo GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (MipsTailCall GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (TAILCALLREGHB GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (brind GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (PseudoIndirectHazardBranch GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (fabs:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs)
RESULT:  (FABS_S:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs)
PATTERN: (fabs:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs)
RESULT:  (FABS_D32:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs)
PATTERN: (fabs:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs)
RESULT:  (FABS_D64:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs)
PATTERN: (fneg:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs)
RESULT:  (FNEG_S:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs)
PATTERN: (fneg:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs)
RESULT:  (FNEG_D32:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs)
PATTERN: (fneg:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs)
RESULT:  (FNEG_D64:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs)
PATTERN: (fsqrt:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs)
RESULT:  (FSQRT_S:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs)
PATTERN: (fsqrt:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs)
RESULT:  (FSQRT_D32:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs)
PATTERN: (fsqrt:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs)
RESULT:  (FSQRT_D64:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs)
PATTERN: (bitconvert:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs)
RESULT:  (MFC1:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs)
PATTERN: (bitconvert:{ *:[f32] } GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (MTC1:{ *:[f32] } GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (bitconvert:{ *:[f64] } GPR64Opnd:{ *:[i64] }:$rt)
RESULT:  (DMTC1:{ *:[f64] } GPR64Opnd:{ *:[i64] }:$rt)
PATTERN: (bitconvert:{ *:[i64] } FGR64Opnd:{ *:[f64] }:$fs)
RESULT:  (DMFC1:{ *:[i64] } FGR64Opnd:{ *:[f64] }:$fs)
PATTERN: (ld:{ *:[f32] } addrDefault:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LWC1:{ *:[f32] } addrDefault:{ *:[iPTR] }:$addr)
PATTERN: (st FGR32Opnd:{ *:[f32] }:$rt, addrDefault:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SWC1 FGR32Opnd:{ *:[f32] }:$rt, addrDefault:{ *:[iPTR] }:$addr)
PATTERN: (ld:{ *:[f64] } addrDefault:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LDC164:{ *:[f64] } addrDefault:{ *:[iPTR] }:$addr)
PATTERN: (st FGR64Opnd:{ *:[f64] }:$rt, addrDefault:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SDC164 FGR64Opnd:{ *:[f64] }:$rt, addrDefault:{ *:[iPTR] }:$addr)
PATTERN: (ld:{ *:[f64] } addrDefault:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LDC1:{ *:[f64] } addrDefault:{ *:[iPTR] }:$addr)
PATTERN: (st AFGR64Opnd:{ *:[f64] }:$rt, addrDefault:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SDC1 AFGR64Opnd:{ *:[f64] }:$rt, addrDefault:{ *:[iPTR] }:$addr)
PATTERN: (ld:{ *:[f32] } (add:{ *:[iPTR] } iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index))<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LWXC1:{ *:[f32] } iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index)
PATTERN: (st FGR32Opnd:{ *:[f32] }:$fs, (add:{ *:[iPTR] } iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index))<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SWXC1 FGR32Opnd:{ *:[f32] }:$fs, iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index)
PATTERN: (ld:{ *:[f64] } (add:{ *:[iPTR] } iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index))<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LDXC1:{ *:[f64] } iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index)
PATTERN: (st AFGR64Opnd:{ *:[f64] }:$fs, (add:{ *:[iPTR] } iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index))<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SDXC1 AFGR64Opnd:{ *:[f64] }:$fs, iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index)
PATTERN: (ld:{ *:[f64] } (add:{ *:[iPTR] } iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index))<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LDXC164:{ *:[f64] } iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index)
PATTERN: (st FGR64Opnd:{ *:[f64] }:$fs, (add:{ *:[iPTR] } iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index))<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SDXC164 FGR64Opnd:{ *:[f64] }:$fs, iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index)
PATTERN: (fadd:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
RESULT:  (FADD_S:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (fadd:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)
RESULT:  (FADD_D32:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fadd:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
RESULT:  (FADD_D64:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fdiv:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
RESULT:  (FDIV_S:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (fdiv:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)
RESULT:  (FDIV_D32:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fdiv:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
RESULT:  (FDIV_D64:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fmul:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
RESULT:  (FMUL_S:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (fmul:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)
RESULT:  (FMUL_D32:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fmul:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
RESULT:  (FMUL_D64:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fsub:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
RESULT:  (FSUB_S:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (fsub:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)
RESULT:  (FSUB_D32:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fsub:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
RESULT:  (FSUB_D64:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fadd:{ *:[f32] } (fmul:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft), FGR32Opnd:{ *:[f32] }:$fr)
RESULT:  (MADD_S:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fr, FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (fsub:{ *:[f32] } (fmul:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft), FGR32Opnd:{ *:[f32] }:$fr)
RESULT:  (MSUB_S:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fr, FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (fadd:{ *:[f64] } (fmul:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft), AFGR64Opnd:{ *:[f64] }:$fr)
RESULT:  (MADD_D32:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fr, AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fsub:{ *:[f64] } (fmul:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft), AFGR64Opnd:{ *:[f64] }:$fr)
RESULT:  (MSUB_D32:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fr, AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fadd:{ *:[f64] } (fmul:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft), FGR64Opnd:{ *:[f64] }:$fr)
RESULT:  (MADD_D64:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fr, FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fsub:{ *:[f64] } (fmul:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft), FGR64Opnd:{ *:[f64] }:$fr)
RESULT:  (MSUB_D64:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fr, FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fsub:{ *:[f32] } (fpimm:{ *:[f32] })<<P:Predicate_fpimm0>>, (fadd:{ *:[f32] } (fmul:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft), FGR32Opnd:{ *:[f32] }:$fr))
RESULT:  (NMADD_S:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fr, FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (fsub:{ *:[f32] } (fpimm:{ *:[f32] })<<P:Predicate_fpimm0>>, (fsub:{ *:[f32] } (fmul:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft), FGR32Opnd:{ *:[f32] }:$fr))
RESULT:  (NMSUB_S:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fr, FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (fsub:{ *:[f64] } (fpimm:{ *:[f64] })<<P:Predicate_fpimm0>>, (fadd:{ *:[f64] } (fmul:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft), AFGR64Opnd:{ *:[f64] }:$fr))
RESULT:  (NMADD_D32:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fr, AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fsub:{ *:[f64] } (fpimm:{ *:[f64] })<<P:Predicate_fpimm0>>, (fsub:{ *:[f64] } (fmul:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft), AFGR64Opnd:{ *:[f64] }:$fr))
RESULT:  (NMSUB_D32:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fr, AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fsub:{ *:[f64] } (fpimm:{ *:[f64] })<<P:Predicate_fpimm0>>, (fadd:{ *:[f64] } (fmul:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft), FGR64Opnd:{ *:[f64] }:$fr))
RESULT:  (NMADD_D64:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fr, FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fsub:{ *:[f64] } (fpimm:{ *:[f64] })<<P:Predicate_fpimm0>>, (fsub:{ *:[f64] } (fmul:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft), FGR64Opnd:{ *:[f64] }:$fr))
RESULT:  (NMSUB_D64:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fr, FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (MipsFPBrcond 0:{ *:[i32] }, FCCRegsOpnd:{ *:[i32] }:$fcc, (bb:{ *:[Other] }):$offset)
RESULT:  (BC1F FCCRegsOpnd:{ *:[i32] }:$fcc, (bb:{ *:[Other] }):$offset)
PATTERN: (MipsFPBrcond 1:{ *:[i32] }, FCCRegsOpnd:{ *:[i32] }:$fcc, (bb:{ *:[Other] }):$offset)
RESULT:  (BC1T FCCRegsOpnd:{ *:[i32] }:$fcc, (bb:{ *:[Other] }):$offset)
PATTERN: (MipsFPCmp FGR32:{ *:[f32] }:$fs, FGR32:{ *:[f32] }:$ft, (imm:{ *:[i32] }):$cond)
RESULT:  (FCMP_S32:{ *:[i32] } FGR32:{ *:[f32] }:$fs, FGR32:{ *:[f32] }:$ft, (imm:{ *:[i32] }):$cond)
PATTERN: (MipsFPCmp AFGR64:{ *:[f64] }:$fs, AFGR64:{ *:[f64] }:$ft, (imm:{ *:[i32] }):$cond)
RESULT:  (FCMP_D32:{ *:[i32] } AFGR64:{ *:[f64] }:$fs, AFGR64:{ *:[f64] }:$ft, (imm:{ *:[i32] }):$cond)
PATTERN: (MipsFPCmp FGR64:{ *:[f64] }:$fs, FGR64:{ *:[f64] }:$ft, (imm:{ *:[i32] }):$cond)
RESULT:  (FCMP_D64:{ *:[i32] } FGR64:{ *:[f64] }:$fs, FGR64:{ *:[f64] }:$ft, (imm:{ *:[i32] }):$cond)
PATTERN: (MipsBuildPairF64:{ *:[f64] } GPR32Opnd:{ *:[i32] }:$lo, GPR32Opnd:{ *:[i32] }:$hi)
RESULT:  (BuildPairF64:{ *:[f64] } GPR32Opnd:{ *:[i32] }:$lo, GPR32Opnd:{ *:[i32] }:$hi)
PATTERN: (MipsBuildPairF64:{ *:[f64] } GPR32Opnd:{ *:[i32] }:$lo, GPR32Opnd:{ *:[i32] }:$hi)
RESULT:  (BuildPairF64_64:{ *:[f64] } GPR32Opnd:{ *:[i32] }:$lo, GPR32Opnd:{ *:[i32] }:$hi)
PATTERN: (MipsExtractElementF64:{ *:[i32] } AFGR64Opnd:{ *:[f64] }:$src, (imm:{ *:[i32] }):$n)
RESULT:  (ExtractElementF64:{ *:[i32] } AFGR64Opnd:{ *:[f64] }:$src, (imm:{ *:[i32] }):$n)
PATTERN: (MipsExtractElementF64:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$src, (imm:{ *:[i32] }):$n)
RESULT:  (ExtractElementF64_64:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$src, (imm:{ *:[i32] }):$n)
PATTERN: (atomic_load_add:{ *:[i64] } iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr)<<P:Predicate_atomic_load_add_64>>
RESULT:  (ATOMIC_LOAD_ADD_I64:{ *:[i64] } iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr)
PATTERN: (atomic_load_sub:{ *:[i64] } iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr)<<P:Predicate_atomic_load_sub_64>>
RESULT:  (ATOMIC_LOAD_SUB_I64:{ *:[i64] } iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr)
PATTERN: (atomic_load_and:{ *:[i64] } iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr)<<P:Predicate_atomic_load_and_64>>
RESULT:  (ATOMIC_LOAD_AND_I64:{ *:[i64] } iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr)
PATTERN: (atomic_load_or:{ *:[i64] } iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr)<<P:Predicate_atomic_load_or_64>>
RESULT:  (ATOMIC_LOAD_OR_I64:{ *:[i64] } iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr)
PATTERN: (atomic_load_xor:{ *:[i64] } iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr)<<P:Predicate_atomic_load_xor_64>>
RESULT:  (ATOMIC_LOAD_XOR_I64:{ *:[i64] } iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr)
PATTERN: (atomic_load_nand:{ *:[i64] } iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr)<<P:Predicate_atomic_load_nand_64>>
RESULT:  (ATOMIC_LOAD_NAND_I64:{ *:[i64] } iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr)
PATTERN: (atomic_swap:{ *:[i64] } iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr)<<P:Predicate_atomic_swap_64>>
RESULT:  (ATOMIC_SWAP_I64:{ *:[i64] } iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr)
PATTERN: (atomic_cmp_swap:{ *:[i64] } iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$cmp, GPR64:{ *:[i64] }:$swap)<<P:Predicate_atomic_cmp_swap_64>>
RESULT:  (ATOMIC_CMP_SWAP_I64:{ *:[i64] } iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$cmp, GPR64:{ *:[i64] }:$swap)
PATTERN: (atomic_load_min:{ *:[i64] } iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr)<<P:Predicate_atomic_load_min_64>>
RESULT:  (ATOMIC_LOAD_MIN_I64:{ *:[i64] } iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr)
PATTERN: (atomic_load_max:{ *:[i64] } iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr)<<P:Predicate_atomic_load_max_64>>
RESULT:  (ATOMIC_LOAD_MAX_I64:{ *:[i64] } iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr)
PATTERN: (atomic_load_umin:{ *:[i64] } iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr)<<P:Predicate_atomic_load_umin_64>>
RESULT:  (ATOMIC_LOAD_UMIN_I64:{ *:[i64] } iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr)
PATTERN: (atomic_load_umax:{ *:[i64] } iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr)<<P:Predicate_atomic_load_umax_64>>
RESULT:  (ATOMIC_LOAD_UMAX_I64:{ *:[i64] } iPTR:{ *:[iPTR] }:$ptr, GPR64:{ *:[i64] }:$incr)
PATTERN: (add:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$imm16)
RESULT:  (DADDiu:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i64] }):$imm16)
PATTERN: (setcc:{ *:[i32] } GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$imm16, SETLT:{ *:[Other] })
RESULT:  (SLTi64:{ *:[i32] } GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i64] }):$imm16)
PATTERN: (setcc:{ *:[i32] } GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$imm16, SETULT:{ *:[Other] })
RESULT:  (SLTiu64:{ *:[i32] } GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i64] }):$imm16)
PATTERN: (and:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i64] })<<P:Predicate_immZExt16>><<X:LO16>>:$imm16)
RESULT:  (ANDi64:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (LO16:{ *:[i64] } (imm:{ *:[i64] }):$imm16))
PATTERN: (or:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i64] })<<P:Predicate_immZExt16>><<X:LO16>>:$imm16)
RESULT:  (ORi64:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (LO16:{ *:[i64] } (imm:{ *:[i64] }):$imm16))
PATTERN: (xor:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i64] })<<P:Predicate_immZExt16>><<X:LO16>>:$imm16)
RESULT:  (XORi64:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (LO16:{ *:[i64] } (imm:{ *:[i64] }):$imm16))
PATTERN: (add:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
RESULT:  (DADDu:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
PATTERN: (sub:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
RESULT:  (DSUBu:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
PATTERN: (setcc:{ *:[i32] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt, SETLT:{ *:[Other] })
RESULT:  (SLT64:{ *:[i32] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
PATTERN: (setcc:{ *:[i32] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt, SETULT:{ *:[Other] })
RESULT:  (SLTu64:{ *:[i32] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
PATTERN: (and:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
RESULT:  (AND64:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
PATTERN: (or:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
RESULT:  (OR64:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
PATTERN: (xor:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
RESULT:  (XOR64:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
PATTERN: (xor:{ *:[i64] } (or:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt), -1:{ *:[i64] })
RESULT:  (NOR64:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
PATTERN: (shl:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rt, (imm:{ *:[i32] })<<P:Predicate_immZExt6>>:$shamt)
RESULT:  (DSLL:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rt, (imm:{ *:[i32] }):$shamt)
PATTERN: (srl:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rt, (imm:{ *:[i32] })<<P:Predicate_immZExt6>>:$shamt)
RESULT:  (DSRL:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rt, (imm:{ *:[i32] }):$shamt)
PATTERN: (sra:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rt, (imm:{ *:[i32] })<<P:Predicate_immZExt6>>:$shamt)
RESULT:  (DSRA:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rt, (imm:{ *:[i32] }):$shamt)
PATTERN: (shl:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (DSLLV:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (sra:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (DSRAV:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (srl:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (DSRLV:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (rotr:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rt, (imm:{ *:[i32] })<<P:Predicate_immZExt6>>:$shamt)
RESULT:  (DROTR:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rt, (imm:{ *:[i32] }):$shamt)
PATTERN: (rotr:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (DROTRV:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (ld:{ *:[i64] } addr:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_sextload>><<P:Predicate_sextloadi8>>
RESULT:  (LB64:{ *:[i64] } addr:{ *:[iPTR] }:$addr)
PATTERN: (ld:{ *:[i64] } addr:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_zextload>><<P:Predicate_zextloadi8>>
RESULT:  (LBu64:{ *:[i64] } addr:{ *:[iPTR] }:$addr)
PATTERN: (ld:{ *:[i64] } addr:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_sextload>><<P:Predicate_sextloadi16>>
RESULT:  (LH64:{ *:[i64] } addr:{ *:[iPTR] }:$addr)
PATTERN: (ld:{ *:[i64] } addr:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_zextload>><<P:Predicate_zextloadi16>>
RESULT:  (LHu64:{ *:[i64] } addr:{ *:[iPTR] }:$addr)
PATTERN: (ld:{ *:[i64] } addr:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_sextload>><<P:Predicate_sextloadi32>>
RESULT:  (LW64:{ *:[i64] } addr:{ *:[iPTR] }:$addr)
PATTERN: (st GPR64Opnd:{ *:[i64] }:$rt, addr:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_truncstore>><<P:Predicate_truncstorei8>>
RESULT:  (SB64 GPR64Opnd:{ *:[i64] }:$rt, addr:{ *:[iPTR] }:$addr)
PATTERN: (st GPR64Opnd:{ *:[i64] }:$rt, addr:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_truncstore>><<P:Predicate_truncstorei16>>
RESULT:  (SH64 GPR64Opnd:{ *:[i64] }:$rt, addr:{ *:[iPTR] }:$addr)
PATTERN: (st GPR64Opnd:{ *:[i64] }:$rt, addr:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_truncstore>><<P:Predicate_truncstorei32>>
RESULT:  (SW64 GPR64Opnd:{ *:[i64] }:$rt, addr:{ *:[iPTR] }:$addr)
PATTERN: (ld:{ *:[i64] } addr:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_zextload>><<P:Predicate_zextloadi32>>
RESULT:  (LWu:{ *:[i64] } addr:{ *:[iPTR] }:$addr)
PATTERN: (ld:{ *:[i64] } addr:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LD:{ *:[i64] } addr:{ *:[iPTR] }:$addr)
PATTERN: (st GPR64Opnd:{ *:[i64] }:$rt, addr:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SD GPR64Opnd:{ *:[i64] }:$rt, addr:{ *:[iPTR] }:$addr)
PATTERN: (MipsLWL:{ *:[i64] } addr:{ *:[iPTR] }:$addr, GPR64Opnd:{ *:[i64] }:$src)
RESULT:  (LWL64:{ *:[i64] } addr:{ *:[iPTR] }:$addr, GPR64Opnd:{ *:[i64] }:$src)
PATTERN: (MipsLWR:{ *:[i64] } addr:{ *:[iPTR] }:$addr, GPR64Opnd:{ *:[i64] }:$src)
RESULT:  (LWR64:{ *:[i64] } addr:{ *:[iPTR] }:$addr, GPR64Opnd:{ *:[i64] }:$src)
PATTERN: (MipsSWL GPR64Opnd:{ *:[i64] }:$rt, addr:{ *:[iPTR] }:$addr)
RESULT:  (SWL64 GPR64Opnd:{ *:[i64] }:$rt, addr:{ *:[iPTR] }:$addr)
PATTERN: (MipsSWR GPR64Opnd:{ *:[i64] }:$rt, addr:{ *:[iPTR] }:$addr)
RESULT:  (SWR64 GPR64Opnd:{ *:[i64] }:$rt, addr:{ *:[iPTR] }:$addr)
PATTERN: (MipsLDL:{ *:[i64] } addr:{ *:[iPTR] }:$addr, GPR64Opnd:{ *:[i64] }:$src)
RESULT:  (LDL:{ *:[i64] } addr:{ *:[iPTR] }:$addr, GPR64Opnd:{ *:[i64] }:$src)
PATTERN: (MipsLDR:{ *:[i64] } addr:{ *:[iPTR] }:$addr, GPR64Opnd:{ *:[i64] }:$src)
RESULT:  (LDR:{ *:[i64] } addr:{ *:[iPTR] }:$addr, GPR64Opnd:{ *:[i64] }:$src)
PATTERN: (MipsSDL GPR64Opnd:{ *:[i64] }:$rt, addr:{ *:[iPTR] }:$addr)
RESULT:  (SDL GPR64Opnd:{ *:[i64] }:$rt, addr:{ *:[iPTR] }:$addr)
PATTERN: (MipsSDR GPR64Opnd:{ *:[i64] }:$rt, addr:{ *:[iPTR] }:$addr)
RESULT:  (SDR GPR64Opnd:{ *:[i64] }:$rt, addr:{ *:[iPTR] }:$addr)
PATTERN: (brcond (setcc:{ *:[i32] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt, SETEQ:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
RESULT:  (BEQ64 GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt, (bb:{ *:[Other] }):$offset)
PATTERN: (brcond (setcc:{ *:[i32] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt, SETNE:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
RESULT:  (BNE64 GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt, (bb:{ *:[Other] }):$offset)
PATTERN: (brcond (setcc:{ *:[i32] } GPR64Opnd:{ *:[i64] }:$rs, 0:{ *:[i64] }, SETGE:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
RESULT:  (BGEZ64 GPR64Opnd:{ *:[i64] }:$rs, (bb:{ *:[Other] }):$offset)
PATTERN: (brcond (setcc:{ *:[i32] } GPR64Opnd:{ *:[i64] }:$rs, 0:{ *:[i64] }, SETGT:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
RESULT:  (BGTZ64 GPR64Opnd:{ *:[i64] }:$rs, (bb:{ *:[Other] }):$offset)
PATTERN: (brcond (setcc:{ *:[i32] } GPR64Opnd:{ *:[i64] }:$rs, 0:{ *:[i64] }, SETLE:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
RESULT:  (BLEZ64 GPR64Opnd:{ *:[i64] }:$rs, (bb:{ *:[Other] }):$offset)
PATTERN: (brcond (setcc:{ *:[i32] } GPR64Opnd:{ *:[i64] }:$rs, 0:{ *:[i64] }, SETLT:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
RESULT:  (BLTZ64 GPR64Opnd:{ *:[i64] }:$rs, (bb:{ *:[Other] }):$offset)
PATTERN: (MipsJmpLink GPR64Opnd:{ *:[i64] }:$rs)
RESULT:  (JALR64Pseudo GPR64Opnd:{ *:[i64] }:$rs)
PATTERN: (MipsTailCall GPR64Opnd:{ *:[i64] }:$rs)
RESULT:  (TAILCALLREG64 GPR64Opnd:{ *:[i64] }:$rs)
PATTERN: (brind GPR64Opnd:{ *:[i64] }:$rs)
RESULT:  (PseudoIndirectBranch64 GPR64Opnd:{ *:[i64] }:$rs)
PATTERN: (MipsTailCall GPR64Opnd:{ *:[i64] }:$rs)
RESULT:  (TAILCALLREGHB64 GPR64Opnd:{ *:[i64] }:$rs)
PATTERN: (brind GPR64Opnd:{ *:[i64] }:$rs)
RESULT:  (PseudoIndirectHazardBranch64 GPR64Opnd:{ *:[i64] }:$rs)
PATTERN: (MipsMult:{ *:[Untyped] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
RESULT:  (PseudoDMULT:{ *:[Untyped] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
PATTERN: (MipsMultu:{ *:[Untyped] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
RESULT:  (PseudoDMULTu:{ *:[Untyped] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
PATTERN: (MipsDivRem:{ *:[Untyped] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
RESULT:  (PseudoDSDIV:{ *:[Untyped] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
PATTERN: (MipsDivRemU:{ *:[Untyped] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
RESULT:  (PseudoDUDIV:{ *:[Untyped] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
PATTERN: (MipsMFHI:{ *:[i64] } ACC128:{ *:[Untyped] }:$hilo)
RESULT:  (PseudoMFHI64:{ *:[i64] } ACC128:{ *:[Untyped] }:$hilo)
PATTERN: (MipsMFLO:{ *:[i64] } ACC128:{ *:[Untyped] }:$hilo)
RESULT:  (PseudoMFLO64:{ *:[i64] } ACC128:{ *:[Untyped] }:$hilo)
PATTERN: (MipsMTLOHI:{ *:[Untyped] } GPR64:{ *:[i64] }:$lo, GPR64:{ *:[i64] }:$hi)
RESULT:  (PseudoMTLOHI64:{ *:[Untyped] } GPR64:{ *:[i64] }:$lo, GPR64:{ *:[i64] }:$hi)
PATTERN: (sext_inreg:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rt, i8:{ *:[Other] })
RESULT:  (SEB64:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rt)
PATTERN: (sext_inreg:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rt, i16:{ *:[Other] })
RESULT:  (SEH64:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rt)
PATTERN: (ctlz:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs)
RESULT:  (DCLZ:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs)
PATTERN: (ctlz:{ *:[i64] } (xor:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, -1:{ *:[i64] }))
RESULT:  (DCLO:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs)
PATTERN: addr:{ *:[i64] }:$addr
RESULT:  (LEA_ADDiu64:{ *:[i64] } addr:{ *:[i64] }:$addr)
PATTERN: (MipsExt:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$pos, (imm:{ *:[i32] })<<P:Predicate_immZExt5Plus1>>:$size)
RESULT:  (DEXT:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i32] }):$pos, (imm:{ *:[i32] }):$size)
PATTERN: (MipsExt:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$pos, (imm:{ *:[i32] })<<P:Predicate_immZExt5Plus33>>:$size)
RESULT:  (DEXTM:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i32] }):$pos, (imm:{ *:[i32] }):$size)
PATTERN: (MipsExt:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immZExt5Plus32>>:$pos, (imm:{ *:[i32] })<<P:Predicate_immZExt5Plus1>>:$size)
RESULT:  (DEXTU:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i32] }):$pos, (imm:{ *:[i32] }):$size)
PATTERN: (and:{ *:[i64] } (add:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt), 255:{ *:[i64] })
RESULT:  (BADDu:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
PATTERN: (brcond (setcc:{ *:[i32] } (and:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (shl:{ *:[i64] } 1:{ *:[i64] }, (imm:{ *:[i64] })<<P:Predicate_immZExt5_64>>:$p)), 0:{ *:[i64] }, SETEQ:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
RESULT:  (BBIT0 GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i64] }):$p, (bb:{ *:[Other] }):$offset)
PATTERN: (brcond (setcc:{ *:[i32] } (and:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (shl:{ *:[i64] } 4294967296:{ *:[i64] }, (imm:{ *:[i64] })<<P:Predicate_immZExt5_64>>:$p)), 0:{ *:[i64] }, SETEQ:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
RESULT:  (BBIT032 GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i64] }):$p, (bb:{ *:[Other] }):$offset)
PATTERN: (brcond (setcc:{ *:[i32] } (and:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (shl:{ *:[i64] } 1:{ *:[i64] }, (imm:{ *:[i64] })<<P:Predicate_immZExt5_64>>:$p)), 0:{ *:[i64] }, SETNE:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
RESULT:  (BBIT1 GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i64] }):$p, (bb:{ *:[Other] }):$offset)
PATTERN: (brcond (setcc:{ *:[i32] } (and:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (shl:{ *:[i64] } 4294967296:{ *:[i64] }, (imm:{ *:[i64] })<<P:Predicate_immZExt5_64>>:$p)), 0:{ *:[i64] }, SETNE:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
RESULT:  (BBIT132 GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i64] }):$p, (bb:{ *:[Other] }):$offset)
PATTERN: (mul:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
RESULT:  (DMUL:{ *:[i64] }:{ *:[i32] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
PATTERN: (MipsCIns:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$pos, (imm:{ *:[i32] }):$lenm1)
RESULT:  (CINS:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i32] }):$pos, (imm:{ *:[i32] }):$lenm1)
PATTERN: (MipsCIns:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immZExt5Plus32>>:$pos, (imm:{ *:[i32] }):$lenm1)
RESULT:  (CINS32:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i32] }):$pos, (imm:{ *:[i32] }):$lenm1)
PATTERN: (MipsCIns:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$pos, (imm:{ *:[i32] }):$lenm1)
RESULT:  (CINS_i32:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] }):$pos, (imm:{ *:[i32] }):$lenm1)
PATTERN: (ctpop:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (POP:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (ctpop:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs)
RESULT:  (DPOP:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs)
PATTERN: (zext:{ *:[i64] } (setcc:{ *:[i32] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt, SETEQ:{ *:[Other] }))
RESULT:  (SEQ:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
PATTERN: (zext:{ *:[i64] } (setcc:{ *:[i32] } GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i64] })<<P:Predicate_immSExt10_64>>:$imm10, SETEQ:{ *:[Other] }))
RESULT:  (SEQi:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i64] }):$imm10)
PATTERN: (zext:{ *:[i64] } (setcc:{ *:[i32] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt, SETNE:{ *:[Other] }))
RESULT:  (SNE:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
PATTERN: (zext:{ *:[i64] } (setcc:{ *:[i32] } GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i64] })<<P:Predicate_immSExt10_64>>:$imm10, SETNE:{ *:[Other] }))
RESULT:  (SNEi:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i64] }):$imm10)
PATTERN: (MipsJmpLink GPR64Opnd:{ *:[i64] }:$rs)
RESULT:  (JALRHB64Pseudo GPR64Opnd:{ *:[i64] }:$rs)
PATTERN: (MipsCMovFP_T:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, FCCRegsOpnd:{ *:[i32] }:$fcc, GPR32Opnd:{ *:[i32] }:$F)
RESULT:  (MOVT_I:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, FCCRegsOpnd:{ *:[i32] }:$fcc, GPR32Opnd:{ *:[i32] }:$F)
PATTERN: (MipsCMovFP_T:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, FCCRegsOpnd:{ *:[i32] }:$fcc, GPR64Opnd:{ *:[i64] }:$F)
RESULT:  (MOVT_I64:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, FCCRegsOpnd:{ *:[i32] }:$fcc, GPR64Opnd:{ *:[i64] }:$F)
PATTERN: (MipsCMovFP_F:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, FCCRegsOpnd:{ *:[i32] }:$fcc, GPR32Opnd:{ *:[i32] }:$F)
RESULT:  (MOVF_I:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, FCCRegsOpnd:{ *:[i32] }:$fcc, GPR32Opnd:{ *:[i32] }:$F)
PATTERN: (MipsCMovFP_F:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, FCCRegsOpnd:{ *:[i32] }:$fcc, GPR64Opnd:{ *:[i64] }:$F)
RESULT:  (MOVF_I64:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, FCCRegsOpnd:{ *:[i32] }:$fcc, GPR64Opnd:{ *:[i64] }:$F)
PATTERN: (MipsCMovFP_T:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, FGR32Opnd:{ *:[f32] }:$F)
RESULT:  (MOVT_S:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, FGR32Opnd:{ *:[f32] }:$F)
PATTERN: (MipsCMovFP_F:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, FGR32Opnd:{ *:[f32] }:$F)
RESULT:  (MOVF_S:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, FGR32Opnd:{ *:[f32] }:$F)
PATTERN: (MipsCMovFP_T:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, AFGR64Opnd:{ *:[f64] }:$F)
RESULT:  (MOVT_D32:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, AFGR64Opnd:{ *:[f64] }:$F)
PATTERN: (MipsCMovFP_F:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, AFGR64Opnd:{ *:[f64] }:$F)
RESULT:  (MOVF_D32:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, AFGR64Opnd:{ *:[f64] }:$F)
PATTERN: (MipsCMovFP_T:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, FGR64Opnd:{ *:[f64] }:$F)
RESULT:  (MOVT_D64:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, FGR64Opnd:{ *:[f64] }:$F)
PATTERN: (MipsCMovFP_F:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, FGR64Opnd:{ *:[f64] }:$F)
RESULT:  (MOVF_D64:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, FGR64Opnd:{ *:[f64] }:$F)
PATTERN: (select:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$cond, GPR32Opnd:{ *:[i32] }:$T, GPR32Opnd:{ *:[i32] }:$F)
RESULT:  (PseudoSELECT_I:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$cond, GPR32Opnd:{ *:[i32] }:$T, GPR32Opnd:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i64] } GPR32Opnd:{ *:[i32] }:$cond, GPR64Opnd:{ *:[i64] }:$T, GPR64Opnd:{ *:[i64] }:$F)
RESULT:  (PseudoSELECT_I64:{ *:[i64] } GPR32Opnd:{ *:[i32] }:$cond, GPR64Opnd:{ *:[i64] }:$T, GPR64Opnd:{ *:[i64] }:$F)
PATTERN: (select:{ *:[f32] } GPR32Opnd:{ *:[i32] }:$cond, FGR32Opnd:{ *:[f32] }:$T, FGR32Opnd:{ *:[f32] }:$F)
RESULT:  (PseudoSELECT_S:{ *:[f32] } GPR32Opnd:{ *:[i32] }:$cond, FGR32Opnd:{ *:[f32] }:$T, FGR32Opnd:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f64] } GPR32Opnd:{ *:[i32] }:$cond, AFGR64Opnd:{ *:[f64] }:$T, AFGR64Opnd:{ *:[f64] }:$F)
RESULT:  (PseudoSELECT_D32:{ *:[f64] } GPR32Opnd:{ *:[i32] }:$cond, AFGR64Opnd:{ *:[f64] }:$T, AFGR64Opnd:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } GPR32Opnd:{ *:[i32] }:$cond, FGR64Opnd:{ *:[f64] }:$T, FGR64Opnd:{ *:[f64] }:$F)
RESULT:  (PseudoSELECT_D64:{ *:[f64] } GPR32Opnd:{ *:[i32] }:$cond, FGR64Opnd:{ *:[f64] }:$T, FGR64Opnd:{ *:[f64] }:$F)
PATTERN: (MipsCMovFP_T:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$T, FCCRegsOpnd:{ *:[i32] }:$cond, GPR32Opnd:{ *:[i32] }:$F)
RESULT:  (PseudoSELECTFP_T_I:{ *:[i32] } FCCRegsOpnd:{ *:[i32] }:$cond, GPR32Opnd:{ *:[i32] }:$T, GPR32Opnd:{ *:[i32] }:$F)
PATTERN: (MipsCMovFP_T:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$T, FCCRegsOpnd:{ *:[i32] }:$cond, GPR64Opnd:{ *:[i64] }:$F)
RESULT:  (PseudoSELECTFP_T_I64:{ *:[i64] } FCCRegsOpnd:{ *:[i32] }:$cond, GPR64Opnd:{ *:[i64] }:$T, GPR64Opnd:{ *:[i64] }:$F)
PATTERN: (MipsCMovFP_T:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$T, FCCRegsOpnd:{ *:[i32] }:$cond, FGR32Opnd:{ *:[f32] }:$F)
RESULT:  (PseudoSELECTFP_T_S:{ *:[f32] } FCCRegsOpnd:{ *:[i32] }:$cond, FGR32Opnd:{ *:[f32] }:$T, FGR32Opnd:{ *:[f32] }:$F)
PATTERN: (MipsCMovFP_T:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$T, FCCRegsOpnd:{ *:[i32] }:$cond, AFGR64Opnd:{ *:[f64] }:$F)
RESULT:  (PseudoSELECTFP_T_D32:{ *:[f64] } FCCRegsOpnd:{ *:[i32] }:$cond, AFGR64Opnd:{ *:[f64] }:$T, AFGR64Opnd:{ *:[f64] }:$F)
PATTERN: (MipsCMovFP_T:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$T, FCCRegsOpnd:{ *:[i32] }:$cond, FGR64Opnd:{ *:[f64] }:$F)
RESULT:  (PseudoSELECTFP_T_D64:{ *:[f64] } FCCRegsOpnd:{ *:[i32] }:$cond, FGR64Opnd:{ *:[f64] }:$T, FGR64Opnd:{ *:[f64] }:$F)
PATTERN: (MipsCMovFP_F:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$T, FCCRegsOpnd:{ *:[i32] }:$cond, GPR32Opnd:{ *:[i32] }:$F)
RESULT:  (PseudoSELECTFP_F_I:{ *:[i32] } FCCRegsOpnd:{ *:[i32] }:$cond, GPR32Opnd:{ *:[i32] }:$T, GPR32Opnd:{ *:[i32] }:$F)
PATTERN: (MipsCMovFP_F:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$T, FCCRegsOpnd:{ *:[i32] }:$cond, GPR64Opnd:{ *:[i64] }:$F)
RESULT:  (PseudoSELECTFP_F_I64:{ *:[i64] } FCCRegsOpnd:{ *:[i32] }:$cond, GPR64Opnd:{ *:[i64] }:$T, GPR64Opnd:{ *:[i64] }:$F)
PATTERN: (MipsCMovFP_F:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$T, FCCRegsOpnd:{ *:[i32] }:$cond, FGR32Opnd:{ *:[f32] }:$F)
RESULT:  (PseudoSELECTFP_F_S:{ *:[f32] } FCCRegsOpnd:{ *:[i32] }:$cond, FGR32Opnd:{ *:[f32] }:$T, FGR32Opnd:{ *:[f32] }:$F)
PATTERN: (MipsCMovFP_F:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$T, FCCRegsOpnd:{ *:[i32] }:$cond, AFGR64Opnd:{ *:[f64] }:$F)
RESULT:  (PseudoSELECTFP_F_D32:{ *:[f64] } FCCRegsOpnd:{ *:[i32] }:$cond, AFGR64Opnd:{ *:[f64] }:$T, AFGR64Opnd:{ *:[f64] }:$F)
PATTERN: (MipsCMovFP_F:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$T, FCCRegsOpnd:{ *:[i32] }:$cond, FGR64Opnd:{ *:[f64] }:$F)
RESULT:  (PseudoSELECTFP_F_D64:{ *:[f64] } FCCRegsOpnd:{ *:[i32] }:$cond, FGR64Opnd:{ *:[f64] }:$T, FGR64Opnd:{ *:[f64] }:$F)
PATTERN: (ctlz:{ *:[i32] } (xor:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, -1:{ *:[i32] }))
RESULT:  (CLO_R6:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (ctlz:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (CLZ_R6:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (setcc:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft, SETUO:{ *:[Other] })
RESULT:  (CMP_UN_S:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (setcc:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft, SETOEQ:{ *:[Other] })
RESULT:  (CMP_EQ_S:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (setcc:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft, SETUEQ:{ *:[Other] })
RESULT:  (CMP_UEQ_S:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (setcc:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft, SETOLT:{ *:[Other] })
RESULT:  (CMP_LT_S:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (setcc:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft, SETULT:{ *:[Other] })
RESULT:  (CMP_ULT_S:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (setcc:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft, SETOLE:{ *:[Other] })
RESULT:  (CMP_LE_S:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (setcc:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft, SETULE:{ *:[Other] })
RESULT:  (CMP_ULE_S:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (setcc:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft, SETUO:{ *:[Other] })
RESULT:  (CMP_UN_D:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (setcc:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft, SETOEQ:{ *:[Other] })
RESULT:  (CMP_EQ_D:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (setcc:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft, SETUEQ:{ *:[Other] })
RESULT:  (CMP_UEQ_D:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (setcc:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft, SETOLT:{ *:[Other] })
RESULT:  (CMP_LT_D:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (setcc:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft, SETULT:{ *:[Other] })
RESULT:  (CMP_ULT_D:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (setcc:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft, SETOLE:{ *:[Other] })
RESULT:  (CMP_LE_D:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (setcc:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft, SETULE:{ *:[Other] })
RESULT:  (CMP_ULE_D:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (sdiv:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (DIV:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (udiv:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (DIVU:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (srem:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (MOD:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (urem:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (MODU:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (mulhs:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (MUH:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (mulhu:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (MUHU:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (mul:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (MUL_R6:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (MipsFSelect:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fd_in, FGR64Opnd:{ *:[f64] }:$ft, FGR64Opnd:{ *:[f64] }:$fs)
RESULT:  (SEL_D:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fd_in, FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (select:{ *:[f32] } FGRCCOpnd:{ *:[i32] }:$fd_in, FGR32Opnd:{ *:[f32] }:$ft, FGR32Opnd:{ *:[f32] }:$fs)
RESULT:  (SEL_S:{ *:[f32] } FGRCCOpnd:{ *:[i32] }:$fd_in, FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (MipsTailCall GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (TAILCALLR6REG GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (brind GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (PseudoIndirectBranchR6 GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (MipsTailCall GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (TAILCALLHBR6REG GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (brind GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (PseudoIndrectHazardBranchR6 GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (ctlz:{ *:[i64] } (xor:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, -1:{ *:[i64] }))
RESULT:  (DCLO_R6:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs)
PATTERN: (ctlz:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs)
RESULT:  (DCLZ_R6:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs)
PATTERN: (sdiv:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
RESULT:  (DDIV:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
PATTERN: (udiv:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
RESULT:  (DDIVU:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
PATTERN: (srem:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
RESULT:  (DMOD:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
PATTERN: (urem:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
RESULT:  (DMODU:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
PATTERN: (mulhs:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
RESULT:  (DMUH:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
PATTERN: (mulhu:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
RESULT:  (DMUHU:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
PATTERN: (mul:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
RESULT:  (DMUL_R6:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt)
PATTERN: (MipsTailCall GPR64Opnd:{ *:[i64] }:$rs)
RESULT:  (TAILCALL64R6REG GPR64Opnd:{ *:[i64] }:$rs)
PATTERN: (brind GPR64Opnd:{ *:[i64] }:$rs)
RESULT:  (PseudoIndirectBranch64R6 GPR64Opnd:{ *:[i64] }:$rs)
PATTERN: (MipsTailCall GPR64Opnd:{ *:[i64] }:$rs)
RESULT:  (TAILCALLHB64R6REG GPR64Opnd:{ *:[i64] }:$rs)
PATTERN: (brind GPR64Opnd:{ *:[i64] }:$rs)
RESULT:  (PseudoIndrectHazardBranch64R6 GPR64Opnd:{ *:[i64] }:$rs)
PATTERN: (MipsJmpLink CPU16Regs:{ *:[i32] }:$rs)
RESULT:  (JumpLinkReg16 CPU16Regs:{ *:[i32] }:$rs)
PATTERN: (MipsRet)
RESULT:  (RetRA16)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4157:{ *:[iPTR] })
RESULT:  (BPOSGE32_PSEUDO:{ *:[i32] })
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4075:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (ADDU_S_QB:{ *:[v4i8] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4698:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (SUBU_S_QB:{ *:[v4i8] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4053:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (ADDQ_S_PH:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4673:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (SUBQ_S_PH:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4054:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (ADDQ_S_W:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4674:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (SUBQ_S_W:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[i32] } 4503:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (MODSUB:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[i32] } 4583:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs)
RESULT:  (RADDU_W_QB:{ *:[i32] } DSPROpnd:{ *:[v4i8] }:$rs)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4045:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (ABSQ_S_PH:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4047:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (ABSQ_S_W:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4579:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (PRECRQ_QB_PH:{ *:[v4i8] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4578:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (PRECRQ_PH_W:{ *:[v2i16] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4580:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (PRECRQ_RS_PH_W:{ *:[v2i16] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[v4i8] } 4581:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (PRECRQU_S_QB_PH:{ *:[v4i8] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[i32] } 4565:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (PRECEQ_W_PHL:{ *:[i32] } DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[i32] } 4566:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (PRECEQ_W_PHR:{ *:[i32] } DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4567:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (PRECEQU_PH_QBL:{ *:[v2i16] } DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4569:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (PRECEQU_PH_QBR:{ *:[v2i16] } DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4568:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (PRECEQU_PH_QBLA:{ *:[v2i16] } DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4570:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (PRECEQU_PH_QBRA:{ *:[v2i16] } DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4571:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (PRECEU_PH_QBL:{ *:[v2i16] } DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4573:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (PRECEU_PH_QBR:{ *:[v2i16] } DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4572:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (PRECEU_PH_QBLA:{ *:[v2i16] } DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4574:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (PRECEU_PH_QBRA:{ *:[v2i16] } DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[v4i8] } 4600:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa)
RESULT:  (SHLLV_QB:{ *:[v4i8] } DSPROpnd:{ *:[v4i8] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4609:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa)
RESULT:  (SHRLV_QB:{ *:[v4i8] } DSPROpnd:{ *:[v4i8] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4599:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa)
RESULT:  (SHLLV_PH:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4601:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rt, (imm:{ *:[i32] })<<P:Predicate_immZExt4>>:$rs_sa)
RESULT:  (SHLL_S_PH:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rt, (imm:{ *:[i32] }):$rs_sa)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4601:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa)
RESULT:  (SHLLV_S_PH:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4603:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa)
RESULT:  (SHRAV_PH:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4605:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rt, (imm:{ *:[i32] })<<P:Predicate_immZExt4>>:$rs_sa)
RESULT:  (SHRA_R_PH:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rt, (imm:{ *:[i32] }):$rs_sa)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4605:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa)
RESULT:  (SHRAV_R_PH:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4602:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rt, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$rs_sa)
RESULT:  (SHLL_S_W:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, (imm:{ *:[i32] }):$rs_sa)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4602:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa)
RESULT:  (SHLLV_S_W:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa)
PATTERN: (intrinsic_wo_chain:{ *:[i32] } 4607:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rt, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$rs_sa)
RESULT:  (SHRA_R_W:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, (imm:{ *:[i32] }):$rs_sa)
PATTERN: (intrinsic_wo_chain:{ *:[i32] } 4607:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa)
RESULT:  (SHRAV_R_W:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4522:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (MULEU_S_PH_QBL:{ *:[v2i16] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4523:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (MULEU_S_PH_QBR:{ *:[v2i16] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4520:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (MULEQ_S_W_PHL:{ *:[i32] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4521:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (MULEQ_S_W_PHR:{ *:[i32] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4524:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (MULQ_RS_PH:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (MipsMULSAQ_S_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (MULSAQ_S_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsMAQ_S_W_PHL:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (MAQ_S_W_PHL:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsMAQ_S_W_PHR:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (MAQ_S_W_PHR:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsMAQ_SA_W_PHL:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (MAQ_SA_W_PHL:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsMAQ_SA_W_PHR:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (MAQ_SA_W_PHR:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsMFHI:{ *:[i32] } ACC64DSPOpnd:{ *:[Untyped] }:$ac)
RESULT:  (MFHI_DSP:{ *:[i32] } ACC64DSPOpnd:{ *:[Untyped] }:$ac)
PATTERN: (MipsMFLO:{ *:[i32] } ACC64DSPOpnd:{ *:[Untyped] }:$ac)
RESULT:  (MFLO_DSP:{ *:[i32] } ACC64DSPOpnd:{ *:[Untyped] }:$ac)
PATTERN: (MipsDPAU_H_QBL:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPAU_H_QBL:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsDPAU_H_QBR:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPAU_H_QBR:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsDPSU_H_QBL:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPSU_H_QBL:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsDPSU_H_QBR:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPSU_H_QBR:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsDPAQ_S_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPAQ_S_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsDPSQ_S_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPSQ_S_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsDPAQ_SA_L_W:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPAQ_SA_L_W:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsDPSQ_SA_L_W:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPSQ_SA_L_W:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsMult:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (MULT_DSP:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (MipsMultu:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (MULTU_DSP:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (MipsMAdd:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (MADD_DSP:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsMAddu:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (MADDU_DSP:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsMSub:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (MSUB_DSP:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsMSubu:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (MSUBU_DSP:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (intrinsic_void 4223:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (CMPU_EQ_QB DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_void 4225:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (CMPU_LT_QB DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_void 4224:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (CMPU_LE_QB DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4220:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (CMPGU_EQ_QB:{ *:[i32] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4222:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (CMPGU_LT_QB:{ *:[i32] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4221:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (CMPGU_LE_QB:{ *:[i32] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_void 4214:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (CMP_EQ_PH DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_void 4216:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (CMP_LT_PH DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_void 4215:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (CMP_LE_PH DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[i32] } 4139:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (BITREV:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4550:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (PACKRL_PH:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4586:{ *:[iPTR] }, (imm:{ *:[i32] })<<P:Predicate_immZExt8>>:$imm)
RESULT:  (REPL_QB:{ *:[v4i8] } (imm:{ *:[i32] }):$imm)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4585:{ *:[iPTR] }, (imm:{ *:[i32] })<<P:Predicate_immSExt10>>:$imm)
RESULT:  (REPL_PH:{ *:[v2i16] } (imm:{ *:[i32] }):$imm)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4586:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (REPLV_QB:{ *:[v4i8] } GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4585:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (REPLV_PH:{ *:[v2i16] } GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[v4i8] } 4564:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (PICK_QB:{ *:[v4i8] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4563:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (PICK_PH:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4440:{ *:[iPTR] }, iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[i32] }:$index)
RESULT:  (LWX:{ *:[i32] } iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[i32] }:$index)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4438:{ *:[iPTR] }, iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[i32] }:$index)
RESULT:  (LHX:{ *:[i32] } iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[i32] }:$index)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4427:{ *:[iPTR] }, iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[i32] }:$index)
RESULT:  (LBUX:{ *:[i32] } iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[i32] }:$index)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4422:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$src, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (INSV:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$src, GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (MipsSHILO:{ *:[Untyped] } (imm:{ *:[i32] })<<P:Predicate_immSExt6>>:$shift, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (SHILO:{ *:[Untyped] } (imm:{ *:[i32] }):$shift, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsSHILO:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (SHILOV:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsMTHLIP:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (MTHLIP:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4584:{ *:[iPTR] }, (timm:{ *:[i32] })<<P:Predicate_timmZExt10>>:$mask)
RESULT:  (RDDSP:{ *:[i32] } (timm:{ *:[i32] }):$mask)
PATTERN: (intrinsic_void 4713:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs, (timm:{ *:[i32] })<<P:Predicate_timmZExt10>>:$mask)
RESULT:  (WRDSP GPR32Opnd:{ *:[i32] }:$rs, (timm:{ *:[i32] }):$mask)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4072:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (ADDU_PH:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4074:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (ADDU_S_PH:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4695:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (SUBU_PH:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4697:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (SUBU_S_PH:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4217:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (CMPGDU_EQ_QB:{ *:[i32] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4219:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (CMPGDU_LT_QB:{ *:[i32] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4218:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (CMPGDU_LE_QB:{ *:[i32] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[v4i8] } 4046:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (ABSQ_S_QB:{ *:[v4i8] } DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4076:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (ADDUH_QB:{ *:[v4i8] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4077:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (ADDUH_R_QB:{ *:[v4i8] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4699:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (SUBUH_QB:{ *:[v4i8] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4700:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (SUBUH_R_QB:{ *:[v4i8] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4055:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (ADDQH_PH:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4056:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (ADDQH_R_PH:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4675:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (SUBQH_PH:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4676:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (SUBQH_R_PH:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[i32] } 4058:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (ADDQH_W:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[i32] } 4057:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (ADDQH_R_W:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[i32] } 4678:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (SUBQH_W:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[i32] } 4677:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (SUBQH_R_W:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4519:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (MUL_S_PH:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4527:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (MULQ_S_W:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4525:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (MULQ_RS_W:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4526:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (MULQ_S_PH:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (MipsDPA_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPA_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsDPS_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPS_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsDPAQX_S_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPAQX_S_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsDPAQX_SA_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPAQX_SA_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsDPAX_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPAX_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsDPSX_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPSX_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsDPSQX_S_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPSQX_S_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsDPSQX_SA_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPSQX_SA_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsMULSA_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (MULSA_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (intrinsic_w_chain:{ *:[v4i8] } 4575:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (PRECR_QB_PH:{ *:[v4i8] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4576:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$src, GPR32Opnd:{ *:[i32] }:$rs, (timm:{ *:[i32] })<<P:Predicate_timmZExt5>>:$sa)
RESULT:  (PRECR_SRA_PH_W:{ *:[v2i16] } GPR32Opnd:{ *:[i32] }:$rs, (timm:{ *:[i32] }):$sa, GPR32Opnd:{ *:[i32] }:$src)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4577:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$src, GPR32Opnd:{ *:[i32] }:$rs, (timm:{ *:[i32] })<<P:Predicate_timmZExt5>>:$sa)
RESULT:  (PRECR_SRA_R_PH_W:{ *:[v2i16] } GPR32Opnd:{ *:[i32] }:$rs, (timm:{ *:[i32] }):$sa, GPR32Opnd:{ *:[i32] }:$src)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4604:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa)
RESULT:  (SHRAV_QB:{ *:[v4i8] } DSPROpnd:{ *:[v4i8] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4606:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rt, (imm:{ *:[i32] })<<P:Predicate_immZExt3>>:$rs_sa)
RESULT:  (SHRA_R_QB:{ *:[v4i8] } DSPROpnd:{ *:[v4i8] }:$rt, (imm:{ *:[i32] }):$rs_sa)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4606:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa)
RESULT:  (SHRAV_R_QB:{ *:[v4i8] } DSPROpnd:{ *:[v4i8] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4608:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa)
RESULT:  (SHRLV_PH:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs_sa)
PATTERN: (intrinsic_wo_chain:{ *:[i32] } 4089:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$src, GPR32Opnd:{ *:[i32] }:$rs, (timm:{ *:[i32] })<<P:Predicate_timmZExt5>>:$sa)
RESULT:  (APPEND:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (timm:{ *:[i32] }):$sa, GPR32Opnd:{ *:[i32] }:$src)
PATTERN: (intrinsic_wo_chain:{ *:[i32] } 4114:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$src, GPR32Opnd:{ *:[i32] }:$rs, (timm:{ *:[i32] })<<P:Predicate_timmZExt2>>:$sa)
RESULT:  (BALIGN:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (timm:{ *:[i32] }):$sa, GPR32Opnd:{ *:[i32] }:$src)
PATTERN: (intrinsic_wo_chain:{ *:[i32] } 4582:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$src, GPR32Opnd:{ *:[i32] }:$rs, (timm:{ *:[i32] })<<P:Predicate_timmZExt5>>:$sa)
RESULT:  (PREPEND:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (timm:{ *:[i32] }):$sa, GPR32Opnd:{ *:[i32] }:$src)
PATTERN: (MipsMTLOHI:{ *:[Untyped] } GPR32:{ *:[i32] }:$lo, GPR32:{ *:[i32] }:$hi)
RESULT:  (PseudoMTLOHI_DSP:{ *:[Untyped] } GPR32:{ *:[i32] }:$lo, GPR32:{ *:[i32] }:$hi)
PATTERN: (intrinsic_w_chain:{ *:[v2i64] } 4436:{ *:[iPTR] }, iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$imm)
RESULT:  (LDR_D:{ *:[v2i64] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$imm)
PATTERN: (intrinsic_w_chain:{ *:[v4i32] } 4437:{ *:[iPTR] }, iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$imm)
RESULT:  (LDR_W:{ *:[v4i32] } iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$imm)
PATTERN: (intrinsic_void 4670:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$dst, iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$imm)
RESULT:  (STR_D MSA128DOpnd:{ *:[v2i64] }:$dst, iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$imm)
PATTERN: (intrinsic_void 4671:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$dst, iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$imm)
RESULT:  (STR_W MSA128WOpnd:{ *:[v4i32] }:$dst, iPTR:{ *:[iPTR] }:$ptr, GPR32:{ *:[i32] }:$imm)
PATTERN: (intrinsic_wo_chain:{ *:[v16i8] } 4048:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (ADD_A_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4050:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (ADD_A_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4051:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (ADD_A_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4049:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (ADD_A_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v16i8] } 4059:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (ADDS_A_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4061:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (ADDS_A_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4062:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (ADDS_A_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4060:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (ADDS_A_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v16i8] } 4063:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (ADDS_S_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4065:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (ADDS_S_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4066:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (ADDS_S_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4064:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (ADDS_S_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v16i8] } 4067:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (ADDS_U_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4069:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (ADDS_U_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4070:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (ADDS_U_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4068:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (ADDS_U_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (add:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (ADDV_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (add:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (ADDV_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (add:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (ADDV_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (add:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (ADDV_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (add:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm5:{ *:[v16i8] }:$imm)
RESULT:  (ADDVI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm5:{ *:[v16i8] }:$imm)
PATTERN: (add:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_uimm5:{ *:[v8i16] }:$imm)
RESULT:  (ADDVI_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_uimm5:{ *:[v8i16] }:$imm)
PATTERN: (add:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$imm)
RESULT:  (ADDVI_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$imm)
PATTERN: (add:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_uimm5:{ *:[v2i64] }:$imm)
RESULT:  (ADDVI_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_uimm5:{ *:[v2i64] }:$imm)
PATTERN: (and:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (AND_V:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (and:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (AND_V_H_PSEUDO:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (and:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (AND_V_W_PSEUDO:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (and:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (AND_V_D_PSEUDO:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (and:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm8:{ *:[v16i8] }:$u8)
RESULT:  (ANDI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm8:{ *:[v16i8] }:$u8)
PATTERN: (intrinsic_wo_chain:{ *:[v16i8] } 4090:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (ASUB_S_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4092:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (ASUB_S_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4093:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (ASUB_S_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4091:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (ASUB_S_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v16i8] } 4094:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (ASUB_U_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4096:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (ASUB_U_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4097:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (ASUB_U_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4095:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (ASUB_U_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v16i8] } 4098:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (AVE_S_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4100:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (AVE_S_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4101:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (AVE_S_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4099:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (AVE_S_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v16i8] } 4102:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (AVE_U_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4104:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (AVE_U_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4105:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (AVE_U_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4103:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (AVE_U_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v16i8] } 4106:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (AVER_S_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4108:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (AVER_S_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4109:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (AVER_S_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4107:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (AVER_S_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v16i8] } 4110:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (AVER_U_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4112:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (AVER_U_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4113:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (AVER_U_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4111:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (AVER_U_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (and:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, (xor:{ *:[v16i8] } (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128BOpnd:{ *:[v16i8] }:$wt), immAllOnesV:{ *:[v16i8] }))
RESULT:  (BCLR_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (and:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, (xor:{ *:[v8i16] } (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128HOpnd:{ *:[v8i16] }:$wt), immAllOnesV:{ *:[v8i16] }))
RESULT:  (BCLR_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (and:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, (xor:{ *:[v4i32] } (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128WOpnd:{ *:[v4i32] }:$wt), immAllOnesV:{ *:[v4i32] }))
RESULT:  (BCLR_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (and:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, (xor:{ *:[v2i64] } (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, MSA128DOpnd:{ *:[v2i64] }:$wt), (bitconvert:{ *:[v2i64] } immAllOnesV:{ *:[v4i32] })))
RESULT:  (BCLR_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (and:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplat_uimm_inv_pow2:{ *:[v16i8] }:$m)
RESULT:  (BCLRI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplat_uimm_inv_pow2:{ *:[v16i8] }:$m)
PATTERN: (and:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplat_uimm_inv_pow2:{ *:[v8i16] }:$m)
RESULT:  (BCLRI_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplat_uimm_inv_pow2:{ *:[v8i16] }:$m)
PATTERN: (and:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplat_uimm_inv_pow2:{ *:[v4i32] }:$m)
RESULT:  (BCLRI_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplat_uimm_inv_pow2:{ *:[v4i32] }:$m)
PATTERN: (and:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplat_uimm_inv_pow2:{ *:[v2i64] }:$m)
RESULT:  (BCLRI_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplat_uimm_inv_pow2:{ *:[v2i64] }:$m)
PATTERN: (intrinsic_wo_chain:{ *:[v16i8] } 4123:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (BINSL_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4125:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (BINSL_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4126:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (BINSL_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4124:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$wd_in, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (BINSL_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (vselect:{ *:[v16i8] } vsplat_maskl_bits_uimm3:{ *:[v16i8] }:$m, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wd_in)
RESULT:  (BINSLI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, vsplat_maskl_bits_uimm3:{ *:[v16i8] }:$m)
PATTERN: (vselect:{ *:[v8i16] } vsplat_maskl_bits_uimm4:{ *:[v8i16] }:$m, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wd_in)
RESULT:  (BINSLI_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, vsplat_maskl_bits_uimm4:{ *:[v8i16] }:$m)
PATTERN: (vselect:{ *:[v4i32] } vsplat_maskl_bits_uimm5:{ *:[v4i32] }:$m, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wd_in)
RESULT:  (BINSLI_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, vsplat_maskl_bits_uimm5:{ *:[v4i32] }:$m)
PATTERN: (vselect:{ *:[v2i64] } vsplat_maskl_bits_uimm6:{ *:[v2i64] }:$m, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wd_in)
RESULT:  (BINSLI_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, MSA128DOpnd:{ *:[v2i64] }:$ws, vsplat_maskl_bits_uimm6:{ *:[v2i64] }:$m)
PATTERN: (intrinsic_wo_chain:{ *:[v16i8] } 4131:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (BINSR_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4133:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (BINSR_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4134:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (BINSR_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4132:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$wd_in, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (BINSR_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (vselect:{ *:[v16i8] } vsplat_maskr_bits_uimm3:{ *:[v16i8] }:$m, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wd_in)
RESULT:  (BINSRI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, vsplat_maskr_bits_uimm3:{ *:[v16i8] }:$m)
PATTERN: (vselect:{ *:[v8i16] } vsplat_maskr_bits_uimm4:{ *:[v8i16] }:$m, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wd_in)
RESULT:  (BINSRI_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, vsplat_maskr_bits_uimm4:{ *:[v8i16] }:$m)
PATTERN: (vselect:{ *:[v4i32] } vsplat_maskr_bits_uimm5:{ *:[v4i32] }:$m, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wd_in)
RESULT:  (BINSRI_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, vsplat_maskr_bits_uimm5:{ *:[v4i32] }:$m)
PATTERN: (vselect:{ *:[v2i64] } vsplat_maskr_bits_uimm6:{ *:[v2i64] }:$m, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wd_in)
RESULT:  (BINSRI_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, MSA128DOpnd:{ *:[v2i64] }:$ws, vsplat_maskr_bits_uimm6:{ *:[v2i64] }:$m)
PATTERN: (vselect:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wt, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wd_in)
RESULT:  (BMNZ_V:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (vselect:{ *:[v16i8] } vsplati8_uimm8:{ *:[v16i8] }:$u8, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wd_in)
RESULT:  (BMNZI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm8:{ *:[v16i8] }:$u8)
PATTERN: (vselect:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wt, MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws)
RESULT:  (BMZ_V:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (vselect:{ *:[v16i8] } vsplati8_uimm8:{ *:[v16i8] }:$u8, MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws)
RESULT:  (BMZI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm8:{ *:[v16i8] }:$u8)
PATTERN: (xor:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128BOpnd:{ *:[v16i8] }:$wt))
RESULT:  (BNEG_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (xor:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128HOpnd:{ *:[v8i16] }:$wt))
RESULT:  (BNEG_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (xor:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128WOpnd:{ *:[v4i32] }:$wt))
RESULT:  (BNEG_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (xor:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, MSA128DOpnd:{ *:[v2i64] }:$wt))
RESULT:  (BNEG_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (xor:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplat_uimm_pow2:{ *:[v16i8] }:$m)
RESULT:  (BNEGI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplat_uimm_pow2:{ *:[v16i8] }:$m)
PATTERN: (xor:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplat_uimm_pow2:{ *:[v8i16] }:$m)
RESULT:  (BNEGI_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplat_uimm_pow2:{ *:[v8i16] }:$m)
PATTERN: (xor:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplat_uimm_pow2:{ *:[v4i32] }:$m)
RESULT:  (BNEGI_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplat_uimm_pow2:{ *:[v4i32] }:$m)
PATTERN: (xor:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplat_uimm_pow2:{ *:[v2i64] }:$m)
RESULT:  (BNEGI_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplat_uimm_pow2:{ *:[v2i64] }:$m)
PATTERN: (vselect:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$wt, MSA128BOpnd:{ *:[v16i8] }:$ws)
RESULT:  (BSEL_V:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (vselect:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$wt, MSA128HOpnd:{ *:[v8i16] }:$ws)
RESULT:  (BSEL_H_PSEUDO:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (vselect:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$wt, MSA128WOpnd:{ *:[v4i32] }:$ws)
RESULT:  (BSEL_W_PSEUDO:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (vselect:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, MSA128DOpnd:{ *:[v2i64] }:$wt, MSA128DOpnd:{ *:[v2i64] }:$ws)
RESULT:  (BSEL_D_PSEUDO:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (vselect:{ *:[v4f32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128WOpnd:{ *:[v4f32] }:$wt, MSA128WOpnd:{ *:[v4f32] }:$ws)
RESULT:  (BSEL_FW_PSEUDO:{ *:[v4f32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (vselect:{ *:[v2f64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, MSA128DOpnd:{ *:[v2f64] }:$wt, MSA128DOpnd:{ *:[v2f64] }:$ws)
RESULT:  (BSEL_FD_PSEUDO:{ *:[v2f64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (vselect:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, vsplati8_uimm8:{ *:[v16i8] }:$u8, MSA128BOpnd:{ *:[v16i8] }:$ws)
RESULT:  (BSELI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm8:{ *:[v16i8] }:$u8)
PATTERN: (or:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128BOpnd:{ *:[v16i8] }:$wt))
RESULT:  (BSET_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (or:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128HOpnd:{ *:[v8i16] }:$wt))
RESULT:  (BSET_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (or:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128WOpnd:{ *:[v4i32] }:$wt))
RESULT:  (BSET_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (or:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, MSA128DOpnd:{ *:[v2i64] }:$wt))
RESULT:  (BSET_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (or:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplat_uimm_pow2:{ *:[v16i8] }:$m)
RESULT:  (BSETI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplat_uimm_pow2:{ *:[v16i8] }:$m)
PATTERN: (or:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplat_uimm_pow2:{ *:[v8i16] }:$m)
RESULT:  (BSETI_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplat_uimm_pow2:{ *:[v8i16] }:$m)
PATTERN: (or:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplat_uimm_pow2:{ *:[v4i32] }:$m)
RESULT:  (BSETI_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplat_uimm_pow2:{ *:[v4i32] }:$m)
PATTERN: (or:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplat_uimm_pow2:{ *:[v2i64] }:$m)
RESULT:  (BSETI_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplat_uimm_pow2:{ *:[v2i64] }:$m)
PATTERN: (vsetcc:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt, SETEQ:{ *:[Other] })
RESULT:  (CEQ_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (vsetcc:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt, SETEQ:{ *:[Other] })
RESULT:  (CEQ_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (vsetcc:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt, SETEQ:{ *:[Other] })
RESULT:  (CEQ_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (vsetcc:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt, SETEQ:{ *:[Other] })
RESULT:  (CEQ_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (vsetcc:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_simm5:{ *:[v16i8] }:$imm, SETEQ:{ *:[Other] })
RESULT:  (CEQI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_simm5:{ *:[v16i8] }:$imm)
PATTERN: (vsetcc:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_simm5:{ *:[v8i16] }:$imm, SETEQ:{ *:[Other] })
RESULT:  (CEQI_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_simm5:{ *:[v8i16] }:$imm)
PATTERN: (vsetcc:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_simm5:{ *:[v4i32] }:$imm, SETEQ:{ *:[Other] })
RESULT:  (CEQI_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_simm5:{ *:[v4i32] }:$imm)
PATTERN: (vsetcc:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_simm5:{ *:[v2i64] }:$imm, SETEQ:{ *:[Other] })
RESULT:  (CEQI_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_simm5:{ *:[v2i64] }:$imm)
PATTERN: (vsetcc:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt, SETLE:{ *:[Other] })
RESULT:  (CLE_S_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (vsetcc:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt, SETLE:{ *:[Other] })
RESULT:  (CLE_S_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (vsetcc:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt, SETLE:{ *:[Other] })
RESULT:  (CLE_S_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (vsetcc:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt, SETLE:{ *:[Other] })
RESULT:  (CLE_S_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (vsetcc:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt, SETULE:{ *:[Other] })
RESULT:  (CLE_U_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (vsetcc:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt, SETULE:{ *:[Other] })
RESULT:  (CLE_U_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (vsetcc:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt, SETULE:{ *:[Other] })
RESULT:  (CLE_U_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (vsetcc:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt, SETULE:{ *:[Other] })
RESULT:  (CLE_U_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (vsetcc:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_simm5:{ *:[v16i8] }:$imm, SETLE:{ *:[Other] })
RESULT:  (CLEI_S_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_simm5:{ *:[v16i8] }:$imm)
PATTERN: (vsetcc:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_simm5:{ *:[v8i16] }:$imm, SETLE:{ *:[Other] })
RESULT:  (CLEI_S_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_simm5:{ *:[v8i16] }:$imm)
PATTERN: (vsetcc:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_simm5:{ *:[v4i32] }:$imm, SETLE:{ *:[Other] })
RESULT:  (CLEI_S_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_simm5:{ *:[v4i32] }:$imm)
PATTERN: (vsetcc:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_simm5:{ *:[v2i64] }:$imm, SETLE:{ *:[Other] })
RESULT:  (CLEI_S_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_simm5:{ *:[v2i64] }:$imm)
PATTERN: (vsetcc:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm5:{ *:[v16i8] }:$imm, SETULE:{ *:[Other] })
RESULT:  (CLEI_U_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm5:{ *:[v16i8] }:$imm)
PATTERN: (vsetcc:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_uimm5:{ *:[v8i16] }:$imm, SETULE:{ *:[Other] })
RESULT:  (CLEI_U_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_uimm5:{ *:[v8i16] }:$imm)
PATTERN: (vsetcc:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$imm, SETULE:{ *:[Other] })
RESULT:  (CLEI_U_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$imm)
PATTERN: (vsetcc:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_uimm5:{ *:[v2i64] }:$imm, SETULE:{ *:[Other] })
RESULT:  (CLEI_U_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_uimm5:{ *:[v2i64] }:$imm)
PATTERN: (vsetcc:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt, SETLT:{ *:[Other] })
RESULT:  (CLT_S_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (vsetcc:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt, SETLT:{ *:[Other] })
RESULT:  (CLT_S_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (vsetcc:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt, SETLT:{ *:[Other] })
RESULT:  (CLT_S_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (vsetcc:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt, SETLT:{ *:[Other] })
RESULT:  (CLT_S_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (vsetcc:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt, SETULT:{ *:[Other] })
RESULT:  (CLT_U_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (vsetcc:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt, SETULT:{ *:[Other] })
RESULT:  (CLT_U_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (vsetcc:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt, SETULT:{ *:[Other] })
RESULT:  (CLT_U_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (vsetcc:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt, SETULT:{ *:[Other] })
RESULT:  (CLT_U_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (vsetcc:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_simm5:{ *:[v16i8] }:$imm, SETLT:{ *:[Other] })
RESULT:  (CLTI_S_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_simm5:{ *:[v16i8] }:$imm)
PATTERN: (vsetcc:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_simm5:{ *:[v8i16] }:$imm, SETLT:{ *:[Other] })
RESULT:  (CLTI_S_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_simm5:{ *:[v8i16] }:$imm)
PATTERN: (vsetcc:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_simm5:{ *:[v4i32] }:$imm, SETLT:{ *:[Other] })
RESULT:  (CLTI_S_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_simm5:{ *:[v4i32] }:$imm)
PATTERN: (vsetcc:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_simm5:{ *:[v2i64] }:$imm, SETLT:{ *:[Other] })
RESULT:  (CLTI_S_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_simm5:{ *:[v2i64] }:$imm)
PATTERN: (vsetcc:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm5:{ *:[v16i8] }:$imm, SETULT:{ *:[Other] })
RESULT:  (CLTI_U_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm5:{ *:[v16i8] }:$imm)
PATTERN: (vsetcc:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_uimm5:{ *:[v8i16] }:$imm, SETULT:{ *:[Other] })
RESULT:  (CLTI_U_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_uimm5:{ *:[v8i16] }:$imm)
PATTERN: (vsetcc:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$imm, SETULT:{ *:[Other] })
RESULT:  (CLTI_U_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$imm)
PATTERN: (vsetcc:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_uimm5:{ *:[v2i64] }:$imm, SETULT:{ *:[Other] })
RESULT:  (CLTI_U_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_uimm5:{ *:[v2i64] }:$imm)
PATTERN: (MipsVExtractSExt:{ *:[i32] } MSA128BOpnd:{ *:[v16i8] }:$ws, (imm:{ *:[iPTR] })<<P:Predicate_immZExt4Ptr>>:$n, i8:{ *:[Other] })
RESULT:  (COPY_S_B:{ *:[i32] } MSA128BOpnd:{ *:[v16i8] }:$ws, (imm:{ *:[iPTR] }):$n)
PATTERN: (MipsVExtractSExt:{ *:[i32] } MSA128HOpnd:{ *:[v8i16] }:$ws, (imm:{ *:[iPTR] })<<P:Predicate_immZExt3Ptr>>:$n, i16:{ *:[Other] })
RESULT:  (COPY_S_H:{ *:[i32] } MSA128HOpnd:{ *:[v8i16] }:$ws, (imm:{ *:[iPTR] }):$n)
PATTERN: (MipsVExtractSExt:{ *:[i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, (imm:{ *:[iPTR] })<<P:Predicate_immZExt2Ptr>>:$n, i32:{ *:[Other] })
RESULT:  (COPY_S_W:{ *:[i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, (imm:{ *:[iPTR] }):$n)
PATTERN: (MipsVExtractSExt:{ *:[i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, (imm:{ *:[iPTR] })<<P:Predicate_immZExt1Ptr>>:$n, i64:{ *:[Other] })
RESULT:  (COPY_S_D:{ *:[i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, (imm:{ *:[iPTR] }):$n)
PATTERN: (MipsVExtractZExt:{ *:[i32] } MSA128BOpnd:{ *:[v16i8] }:$ws, (imm:{ *:[iPTR] })<<P:Predicate_immZExt4Ptr>>:$n, i8:{ *:[Other] })
RESULT:  (COPY_U_B:{ *:[i32] } MSA128BOpnd:{ *:[v16i8] }:$ws, (imm:{ *:[iPTR] }):$n)
PATTERN: (MipsVExtractZExt:{ *:[i32] } MSA128HOpnd:{ *:[v8i16] }:$ws, (imm:{ *:[iPTR] })<<P:Predicate_immZExt3Ptr>>:$n, i16:{ *:[Other] })
RESULT:  (COPY_U_H:{ *:[i32] } MSA128HOpnd:{ *:[v8i16] }:$ws, (imm:{ *:[iPTR] }):$n)
PATTERN: (MipsVExtractZExt:{ *:[i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, (imm:{ *:[iPTR] })<<P:Predicate_immZExt2Ptr>>:$n, i32:{ *:[Other] })
RESULT:  (COPY_U_W:{ *:[i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, (imm:{ *:[iPTR] }):$n)
PATTERN: (vector_extract:{ *:[f32] } MSA128W:{ *:[v4f32] }:$ws, (imm:{ *:[iPTR] })<<P:Predicate_immZExt2Ptr>>:$n)
RESULT:  (COPY_FW_PSEUDO:{ *:[f32] } MSA128W:{ *:[v4f32] }:$ws, (imm:{ *:[iPTR] }):$n)
PATTERN: (vector_extract:{ *:[f64] } MSA128D:{ *:[v2f64] }:$ws, (imm:{ *:[iPTR] })<<P:Predicate_immZExt1Ptr>>:$n)
RESULT:  (COPY_FD_PSEUDO:{ *:[f64] } MSA128D:{ *:[v2f64] }:$ws, (imm:{ *:[iPTR] }):$n)
PATTERN: (sdiv:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (DIV_S_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (sdiv:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (DIV_S_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (sdiv:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (DIV_S_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (sdiv:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (DIV_S_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (udiv:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (DIV_U_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (udiv:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (DIV_U_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (udiv:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (DIV_U_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (udiv:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (DIV_U_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4245:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (DOTP_S_H:{ *:[v8i16] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4246:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (DOTP_S_W:{ *:[v4i32] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4244:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (DOTP_S_D:{ *:[v2i64] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4248:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (DOTP_U_H:{ *:[v8i16] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4249:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (DOTP_U_W:{ *:[v4i32] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4247:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (DOTP_U_D:{ *:[v2i64] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4252:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (DPADD_S_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4253:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (DPADD_S_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4251:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (DPADD_S_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4255:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (DPADD_U_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4256:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (DPADD_U_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4254:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (DPADD_U_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4272:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (DPSUB_S_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4273:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (DPSUB_S_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4271:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (DPSUB_S_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4275:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (DPSUB_U_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4276:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (DPSUB_U_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4274:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (DPSUB_U_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (fadd:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
RESULT:  (FADD_W:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (fadd:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
RESULT:  (FADD_D:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4287:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
RESULT:  (FCAF_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4286:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
RESULT:  (FCAF_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (vfsetcc:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt, SETOEQ:{ *:[Other] })
RESULT:  (FCEQ_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (vfsetcc:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt, SETOEQ:{ *:[Other] })
RESULT:  (FCEQ_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (vfsetcc:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt, SETOLE:{ *:[Other] })
RESULT:  (FCLE_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (vfsetcc:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt, SETOLE:{ *:[Other] })
RESULT:  (FCLE_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (vfsetcc:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt, SETOLT:{ *:[Other] })
RESULT:  (FCLT_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (vfsetcc:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt, SETOLT:{ *:[Other] })
RESULT:  (FCLT_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4291:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4f32] }:$ws)
RESULT:  (FCLASS_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4290:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2f64] }:$ws)
RESULT:  (FCLASS_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws)
PATTERN: (vfsetcc:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt, SETONE:{ *:[Other] })
RESULT:  (FCNE_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (vfsetcc:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt, SETONE:{ *:[Other] })
RESULT:  (FCNE_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (vfsetcc:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt, SETO:{ *:[Other] })
RESULT:  (FCOR_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (vfsetcc:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt, SETO:{ *:[Other] })
RESULT:  (FCOR_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (vfsetcc:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt, SETUEQ:{ *:[Other] })
RESULT:  (FCUEQ_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (vfsetcc:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt, SETUEQ:{ *:[Other] })
RESULT:  (FCUEQ_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (vfsetcc:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt, SETULE:{ *:[Other] })
RESULT:  (FCULE_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (vfsetcc:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt, SETULE:{ *:[Other] })
RESULT:  (FCULE_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (vfsetcc:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt, SETULT:{ *:[Other] })
RESULT:  (FCULT_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (vfsetcc:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt, SETULT:{ *:[Other] })
RESULT:  (FCULT_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (vfsetcc:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt, SETUO:{ *:[Other] })
RESULT:  (FCUN_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (vfsetcc:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt, SETUO:{ *:[Other] })
RESULT:  (FCUN_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (vfsetcc:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt, SETUNE:{ *:[Other] })
RESULT:  (FCUNE_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (vfsetcc:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt, SETUNE:{ *:[Other] })
RESULT:  (FCUNE_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (fdiv:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
RESULT:  (FDIV_W:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (fdiv:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
RESULT:  (FDIV_D:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8f16] } 4312:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
RESULT:  (FEXDO_H:{ *:[v8f16] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4f32] } 4313:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
RESULT:  (FEXDO_W:{ *:[v4f32] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (fmul:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws, (fexp2:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$wt))
RESULT:  (FEXP2_W:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (fmul:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws, (fexp2:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$wt))
RESULT:  (FEXP2_D:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (fexp2:{ *:[v4f32] } MSA128W:{ *:[v4f32] }:$ws)
RESULT:  (FEXP2_W_1_PSEUDO:{ *:[v4f32] } MSA128W:{ *:[v4f32] }:$ws)
PATTERN: (fexp2:{ *:[v2f64] } MSA128D:{ *:[v2f64] }:$ws)
RESULT:  (FEXP2_D_1_PSEUDO:{ *:[v2f64] } MSA128D:{ *:[v2f64] }:$ws)
PATTERN: (intrinsic_wo_chain:{ *:[v4f32] } 4317:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8f16] }:$ws)
RESULT:  (FEXUPL_W:{ *:[v4f32] } MSA128HOpnd:{ *:[v8f16] }:$ws)
PATTERN: (intrinsic_wo_chain:{ *:[v2f64] } 4316:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4f32] }:$ws)
RESULT:  (FEXUPL_D:{ *:[v2f64] } MSA128WOpnd:{ *:[v4f32] }:$ws)
PATTERN: (intrinsic_wo_chain:{ *:[v4f32] } 4319:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8f16] }:$ws)
RESULT:  (FEXUPR_W:{ *:[v4f32] } MSA128HOpnd:{ *:[v8f16] }:$ws)
PATTERN: (intrinsic_wo_chain:{ *:[v2f64] } 4318:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4f32] }:$ws)
RESULT:  (FEXUPR_D:{ *:[v2f64] } MSA128WOpnd:{ *:[v4f32] }:$ws)
PATTERN: (sint_to_fp:{ *:[v4f32] } MSA128WOpnd:{ *:[v4i32] }:$ws)
RESULT:  (FFINT_S_W:{ *:[v4f32] } MSA128WOpnd:{ *:[v4i32] }:$ws)
PATTERN: (sint_to_fp:{ *:[v2f64] } MSA128DOpnd:{ *:[v2i64] }:$ws)
RESULT:  (FFINT_S_D:{ *:[v2f64] } MSA128DOpnd:{ *:[v2i64] }:$ws)
PATTERN: (uint_to_fp:{ *:[v4f32] } MSA128WOpnd:{ *:[v4i32] }:$ws)
RESULT:  (FFINT_U_W:{ *:[v4f32] } MSA128WOpnd:{ *:[v4i32] }:$ws)
PATTERN: (uint_to_fp:{ *:[v2f64] } MSA128DOpnd:{ *:[v2i64] }:$ws)
RESULT:  (FFINT_U_D:{ *:[v2f64] } MSA128DOpnd:{ *:[v2i64] }:$ws)
PATTERN: (intrinsic_wo_chain:{ *:[v4f32] } 4325:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws)
RESULT:  (FFQL_W:{ *:[v4f32] } MSA128HOpnd:{ *:[v8i16] }:$ws)
PATTERN: (intrinsic_wo_chain:{ *:[v2f64] } 4324:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws)
RESULT:  (FFQL_D:{ *:[v2f64] } MSA128WOpnd:{ *:[v4i32] }:$ws)
PATTERN: (intrinsic_wo_chain:{ *:[v4f32] } 4327:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws)
RESULT:  (FFQR_W:{ *:[v4f32] } MSA128HOpnd:{ *:[v8i16] }:$ws)
PATTERN: (intrinsic_wo_chain:{ *:[v2f64] } 4326:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws)
RESULT:  (FFQR_D:{ *:[v2f64] } MSA128WOpnd:{ *:[v4i32] }:$ws)
PATTERN: (build_vector:{ *:[v16i8] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (FILL_B:{ *:[v16i8] } GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (build_vector:{ *:[v8i16] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (FILL_H:{ *:[v8i16] } GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (build_vector:{ *:[v4i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (FILL_W:{ *:[v4i32] } GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (build_vector:{ *:[v2i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rs)
RESULT:  (FILL_D:{ *:[v2i64] } GPR64Opnd:{ *:[i64] }:$rs)
PATTERN: (build_vector:{ *:[v4f32] } FGR32:{ *:[f32] }:$fs, FGR32:{ *:[f32] }:$fs, FGR32:{ *:[f32] }:$fs, FGR32:{ *:[f32] }:$fs)
RESULT:  (FILL_FW_PSEUDO:{ *:[v4f32] } FGR32:{ *:[f32] }:$fs)
PATTERN: (build_vector:{ *:[v2f64] } FGR64:{ *:[f64] }:$fs, FGR64:{ *:[f64] }:$fs)
RESULT:  (FILL_FD_PSEUDO:{ *:[v2f64] } FGR64:{ *:[f64] }:$fs)
PATTERN: (flog2:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws)
RESULT:  (FLOG2_W:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws)
PATTERN: (flog2:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws)
RESULT:  (FLOG2_D:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws)
PATTERN: (fma:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$wd_in, MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
RESULT:  (FMADD_W:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$wd_in, MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (fma:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$wd_in, MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
RESULT:  (FMADD_D:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$wd_in, MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4f32] } 4339:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
RESULT:  (FMAX_W:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2f64] } 4338:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
RESULT:  (FMAX_D:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4f32] } 4337:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
RESULT:  (FMAX_A_W:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2f64] } 4336:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
RESULT:  (FMAX_A_D:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4f32] } 4343:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
RESULT:  (FMIN_W:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2f64] } 4342:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
RESULT:  (FMIN_D:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4f32] } 4341:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
RESULT:  (FMIN_A_W:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2f64] } 4340:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
RESULT:  (FMIN_A_D:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (MipsFMS:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$wd_in, MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
RESULT:  (FMSUB_W:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$wd_in, MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (MipsFMS:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$wd_in, MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
RESULT:  (FMSUB_D:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$wd_in, MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (fmul:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
RESULT:  (FMUL_W:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (fmul:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
RESULT:  (FMUL_D:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (frint:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws)
RESULT:  (FRINT_W:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws)
PATTERN: (frint:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws)
RESULT:  (FRINT_D:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws)
PATTERN: (intrinsic_wo_chain:{ *:[v4f32] } 4349:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4f32] }:$ws)
RESULT:  (FRCP_W:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws)
PATTERN: (intrinsic_wo_chain:{ *:[v2f64] } 4348:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2f64] }:$ws)
RESULT:  (FRCP_D:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws)
PATTERN: (intrinsic_wo_chain:{ *:[v4f32] } 4353:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4f32] }:$ws)
RESULT:  (FRSQRT_W:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws)
PATTERN: (intrinsic_wo_chain:{ *:[v2f64] } 4352:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2f64] }:$ws)
RESULT:  (FRSQRT_D:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4355:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
RESULT:  (FSAF_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4354:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
RESULT:  (FSAF_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4357:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
RESULT:  (FSEQ_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4356:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
RESULT:  (FSEQ_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4359:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
RESULT:  (FSLE_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4358:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
RESULT:  (FSLE_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4361:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
RESULT:  (FSLT_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4360:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
RESULT:  (FSLT_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4363:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
RESULT:  (FSNE_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4362:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
RESULT:  (FSNE_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4365:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
RESULT:  (FSOR_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4364:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
RESULT:  (FSOR_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (fsqrt:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws)
RESULT:  (FSQRT_W:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws)
PATTERN: (fsqrt:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws)
RESULT:  (FSQRT_D:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws)
PATTERN: (fsub:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
RESULT:  (FSUB_W:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (fsub:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
RESULT:  (FSUB_D:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4371:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
RESULT:  (FSUEQ_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4370:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
RESULT:  (FSUEQ_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4373:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
RESULT:  (FSULE_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4372:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
RESULT:  (FSULE_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4375:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
RESULT:  (FSULT_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4374:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
RESULT:  (FSULT_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4377:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
RESULT:  (FSUN_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4376:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
RESULT:  (FSUN_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4379:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
RESULT:  (FSUNE_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4378:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
RESULT:  (FSUNE_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4381:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4f32] }:$ws)
RESULT:  (FTINT_S_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4380:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2f64] }:$ws)
RESULT:  (FTINT_S_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4383:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4f32] }:$ws)
RESULT:  (FTINT_U_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4382:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2f64] }:$ws)
RESULT:  (FTINT_U_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4384:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
RESULT:  (FTQ_H:{ *:[v8i16] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4385:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
RESULT:  (FTQ_W:{ *:[v4i32] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (fp_to_sint:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws)
RESULT:  (FTRUNC_S_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws)
PATTERN: (fp_to_sint:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws)
RESULT:  (FTRUNC_S_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws)
PATTERN: (fp_to_uint:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws)
RESULT:  (FTRUNC_U_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$ws)
PATTERN: (fp_to_uint:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws)
RESULT:  (FTRUNC_U_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$ws)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4391:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (HADD_S_H:{ *:[v8i16] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4392:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (HADD_S_W:{ *:[v4i32] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4390:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (HADD_S_D:{ *:[v2i64] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4394:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (HADD_U_H:{ *:[v8i16] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4395:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (HADD_U_W:{ *:[v4i32] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4393:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (HADD_U_D:{ *:[v2i64] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4397:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (HSUB_S_H:{ *:[v8i16] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4398:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (HSUB_S_W:{ *:[v4i32] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4396:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (HSUB_S_D:{ *:[v2i64] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4400:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (HSUB_U_H:{ *:[v8i16] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4401:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (HSUB_U_W:{ *:[v4i32] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4399:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (HSUB_U_D:{ *:[v2i64] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (MipsILVEV:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (ILVEV_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (MipsILVEV:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (ILVEV_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (MipsILVEV:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (ILVEV_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (MipsILVEV:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (ILVEV_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (MipsILVL:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (ILVL_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (MipsILVL:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (ILVL_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (MipsILVL:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (ILVL_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (MipsILVL:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (ILVL_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (MipsILVOD:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (ILVOD_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (MipsILVOD:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (ILVOD_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (MipsILVOD:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (ILVOD_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (MipsILVOD:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (ILVOD_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (MipsILVR:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (ILVR_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (MipsILVR:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (ILVR_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (MipsILVR:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (ILVR_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (MipsILVR:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (ILVR_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (vector_insert:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[iPTR] })<<P:Predicate_immZExt4Ptr>>:$n)
RESULT:  (INSERT_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] }):$n)
PATTERN: (vector_insert:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[iPTR] })<<P:Predicate_immZExt3Ptr>>:$n)
RESULT:  (INSERT_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] }):$n)
PATTERN: (vector_insert:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[iPTR] })<<P:Predicate_immZExt2Ptr>>:$n)
RESULT:  (INSERT_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] }):$n)
PATTERN: (vector_insert:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[iPTR] })<<P:Predicate_immZExt1Ptr>>:$n)
RESULT:  (INSERT_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i32] }):$n)
PATTERN: (MipsINSVE:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, (timm:{ *:[i32] })<<P:Predicate_timmZExt4>>:$n, MSA128BOpnd:{ *:[v16i8] }:$ws, (imm:{ *:[i32] })<<P:Predicate_immz>>:$n2)
RESULT:  (INSVE_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, (timm:{ *:[i32] }):$n, MSA128BOpnd:{ *:[v16i8] }:$ws, (imm:{ *:[i32] }):$n2)
PATTERN: (MipsINSVE:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, (timm:{ *:[i32] })<<P:Predicate_timmZExt3>>:$n, MSA128HOpnd:{ *:[v8i16] }:$ws, (imm:{ *:[i32] })<<P:Predicate_immz>>:$n2)
RESULT:  (INSVE_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, (timm:{ *:[i32] }):$n, MSA128HOpnd:{ *:[v8i16] }:$ws, (imm:{ *:[i32] }):$n2)
PATTERN: (MipsINSVE:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, (timm:{ *:[i32] })<<P:Predicate_timmZExt2>>:$n, MSA128WOpnd:{ *:[v4i32] }:$ws, (imm:{ *:[i32] })<<P:Predicate_immz>>:$n2)
RESULT:  (INSVE_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, (timm:{ *:[i32] }):$n, MSA128WOpnd:{ *:[v4i32] }:$ws, (imm:{ *:[i32] }):$n2)
PATTERN: (MipsINSVE:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, (timm:{ *:[i32] })<<P:Predicate_timmZExt1>>:$n, MSA128DOpnd:{ *:[v2i64] }:$ws, (imm:{ *:[i32] })<<P:Predicate_immz>>:$n2)
RESULT:  (INSVE_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, (timm:{ *:[i32] }):$n, MSA128DOpnd:{ *:[v2i64] }:$ws, (imm:{ *:[i32] }):$n2)
PATTERN: (vector_insert:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$wd_in, FGR32Opnd:{ *:[f32] }:$fs, (imm:{ *:[iPTR] })<<P:Predicate_immZExt2Ptr>>:$n)
RESULT:  (INSERT_FW_PSEUDO:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$wd_in, (imm:{ *:[i32] }):$n, FGR32Opnd:{ *:[f32] }:$fs)
PATTERN: (vector_insert:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$wd_in, FGR64Opnd:{ *:[f64] }:$fs, (imm:{ *:[iPTR] })<<P:Predicate_immZExt1Ptr>>:$n)
RESULT:  (INSERT_FD_PSEUDO:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$wd_in, (imm:{ *:[i32] }):$n, FGR64Opnd:{ *:[f64] }:$fs)
PATTERN: (vector_insert:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, GPR32Opnd:{ *:[i32] }:$fs, GPR32Opnd:{ *:[i32] }:$n)
RESULT:  (INSERT_B_VIDX_PSEUDO:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, GPR32Opnd:{ *:[i32] }:$n, GPR32Opnd:{ *:[i32] }:$fs)
PATTERN: (vector_insert:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, GPR32Opnd:{ *:[i32] }:$fs, GPR32Opnd:{ *:[i32] }:$n)
RESULT:  (INSERT_H_VIDX_PSEUDO:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, GPR32Opnd:{ *:[i32] }:$n, GPR32Opnd:{ *:[i32] }:$fs)
PATTERN: (vector_insert:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, GPR32Opnd:{ *:[i32] }:$fs, GPR32Opnd:{ *:[i32] }:$n)
RESULT:  (INSERT_W_VIDX_PSEUDO:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, GPR32Opnd:{ *:[i32] }:$n, GPR32Opnd:{ *:[i32] }:$fs)
PATTERN: (vector_insert:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, GPR64Opnd:{ *:[i64] }:$fs, GPR32Opnd:{ *:[i32] }:$n)
RESULT:  (INSERT_D_VIDX_PSEUDO:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, GPR32Opnd:{ *:[i32] }:$n, GPR64Opnd:{ *:[i64] }:$fs)
PATTERN: (vector_insert:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$wd_in, FGR32Opnd:{ *:[f32] }:$fs, GPR32Opnd:{ *:[i32] }:$n)
RESULT:  (INSERT_FW_VIDX_PSEUDO:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$wd_in, GPR32Opnd:{ *:[i32] }:$n, FGR32Opnd:{ *:[f32] }:$fs)
PATTERN: (vector_insert:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$wd_in, FGR64Opnd:{ *:[f64] }:$fs, GPR32Opnd:{ *:[i32] }:$n)
RESULT:  (INSERT_FD_VIDX_PSEUDO:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$wd_in, GPR32Opnd:{ *:[i32] }:$n, FGR64Opnd:{ *:[f64] }:$fs)
PATTERN: (vector_insert:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, GPR32Opnd:{ *:[i32] }:$fs, GPR64Opnd:{ *:[i64] }:$n)
RESULT:  (INSERT_B_VIDX64_PSEUDO:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, GPR64Opnd:{ *:[i64] }:$n, GPR32Opnd:{ *:[i32] }:$fs)
PATTERN: (vector_insert:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, GPR32Opnd:{ *:[i32] }:$fs, GPR64Opnd:{ *:[i64] }:$n)
RESULT:  (INSERT_H_VIDX64_PSEUDO:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, GPR64Opnd:{ *:[i64] }:$n, GPR32Opnd:{ *:[i32] }:$fs)
PATTERN: (vector_insert:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, GPR32Opnd:{ *:[i32] }:$fs, GPR64Opnd:{ *:[i64] }:$n)
RESULT:  (INSERT_W_VIDX64_PSEUDO:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, GPR64Opnd:{ *:[i64] }:$n, GPR32Opnd:{ *:[i32] }:$fs)
PATTERN: (vector_insert:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, GPR64Opnd:{ *:[i64] }:$fs, GPR64Opnd:{ *:[i64] }:$n)
RESULT:  (INSERT_D_VIDX64_PSEUDO:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, GPR64Opnd:{ *:[i64] }:$n, GPR64Opnd:{ *:[i64] }:$fs)
PATTERN: (vector_insert:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$wd_in, FGR32Opnd:{ *:[f32] }:$fs, GPR64Opnd:{ *:[i64] }:$n)
RESULT:  (INSERT_FW_VIDX64_PSEUDO:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$wd_in, GPR64Opnd:{ *:[i64] }:$n, FGR32Opnd:{ *:[f32] }:$fs)
PATTERN: (vector_insert:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$wd_in, FGR64Opnd:{ *:[f64] }:$fs, GPR64Opnd:{ *:[i64] }:$n)
RESULT:  (INSERT_FD_VIDX64_PSEUDO:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$wd_in, GPR64Opnd:{ *:[i64] }:$n, FGR64Opnd:{ *:[f64] }:$fs)
PATTERN: (ld:{ *:[v16i8] } addrimm10:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LD_B:{ *:[v16i8] } addrimm10:{ *:[iPTR] }:$addr)
PATTERN: (ld:{ *:[v8i16] } addrimm10lsl1:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LD_H:{ *:[v8i16] } addrimm10lsl1:{ *:[iPTR] }:$addr)
PATTERN: (ld:{ *:[v4i32] } addrimm10lsl2:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LD_W:{ *:[v4i32] } addrimm10lsl2:{ *:[iPTR] }:$addr)
PATTERN: (ld:{ *:[v2i64] } addrimm10lsl3:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LD_D:{ *:[v2i64] } addrimm10lsl3:{ *:[iPTR] }:$addr)
PATTERN: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, (shl:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immZExt2Lsa>>:$sa))
RESULT:  (LSA:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, (imm:{ *:[i32] }):$sa)
PATTERN: (add:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rt, (shl:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immZExt2Lsa>>:$sa))
RESULT:  (DLSA:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt, (imm:{ *:[i32] }):$sa)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4442:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (MADD_Q_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4443:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (MADD_Q_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4444:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (MADDR_Q_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4445:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (MADDR_Q_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (add:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, (mul:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
RESULT:  (MADDV_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (add:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, (mul:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt))
RESULT:  (MADDV_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (add:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, (mul:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt))
RESULT:  (MADDV_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (add:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, (mul:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt))
RESULT:  (MADDV_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v16i8] } 4455:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (MAX_A_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4457:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (MAX_A_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4458:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (MAX_A_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4456:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (MAX_A_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (smax:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (MAX_S_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (smax:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (MAX_S_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (smax:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (MAX_S_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (smax:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (MAX_S_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (umax:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (MAX_U_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (umax:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (MAX_U_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (umax:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (MAX_U_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (umax:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (MAX_U_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (smax:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_simm5:{ *:[v16i8] }:$imm)
RESULT:  (MAXI_S_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_simm5:{ *:[v16i8] }:$imm)
PATTERN: (smax:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_simm5:{ *:[v8i16] }:$imm)
RESULT:  (MAXI_S_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_simm5:{ *:[v8i16] }:$imm)
PATTERN: (smax:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_simm5:{ *:[v4i32] }:$imm)
RESULT:  (MAXI_S_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_simm5:{ *:[v4i32] }:$imm)
PATTERN: (smax:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_simm5:{ *:[v2i64] }:$imm)
RESULT:  (MAXI_S_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_simm5:{ *:[v2i64] }:$imm)
PATTERN: (umax:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm5:{ *:[v16i8] }:$imm)
RESULT:  (MAXI_U_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm5:{ *:[v16i8] }:$imm)
PATTERN: (umax:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_uimm5:{ *:[v8i16] }:$imm)
RESULT:  (MAXI_U_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_uimm5:{ *:[v8i16] }:$imm)
PATTERN: (umax:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$imm)
RESULT:  (MAXI_U_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$imm)
PATTERN: (umax:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_uimm5:{ *:[v2i64] }:$imm)
RESULT:  (MAXI_U_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_uimm5:{ *:[v2i64] }:$imm)
PATTERN: (intrinsic_wo_chain:{ *:[v16i8] } 4475:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (MIN_A_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4477:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (MIN_A_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4478:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (MIN_A_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4476:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (MIN_A_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (smin:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (MIN_S_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (smin:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (MIN_S_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (smin:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (MIN_S_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (smin:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (MIN_S_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (umin:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (MIN_U_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (umin:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (MIN_U_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (umin:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (MIN_U_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (umin:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (MIN_U_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (smin:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_simm5:{ *:[v16i8] }:$imm)
RESULT:  (MINI_S_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_simm5:{ *:[v16i8] }:$imm)
PATTERN: (smin:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_simm5:{ *:[v8i16] }:$imm)
RESULT:  (MINI_S_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_simm5:{ *:[v8i16] }:$imm)
PATTERN: (smin:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_simm5:{ *:[v4i32] }:$imm)
RESULT:  (MINI_S_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_simm5:{ *:[v4i32] }:$imm)
PATTERN: (smin:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_simm5:{ *:[v2i64] }:$imm)
RESULT:  (MINI_S_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_simm5:{ *:[v2i64] }:$imm)
PATTERN: (umin:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm5:{ *:[v16i8] }:$imm)
RESULT:  (MINI_U_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm5:{ *:[v16i8] }:$imm)
PATTERN: (umin:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_uimm5:{ *:[v8i16] }:$imm)
RESULT:  (MINI_U_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_uimm5:{ *:[v8i16] }:$imm)
PATTERN: (umin:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$imm)
RESULT:  (MINI_U_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$imm)
PATTERN: (umin:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_uimm5:{ *:[v2i64] }:$imm)
RESULT:  (MINI_U_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_uimm5:{ *:[v2i64] }:$imm)
PATTERN: (srem:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (MOD_S_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (srem:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (MOD_S_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (srem:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (MOD_S_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (srem:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (MOD_S_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (urem:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (MOD_U_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (urem:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (MOD_U_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (urem:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (MOD_U_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (urem:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (MOD_U_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4506:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (MSUB_Q_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4507:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (MSUB_Q_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4508:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (MSUBR_Q_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4509:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (MSUBR_Q_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (sub:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, (mul:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt))
RESULT:  (MSUBV_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (sub:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, (mul:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt))
RESULT:  (MSUBV_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (sub:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, (mul:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt))
RESULT:  (MSUBV_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (sub:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, (mul:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt))
RESULT:  (MSUBV_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4517:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (MUL_Q_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4518:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (MUL_Q_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4528:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (MULR_Q_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4529:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (MULR_Q_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (mul:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (MULV_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (mul:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (MULV_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (mul:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (MULV_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (mul:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (MULV_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v16i8] } 4538:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws)
RESULT:  (NLOC_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4540:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws)
RESULT:  (NLOC_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4541:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws)
RESULT:  (NLOC_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4539:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$ws)
RESULT:  (NLOC_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws)
PATTERN: (ctlz:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws)
RESULT:  (NLZC_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws)
PATTERN: (ctlz:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws)
RESULT:  (NLZC_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws)
PATTERN: (ctlz:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws)
RESULT:  (NLZC_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws)
PATTERN: (ctlz:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws)
RESULT:  (NLZC_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws)
PATTERN: (MipsVNOR:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (NOR_V:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (MipsVNOR:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (NOR_V_H_PSEUDO:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (MipsVNOR:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (NOR_V_W_PSEUDO:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (MipsVNOR:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (NOR_V_D_PSEUDO:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (MipsVNOR:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm8:{ *:[v16i8] }:$u8)
RESULT:  (NORI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm8:{ *:[v16i8] }:$u8)
PATTERN: (or:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (OR_V:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (or:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (OR_V_H_PSEUDO:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (or:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (OR_V_W_PSEUDO:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (or:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (OR_V_D_PSEUDO:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (or:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm8:{ *:[v16i8] }:$u8)
RESULT:  (ORI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm8:{ *:[v16i8] }:$u8)
PATTERN: (MipsPCKEV:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (PCKEV_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (MipsPCKEV:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (PCKEV_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (MipsPCKEV:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (PCKEV_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (MipsPCKEV:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (PCKEV_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (MipsPCKOD:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (PCKOD_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (MipsPCKOD:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (PCKOD_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (MipsPCKOD:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (PCKOD_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (MipsPCKOD:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (PCKOD_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (ctpop:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws)
RESULT:  (PCNT_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws)
PATTERN: (ctpop:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws)
RESULT:  (PCNT_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws)
PATTERN: (ctpop:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws)
RESULT:  (PCNT_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws)
PATTERN: (ctpop:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws)
RESULT:  (PCNT_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws)
PATTERN: (intrinsic_wo_chain:{ *:[v16i8] } 4587:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws, (timm:{ *:[i32] })<<P:Predicate_timmZExt3>>:$m)
RESULT:  (SAT_S_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, (timm:{ *:[i32] }):$m)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4589:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, (timm:{ *:[i32] })<<P:Predicate_timmZExt4>>:$m)
RESULT:  (SAT_S_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, (timm:{ *:[i32] }):$m)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4590:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, (timm:{ *:[i32] })<<P:Predicate_timmZExt5>>:$m)
RESULT:  (SAT_S_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, (timm:{ *:[i32] }):$m)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4588:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$ws, (timm:{ *:[i32] })<<P:Predicate_timmZExt6>>:$m)
RESULT:  (SAT_S_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, (timm:{ *:[i32] }):$m)
PATTERN: (intrinsic_wo_chain:{ *:[v16i8] } 4591:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws, (timm:{ *:[i32] })<<P:Predicate_timmZExt3>>:$m)
RESULT:  (SAT_U_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, (timm:{ *:[i32] }):$m)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4593:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, (timm:{ *:[i32] })<<P:Predicate_timmZExt4>>:$m)
RESULT:  (SAT_U_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, (timm:{ *:[i32] }):$m)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4594:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, (timm:{ *:[i32] })<<P:Predicate_timmZExt5>>:$m)
RESULT:  (SAT_U_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, (timm:{ *:[i32] }):$m)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4592:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$ws, (timm:{ *:[i32] })<<P:Predicate_timmZExt6>>:$m)
RESULT:  (SAT_U_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, (timm:{ *:[i32] }):$m)
PATTERN: (MipsSHF:{ *:[v16i8] } (timm:{ *:[i32] })<<P:Predicate_timmZExt8>>:$u8, MSA128BOpnd:{ *:[v16i8] }:$ws)
RESULT:  (SHF_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, (timm:{ *:[i32] }):$u8)
PATTERN: (MipsSHF:{ *:[v8i16] } (timm:{ *:[i32] })<<P:Predicate_timmZExt8>>:$u8, MSA128HOpnd:{ *:[v8i16] }:$ws)
RESULT:  (SHF_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, (timm:{ *:[i32] }):$u8)
PATTERN: (MipsSHF:{ *:[v4i32] } (timm:{ *:[i32] })<<P:Predicate_timmZExt8>>:$u8, MSA128WOpnd:{ *:[v4i32] }:$ws)
RESULT:  (SHF_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, (timm:{ *:[i32] }):$u8)
PATTERN: (intrinsic_wo_chain:{ *:[v16i8] } 4610:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (SLD_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4612:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (SLD_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4613:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (SLD_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4611:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$wd_in, MSA128DOpnd:{ *:[v2i64] }:$ws, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (SLD_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, MSA128DOpnd:{ *:[v2i64] }:$ws, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v16i8] } 4614:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, (timm:{ *:[i32] })<<P:Predicate_timmZExt4>>:$n)
RESULT:  (SLDI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, (timm:{ *:[i32] }):$n)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4616:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, (timm:{ *:[i32] })<<P:Predicate_timmZExt3>>:$n)
RESULT:  (SLDI_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, (timm:{ *:[i32] }):$n)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4617:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, (timm:{ *:[i32] })<<P:Predicate_timmZExt2>>:$n)
RESULT:  (SLDI_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, (timm:{ *:[i32] }):$n)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4615:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$wd_in, MSA128DOpnd:{ *:[v2i64] }:$ws, (timm:{ *:[i32] })<<P:Predicate_timmZExt1>>:$n)
RESULT:  (SLDI_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, MSA128DOpnd:{ *:[v2i64] }:$ws, (timm:{ *:[i32] }):$n)
PATTERN: (shl:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (SLL_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (shl:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (SLL_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (shl:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (SLL_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (shl:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (SLL_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (shl:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm3:{ *:[v16i8] }:$m)
RESULT:  (SLLI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm3:{ *:[v16i8] }:$m)
PATTERN: (shl:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_uimm4:{ *:[v8i16] }:$m)
RESULT:  (SLLI_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_uimm4:{ *:[v8i16] }:$m)
PATTERN: (shl:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$m)
RESULT:  (SLLI_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$m)
PATTERN: (shl:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_uimm6:{ *:[v2i64] }:$m)
RESULT:  (SLLI_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_uimm6:{ *:[v2i64] }:$m)
PATTERN: (MipsVSHF:{ *:[v16i8] } (build_vector:{ *:[v16i8] } GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt), MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$ws)
RESULT:  (SPLAT_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (MipsVSHF:{ *:[v8i16] } (build_vector:{ *:[v8i16] } GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt), MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$ws)
RESULT:  (SPLAT_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (MipsVSHF:{ *:[v4i32] } (build_vector:{ *:[v4i32] } GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt), MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$ws)
RESULT:  (SPLAT_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (MipsVSHF:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] } GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt), (build_vector:{ *:[v4i32] }))), MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$ws)
RESULT:  (SPLAT_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (MipsVSHF:{ *:[v16i8] } vsplati8_uimm4:{ *:[v16i8] }:$n, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$ws)
RESULT:  (SPLATI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm4:{ *:[v16i8] }:$n)
PATTERN: (MipsVSHF:{ *:[v8i16] } vsplati16_uimm3:{ *:[v8i16] }:$n, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$ws)
RESULT:  (SPLATI_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_uimm3:{ *:[v8i16] }:$n)
PATTERN: (MipsVSHF:{ *:[v4i32] } vsplati32_uimm2:{ *:[v4i32] }:$n, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$ws)
RESULT:  (SPLATI_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_uimm2:{ *:[v4i32] }:$n)
PATTERN: (MipsVSHF:{ *:[v2i64] } vsplati64_uimm1:{ *:[v2i64] }:$n, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$ws)
RESULT:  (SPLATI_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_uimm1:{ *:[v2i64] }:$n)
PATTERN: (sra:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (SRA_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (sra:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (SRA_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (sra:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (SRA_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (sra:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (SRA_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (sra:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm3:{ *:[v16i8] }:$m)
RESULT:  (SRAI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm3:{ *:[v16i8] }:$m)
PATTERN: (sra:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_uimm4:{ *:[v8i16] }:$m)
RESULT:  (SRAI_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_uimm4:{ *:[v8i16] }:$m)
PATTERN: (sra:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$m)
RESULT:  (SRAI_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$m)
PATTERN: (sra:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_uimm6:{ *:[v2i64] }:$m)
RESULT:  (SRAI_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_uimm6:{ *:[v2i64] }:$m)
PATTERN: (intrinsic_wo_chain:{ *:[v16i8] } 4642:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (SRAR_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4644:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (SRAR_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4645:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (SRAR_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4643:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (SRAR_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v16i8] } 4646:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws, (timm:{ *:[i32] })<<P:Predicate_timmZExt3>>:$m)
RESULT:  (SRARI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, (timm:{ *:[i32] }):$m)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4648:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, (timm:{ *:[i32] })<<P:Predicate_timmZExt4>>:$m)
RESULT:  (SRARI_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, (timm:{ *:[i32] }):$m)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4649:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, (timm:{ *:[i32] })<<P:Predicate_timmZExt5>>:$m)
RESULT:  (SRARI_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, (timm:{ *:[i32] }):$m)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4647:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$ws, (timm:{ *:[i32] })<<P:Predicate_timmZExt6>>:$m)
RESULT:  (SRARI_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, (timm:{ *:[i32] }):$m)
PATTERN: (srl:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (SRL_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (srl:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (SRL_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (srl:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (SRL_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (srl:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (SRL_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (srl:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm3:{ *:[v16i8] }:$m)
RESULT:  (SRLI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm3:{ *:[v16i8] }:$m)
PATTERN: (srl:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_uimm4:{ *:[v8i16] }:$m)
RESULT:  (SRLI_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_uimm4:{ *:[v8i16] }:$m)
PATTERN: (srl:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$m)
RESULT:  (SRLI_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$m)
PATTERN: (srl:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_uimm6:{ *:[v2i64] }:$m)
RESULT:  (SRLI_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_uimm6:{ *:[v2i64] }:$m)
PATTERN: (intrinsic_wo_chain:{ *:[v16i8] } 4658:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (SRLR_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4660:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (SRLR_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4661:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (SRLR_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4659:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (SRLR_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v16i8] } 4662:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws, (timm:{ *:[i32] })<<P:Predicate_timmZExt3>>:$m)
RESULT:  (SRLRI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, (timm:{ *:[i32] }):$m)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4664:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, (timm:{ *:[i32] })<<P:Predicate_timmZExt4>>:$m)
RESULT:  (SRLRI_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, (timm:{ *:[i32] }):$m)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4665:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, (timm:{ *:[i32] })<<P:Predicate_timmZExt5>>:$m)
RESULT:  (SRLRI_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, (timm:{ *:[i32] }):$m)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4663:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$ws, (timm:{ *:[i32] })<<P:Predicate_timmZExt6>>:$m)
RESULT:  (SRLRI_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, (timm:{ *:[i32] }):$m)
PATTERN: (st MSA128BOpnd:{ *:[v16i8] }:$wd, addrimm10:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (ST_B MSA128BOpnd:{ *:[v16i8] }:$wd, addrimm10:{ *:[iPTR] }:$addr)
PATTERN: (st MSA128HOpnd:{ *:[v8i16] }:$wd, addrimm10lsl1:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (ST_H MSA128HOpnd:{ *:[v8i16] }:$wd, addrimm10lsl1:{ *:[iPTR] }:$addr)
PATTERN: (st MSA128WOpnd:{ *:[v4i32] }:$wd, addrimm10lsl2:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (ST_W MSA128WOpnd:{ *:[v4i32] }:$wd, addrimm10lsl2:{ *:[iPTR] }:$addr)
PATTERN: (st MSA128DOpnd:{ *:[v2i64] }:$wd, addrimm10lsl3:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (ST_D MSA128DOpnd:{ *:[v2i64] }:$wd, addrimm10lsl3:{ *:[iPTR] }:$addr)
PATTERN: (intrinsic_wo_chain:{ *:[v16i8] } 4679:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (SUBS_S_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4681:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (SUBS_S_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4682:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (SUBS_S_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4680:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (SUBS_S_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v16i8] } 4683:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (SUBS_U_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4685:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (SUBS_U_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4686:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (SUBS_U_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4684:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (SUBS_U_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v16i8] } 4687:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (SUBSUS_U_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4689:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (SUBSUS_U_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4690:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (SUBSUS_U_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4688:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (SUBSUS_U_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v16i8] } 4691:{ *:[iPTR] }, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (SUBSUU_S_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v8i16] } 4693:{ *:[iPTR] }, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (SUBSUU_S_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i32] } 4694:{ *:[iPTR] }, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (SUBSUU_S_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i64] } 4692:{ *:[iPTR] }, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (SUBSUU_S_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (sub:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (SUBV_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (sub:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (SUBV_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (sub:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (SUBV_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (sub:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (SUBV_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (sub:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm5:{ *:[v16i8] }:$imm)
RESULT:  (SUBVI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm5:{ *:[v16i8] }:$imm)
PATTERN: (sub:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_uimm5:{ *:[v8i16] }:$imm)
RESULT:  (SUBVI_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_uimm5:{ *:[v8i16] }:$imm)
PATTERN: (sub:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$imm)
RESULT:  (SUBVI_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$imm)
PATTERN: (sub:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_uimm5:{ *:[v2i64] }:$imm)
RESULT:  (SUBVI_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_uimm5:{ *:[v2i64] }:$imm)
PATTERN: (MipsVSHF:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (VSHF_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (MipsVSHF:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (VSHF_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (MipsVSHF:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (VSHF_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (MipsVSHF:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (VSHF_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (xor:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
RESULT:  (XOR_V:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (xor:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
RESULT:  (XOR_V_H_PSEUDO:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (xor:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
RESULT:  (XOR_V_W_PSEUDO:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (xor:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
RESULT:  (XOR_V_D_PSEUDO:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (xor:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm8:{ *:[v16i8] }:$u8)
RESULT:  (XORI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm8:{ *:[v16i8] }:$u8)
PATTERN: (fabs:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws)
RESULT:  (FABS_W:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws)
PATTERN: (fabs:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws)
RESULT:  (FABS_D:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws)
PATTERN: (MipsVAllNonZero:{ *:[i32] } MSA128B:{ *:[v16i8] }:$ws)
RESULT:  (SNZ_B_PSEUDO:{ *:[i32] } MSA128B:{ *:[v16i8] }:$ws)
PATTERN: (MipsVAllNonZero:{ *:[i32] } MSA128H:{ *:[v8i16] }:$ws)
RESULT:  (SNZ_H_PSEUDO:{ *:[i32] } MSA128H:{ *:[v8i16] }:$ws)
PATTERN: (MipsVAllNonZero:{ *:[i32] } MSA128W:{ *:[v4i32] }:$ws)
RESULT:  (SNZ_W_PSEUDO:{ *:[i32] } MSA128W:{ *:[v4i32] }:$ws)
PATTERN: (MipsVAllNonZero:{ *:[i32] } MSA128D:{ *:[v2i64] }:$ws)
RESULT:  (SNZ_D_PSEUDO:{ *:[i32] } MSA128D:{ *:[v2i64] }:$ws)
PATTERN: (MipsVAnyNonZero:{ *:[i32] } MSA128B:{ *:[v16i8] }:$ws)
RESULT:  (SNZ_V_PSEUDO:{ *:[i32] } MSA128B:{ *:[v16i8] }:$ws)
PATTERN: (MipsVAllZero:{ *:[i32] } MSA128B:{ *:[v16i8] }:$ws)
RESULT:  (SZ_B_PSEUDO:{ *:[i32] } MSA128B:{ *:[v16i8] }:$ws)
PATTERN: (MipsVAllZero:{ *:[i32] } MSA128H:{ *:[v8i16] }:$ws)
RESULT:  (SZ_H_PSEUDO:{ *:[i32] } MSA128H:{ *:[v8i16] }:$ws)
PATTERN: (MipsVAllZero:{ *:[i32] } MSA128W:{ *:[v4i32] }:$ws)
RESULT:  (SZ_W_PSEUDO:{ *:[i32] } MSA128W:{ *:[v4i32] }:$ws)
PATTERN: (MipsVAllZero:{ *:[i32] } MSA128D:{ *:[v2i64] }:$ws)
RESULT:  (SZ_D_PSEUDO:{ *:[i32] } MSA128D:{ *:[v2i64] }:$ws)
PATTERN: (MipsVAnyZero:{ *:[i32] } MSA128B:{ *:[v16i8] }:$ws)
RESULT:  (SZ_V_PSEUDO:{ *:[i32] } MSA128B:{ *:[v16i8] }:$ws)
PATTERN: (st MSA128F16:{ *:[f16] }:$ws, (addrimm10:{ *:[iPTR] }):$addr)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (ST_F16 MSA128F16:{ *:[f16] }:$ws, (addrimm10:{ *:[iPTR] }):$addr)
PATTERN: (ld:{ *:[f16] } addrimm10:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LD_F16:{ *:[f16] } addrimm10:{ *:[iPTR] }:$addr)
PATTERN: (fpextend:{ *:[f32] } MSA128F16:{ *:[f16] }:$ws)
RESULT:  (MSA_FP_EXTEND_W_PSEUDO:{ *:[f32] } MSA128F16:{ *:[f16] }:$ws)
PATTERN: (fpround:{ *:[f16] } FGR32Opnd:{ *:[f32] }:$fs)
RESULT:  (MSA_FP_ROUND_W_PSEUDO:{ *:[f16] } FGR32Opnd:{ *:[f32] }:$fs)
PATTERN: (fpextend:{ *:[f64] } MSA128F16:{ *:[f16] }:$ws)
RESULT:  (MSA_FP_EXTEND_D_PSEUDO:{ *:[f64] } MSA128F16:{ *:[f16] }:$ws)
PATTERN: (fpround:{ *:[f16] } FGR64Opnd:{ *:[f64] }:$fs)
RESULT:  (MSA_FP_ROUND_D_PSEUDO:{ *:[f16] } FGR64Opnd:{ *:[f64] }:$fs)
PATTERN: (add:{ *:[i32] } GPRMM16Opnd:{ *:[i32] }:$rs, GPRMM16Opnd:{ *:[i32] }:$rt)
RESULT:  (ADDU16_MM:{ *:[i32] } GPRMM16Opnd:{ *:[i32] }:$rs, GPRMM16Opnd:{ *:[i32] }:$rt)
PATTERN: (and:{ *:[i32] } GPRMM16Opnd:{ *:[i32] }:$rs, GPRMM16Opnd:{ *:[i32] }:$rt)
RESULT:  (AND16_MM:{ *:[i32] } GPRMM16Opnd:{ *:[i32] }:$rs, GPRMM16Opnd:{ *:[i32] }:$rt)
PATTERN: (xor:{ *:[i32] } GPRMM16Opnd:{ *:[i32] }:$rs, -1:{ *:[i32] })
RESULT:  (NOT16_MM:{ *:[i32] } GPRMM16Opnd:{ *:[i32] }:$rs)
PATTERN: (or:{ *:[i32] } GPRMM16Opnd:{ *:[i32] }:$rs, GPRMM16Opnd:{ *:[i32] }:$rt)
RESULT:  (OR16_MM:{ *:[i32] } GPRMM16Opnd:{ *:[i32] }:$rs, GPRMM16Opnd:{ *:[i32] }:$rt)
PATTERN: (sub:{ *:[i32] } GPRMM16Opnd:{ *:[i32] }:$rs, GPRMM16Opnd:{ *:[i32] }:$rt)
RESULT:  (SUBU16_MM:{ *:[i32] } GPRMM16Opnd:{ *:[i32] }:$rs, GPRMM16Opnd:{ *:[i32] }:$rt)
PATTERN: (xor:{ *:[i32] } GPRMM16Opnd:{ *:[i32] }:$rs, GPRMM16Opnd:{ *:[i32] }:$rt)
RESULT:  (XOR16_MM:{ *:[i32] } GPRMM16Opnd:{ *:[i32] }:$rs, GPRMM16Opnd:{ *:[i32] }:$rt)
PATTERN: (MipsJmpLink GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (JALR16_MM GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (setcc:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$imm16, SETLT:{ *:[Other] })
RESULT:  (SLTi_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] }):$imm16)
PATTERN: (setcc:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$imm16, SETULT:{ *:[Other] })
RESULT:  (SLTiu_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] }):$imm16)
PATTERN: (or:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immZExt16>><<X:LO16>>:$imm16)
RESULT:  (ORi_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (LO16:{ *:[i32] } (imm:{ *:[i32] }):$imm16))
PATTERN: (xor:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immZExt16>><<X:LO16>>:$imm16)
RESULT:  (XORi_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (LO16:{ *:[i32] } (imm:{ *:[i32] }):$imm16))
PATTERN: addr:{ *:[i32] }:$addr
RESULT:  (LEA_ADDiu_MM:{ *:[i32] } addr:{ *:[i32] }:$addr)
PATTERN: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (ADDu_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (sub:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (SUBu_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (mul:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (MUL_MM:{ *:[i32] }:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (setcc:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, SETLT:{ *:[Other] })
RESULT:  (SLT_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (setcc:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, SETULT:{ *:[Other] })
RESULT:  (SLTu_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (and:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (AND_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (or:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (OR_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (xor:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (XOR_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (xor:{ *:[i32] } (or:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt), -1:{ *:[i32] })
RESULT:  (NOR_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (rotr:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$shamt)
RESULT:  (ROTR_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, (imm:{ *:[i32] }):$shamt)
PATTERN: (rotr:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (ROTRV_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (ld:{ *:[i32] } addr:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_sextload>><<P:Predicate_sextloadi8>>
RESULT:  (LB_MM:{ *:[i32] } addr:{ *:[i32] }:$addr)
PATTERN: (ld:{ *:[i32] } addr:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_zextload>><<P:Predicate_zextloadi8>>
RESULT:  (LBu_MM:{ *:[i32] } addr:{ *:[i32] }:$addr)
PATTERN: (ld:{ *:[i32] } addrDefault:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_sextload>><<P:Predicate_sextloadi16>>
RESULT:  (LH_MM:{ *:[i32] } addrDefault:{ *:[iPTR] }:$addr)
PATTERN: (ld:{ *:[i32] } addr:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_zextload>><<P:Predicate_zextloadi16>>
RESULT:  (LHu_MM:{ *:[i32] } addr:{ *:[iPTR] }:$addr)
PATTERN: (st GPR32Opnd:{ *:[i32] }:$rt, addr:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_truncstore>><<P:Predicate_truncstorei8>>
RESULT:  (SB_MM GPR32Opnd:{ *:[i32] }:$rt, addr:{ *:[iPTR] }:$addr)
PATTERN: (st GPR32Opnd:{ *:[i32] }:$rt, addr:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_truncstore>><<P:Predicate_truncstorei16>>
RESULT:  (SH_MM GPR32Opnd:{ *:[i32] }:$rt, addr:{ *:[iPTR] }:$addr)
PATTERN: (MipsLWL:{ *:[i32] } addrimm12:{ *:[iPTR] }:$addr, GPR32Opnd:{ *:[i32] }:$src)
RESULT:  (LWLE_MM:{ *:[i32] } addrimm12:{ *:[i32] }:$addr, GPR32Opnd:{ *:[i32] }:$src)
PATTERN: (MipsLWR:{ *:[i32] } addrimm12:{ *:[iPTR] }:$addr, GPR32Opnd:{ *:[i32] }:$src)
RESULT:  (LWRE_MM:{ *:[i32] } addrimm12:{ *:[i32] }:$addr, GPR32Opnd:{ *:[i32] }:$src)
PATTERN: (MipsSWL GPR32Opnd:{ *:[i32] }:$rt, addrimm12:{ *:[iPTR] }:$addr)
RESULT:  (SWLE_MM GPR32Opnd:{ *:[i32] }:$rt, addrimm12:{ *:[i32] }:$addr)
PATTERN: (MipsSWR GPR32Opnd:{ *:[i32] }:$rt, addrimm12:{ *:[iPTR] }:$addr)
RESULT:  (SWRE_MM GPR32Opnd:{ *:[i32] }:$rt, addrimm12:{ *:[i32] }:$addr)
PATTERN: (MipsLWL:{ *:[i32] } addrimm12:{ *:[iPTR] }:$addr, GPR32Opnd:{ *:[i32] }:$src)
RESULT:  (LWL_MM:{ *:[i32] } addrimm12:{ *:[i32] }:$addr, GPR32Opnd:{ *:[i32] }:$src)
PATTERN: (MipsLWR:{ *:[i32] } addrimm12:{ *:[iPTR] }:$addr, GPR32Opnd:{ *:[i32] }:$src)
RESULT:  (LWR_MM:{ *:[i32] } addrimm12:{ *:[i32] }:$addr, GPR32Opnd:{ *:[i32] }:$src)
PATTERN: (MipsSWL GPR32Opnd:{ *:[i32] }:$rt, addrimm12:{ *:[iPTR] }:$addr)
RESULT:  (SWL_MM GPR32Opnd:{ *:[i32] }:$rt, addrimm12:{ *:[i32] }:$addr)
PATTERN: (MipsSWR GPR32Opnd:{ *:[i32] }:$rt, addrimm12:{ *:[iPTR] }:$addr)
RESULT:  (SWR_MM GPR32Opnd:{ *:[i32] }:$rt, addrimm12:{ *:[i32] }:$addr)
PATTERN: (MipsCMovFP_T:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, FCCRegsOpnd:{ *:[i32] }:$fcc, GPR32Opnd:{ *:[i32] }:$F)
RESULT:  (MOVT_I_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, FCCRegsOpnd:{ *:[i32] }:$fcc, GPR32Opnd:{ *:[i32] }:$F)
PATTERN: (MipsCMovFP_F:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, FCCRegsOpnd:{ *:[i32] }:$fcc, GPR32Opnd:{ *:[i32] }:$F)
RESULT:  (MOVF_I_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, FCCRegsOpnd:{ *:[i32] }:$fcc, GPR32Opnd:{ *:[i32] }:$F)
PATTERN: (ctlz:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (CLZ_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (ctlz:{ *:[i32] } (xor:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, -1:{ *:[i32] }))
RESULT:  (CLO_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (sext_inreg:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, i8:{ *:[Other] })
RESULT:  (SEB_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (sext_inreg:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, i16:{ *:[Other] })
RESULT:  (SEH_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (MipsExt:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$pos, (imm:{ *:[i32] })<<P:Predicate_immZExt5Plus1>>:$size)
RESULT:  (EXT_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] }):$pos, (imm:{ *:[i32] }):$size)
PATTERN: (br (bb:{ *:[Other] }):$target)
RESULT:  (J_MM (bb:{ *:[Other] }):$target)
PATTERN: (MipsJmpLink (tglobaladdr:{ *:[iPTR] }):$target)
RESULT:  (JAL_MM (tglobaladdr:{ *:[iPTR] }):$target)
PATTERN: (MipsJmpLink (tglobaladdr:{ *:[iPTR] }):$target)
RESULT:  (JALX_MM (tglobaladdr:{ *:[iPTR] }):$target)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, SETEQ:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
RESULT:  (BEQ_MM GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, (bb:{ *:[Other] }):$offset)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, SETNE:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
RESULT:  (BNE_MM GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, (bb:{ *:[Other] }):$offset)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, 0:{ *:[i32] }, SETGE:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
RESULT:  (BGEZ_MM GPR32Opnd:{ *:[i32] }:$rs, (bb:{ *:[Other] }):$offset)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, 0:{ *:[i32] }, SETGT:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
RESULT:  (BGTZ_MM GPR32Opnd:{ *:[i32] }:$rs, (bb:{ *:[Other] }):$offset)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, 0:{ *:[i32] }, SETLE:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
RESULT:  (BLEZ_MM GPR32Opnd:{ *:[i32] }:$rs, (bb:{ *:[Other] }):$offset)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, 0:{ *:[i32] }, SETLT:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
RESULT:  (BLTZ_MM GPR32Opnd:{ *:[i32] }:$rs, (bb:{ *:[Other] }):$offset)
PATTERN: (br (bb:{ *:[Other] }):$offset)
RESULT:  (B_MM (bb:{ *:[Other] }):$offset)
PATTERN: (MipsSync (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$stype)
RESULT:  (SYNC_MM (imm:{ *:[i32] }):$stype)
PATTERN: (trap)
RESULT:  (TRAP_MM)
PATTERN: (MipsMult:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (PseudoMULT_MM:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (MipsMultu:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (PseudoMULTu_MM:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (MipsMFHI:{ *:[i32] } ACC64:{ *:[Untyped] }:$hilo)
RESULT:  (PseudoMFHI_MM:{ *:[i32] } ACC64:{ *:[Untyped] }:$hilo)
PATTERN: (MipsMFLO:{ *:[i32] } ACC64:{ *:[Untyped] }:$hilo)
RESULT:  (PseudoMFLO_MM:{ *:[i32] } ACC64:{ *:[Untyped] }:$hilo)
PATTERN: (MipsMTLOHI:{ *:[Untyped] } GPR32:{ *:[i32] }:$lo, GPR32:{ *:[i32] }:$hi)
RESULT:  (PseudoMTLOHI_MM:{ *:[Untyped] } GPR32:{ *:[i32] }:$lo, GPR32:{ *:[i32] }:$hi)
PATTERN: (MipsMAdd:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64:{ *:[Untyped] }:$acin)
RESULT:  (PseudoMADD_MM:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64:{ *:[Untyped] }:$acin)
PATTERN: (MipsMAddu:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64:{ *:[Untyped] }:$acin)
RESULT:  (PseudoMADDU_MM:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64:{ *:[Untyped] }:$acin)
PATTERN: (MipsMSub:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64:{ *:[Untyped] }:$acin)
RESULT:  (PseudoMSUB_MM:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64:{ *:[Untyped] }:$acin)
PATTERN: (MipsMSubu:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64:{ *:[Untyped] }:$acin)
RESULT:  (PseudoMSUBU_MM:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64:{ *:[Untyped] }:$acin)
PATTERN: (MipsTailCall GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (TAILCALLREG_MM GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (brind GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (PseudoIndirectBranch_MM GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (ld:{ *:[i32] } addrimm12:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_zextload>><<P:Predicate_zextloadi32>>
RESULT:  (LWU_MM:{ *:[i32] } addrimm12:{ *:[iPTR] }:$addr)
PATTERN: (MipsDivRem:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (SDIV_MM_Pseudo:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (MipsDivRemU:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (UDIV_MM_Pseudo:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (fadd:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
RESULT:  (FADD_S_MM:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (fdiv:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
RESULT:  (FDIV_S_MM:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (fmul:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
RESULT:  (FMUL_S_MM:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (fsub:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
RESULT:  (FSUB_S_MM:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (fadd:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)
RESULT:  (FADD_D32_MM:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fadd:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
RESULT:  (FADD_D64_MM:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fdiv:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)
RESULT:  (FDIV_D32_MM:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fdiv:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
RESULT:  (FDIV_D64_MM:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fmul:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)
RESULT:  (FMUL_D32_MM:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fmul:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
RESULT:  (FMUL_D64_MM:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fsub:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)
RESULT:  (FSUB_D32_MM:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fsub:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
RESULT:  (FSUB_D64_MM:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (ld:{ *:[f32] } (add:{ *:[iPTR] } iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index))<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LWXC1_MM:{ *:[f32] } iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index)
PATTERN: (st FGR32Opnd:{ *:[f32] }:$fs, (add:{ *:[iPTR] } iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index))<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SWXC1_MM FGR32Opnd:{ *:[f32] }:$fs, iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[iPTR] }:$index)
PATTERN: (MipsFPCmp FGR32:{ *:[f32] }:$fs, FGR32:{ *:[f32] }:$ft, (imm:{ *:[i32] }):$cond)
RESULT:  (FCMP_S32_MM:{ *:[i32] } FGR32:{ *:[f32] }:$fs, FGR32:{ *:[f32] }:$ft, (imm:{ *:[i32] }):$cond)
PATTERN: (MipsFPCmp AFGR64:{ *:[f64] }:$fs, AFGR64:{ *:[f64] }:$ft, (imm:{ *:[i32] }):$cond)
RESULT:  (FCMP_D32_MM:{ *:[i32] } AFGR64:{ *:[f64] }:$fs, AFGR64:{ *:[f64] }:$ft, (imm:{ *:[i32] }):$cond)
PATTERN: (MipsFPBrcond 0:{ *:[i32] }, FCCRegsOpnd:{ *:[i32] }:$fcc, (bb:{ *:[Other] }):$offset)
RESULT:  (BC1F_MM FCCRegsOpnd:{ *:[i32] }:$fcc, (bb:{ *:[Other] }):$offset)
PATTERN: (MipsFPBrcond 1:{ *:[i32] }, FCCRegsOpnd:{ *:[i32] }:$fcc, (bb:{ *:[Other] }):$offset)
RESULT:  (BC1T_MM FCCRegsOpnd:{ *:[i32] }:$fcc, (bb:{ *:[Other] }):$offset)
PATTERN: (fsqrt:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs)
RESULT:  (FSQRT_D32_MM:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs)
PATTERN: (fsqrt:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs)
RESULT:  (FSQRT_D64_MM:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs)
PATTERN: (fabs:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs)
RESULT:  (FABS_D32_MM:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs)
PATTERN: (fabs:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs)
RESULT:  (FABS_D64_MM:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs)
PATTERN: (fabs:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs)
RESULT:  (FABS_S_MM:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs)
PATTERN: (fneg:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs)
RESULT:  (FNEG_S_MM:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs)
PATTERN: (fneg:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs)
RESULT:  (FNEG_D32_MM:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs)
PATTERN: (fneg:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs)
RESULT:  (FNEG_D64_MM:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs)
PATTERN: (MipsCMovFP_T:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, FGR32Opnd:{ *:[f32] }:$F)
RESULT:  (MOVT_S_MM:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, FGR32Opnd:{ *:[f32] }:$F)
PATTERN: (MipsCMovFP_F:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, FGR32Opnd:{ *:[f32] }:$F)
RESULT:  (MOVF_S_MM:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, FGR32Opnd:{ *:[f32] }:$F)
PATTERN: (MipsCMovFP_T:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, AFGR64Opnd:{ *:[f64] }:$F)
RESULT:  (MOVT_D32_MM:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, AFGR64Opnd:{ *:[f64] }:$F)
PATTERN: (MipsCMovFP_F:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, AFGR64Opnd:{ *:[f64] }:$F)
RESULT:  (MOVF_D32_MM:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, FCCRegsOpnd:{ *:[i32] }:$fcc, AFGR64Opnd:{ *:[f64] }:$F)
PATTERN: (bitconvert:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs)
RESULT:  (MFC1_MM:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs)
PATTERN: (bitconvert:{ *:[f32] } GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (MTC1_MM:{ *:[f32] } GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (fsqrt:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs)
RESULT:  (FSQRT_S_MM:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs)
PATTERN: (ld:{ *:[f64] } addrDefault:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LDC1_MM:{ *:[f64] } addrDefault:{ *:[i32] }:$addr)
PATTERN: (st AFGR64Opnd:{ *:[f64] }:$rt, addrDefault:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SDC1_MM AFGR64Opnd:{ *:[f64] }:$rt, addrDefault:{ *:[i32] }:$addr)
PATTERN: (ld:{ *:[f32] } addrDefault:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LWC1_MM:{ *:[f32] } addrDefault:{ *:[i32] }:$addr)
PATTERN: (st FGR32Opnd:{ *:[f32] }:$rt, addrDefault:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SWC1_MM FGR32Opnd:{ *:[f32] }:$rt, addrDefault:{ *:[i32] }:$addr)
PATTERN: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$imm16)
RESULT:  (ADDIU_MMR6:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] }):$imm16)
PATTERN: (and:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (AND_MMR6:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (br (bb:{ *:[Other] }):$offset)
RESULT:  (BC_MMR6 (bb:{ *:[Other] }):$offset)
PATTERN: (sdiv:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (DIV_MMR6:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (udiv:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (DIVU_MMR6:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (MipsJmpLink GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (JALRC16_MMR6 GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (bitconvert:{ *:[f32] } GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (MTC1_MMR6:{ *:[f32] } GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (bitconvert:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs)
RESULT:  (MFC1_MMR6:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs)
PATTERN: (srem:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (MOD_MMR6:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (urem:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (MODU_MMR6:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (mul:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (MUL_MMR6:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (mulhs:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (MUH_MMR6:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (mulhu:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (MUHU_MMR6:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (xor:{ *:[i32] } (or:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt), -1:{ *:[i32] })
RESULT:  (NOR_MMR6:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (or:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (OR_MMR6:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (or:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immZExt16>><<X:LO16>>:$imm16)
RESULT:  (ORI_MMR6:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (LO16:{ *:[i32] } (imm:{ *:[i32] }):$imm16))
PATTERN: (MipsSync (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$stype)
RESULT:  (SYNC_MMR6 (imm:{ *:[i32] }):$stype)
PATTERN: (xor:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (XOR_MMR6:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (xor:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immZExt16>><<X:LO16>>:$imm16)
RESULT:  (XORI_MMR6:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (LO16:{ *:[i32] } (imm:{ *:[i32] }):$imm16))
PATTERN: (fadd:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
RESULT:  (FADD_S_MMR6:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$ft, FGR32Opnd:{ *:[f32] }:$fs)
PATTERN: (fsub:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
RESULT:  (FSUB_S_MMR6:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$ft, FGR32Opnd:{ *:[f32] }:$fs)
PATTERN: (fmul:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
RESULT:  (FMUL_S_MMR6:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$ft, FGR32Opnd:{ *:[f32] }:$fs)
PATTERN: (fdiv:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
RESULT:  (FDIV_S_MMR6:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$ft, FGR32Opnd:{ *:[f32] }:$fs)
PATTERN: (fneg:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs)
RESULT:  (FNEG_S_MMR6:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs)
PATTERN: (setcc:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft, SETUO:{ *:[Other] })
RESULT:  (CMP_UN_S_MMR6:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (setcc:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft, SETOEQ:{ *:[Other] })
RESULT:  (CMP_EQ_S_MMR6:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (setcc:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft, SETUEQ:{ *:[Other] })
RESULT:  (CMP_UEQ_S_MMR6:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (setcc:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft, SETOLT:{ *:[Other] })
RESULT:  (CMP_LT_S_MMR6:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (setcc:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft, SETULT:{ *:[Other] })
RESULT:  (CMP_ULT_S_MMR6:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (setcc:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft, SETOLE:{ *:[Other] })
RESULT:  (CMP_LE_S_MMR6:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (setcc:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft, SETULE:{ *:[Other] })
RESULT:  (CMP_ULE_S_MMR6:{ *:[i32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (setcc:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft, SETUO:{ *:[Other] })
RESULT:  (CMP_UN_D_MMR6:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (setcc:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft, SETOEQ:{ *:[Other] })
RESULT:  (CMP_EQ_D_MMR6:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (setcc:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft, SETUEQ:{ *:[Other] })
RESULT:  (CMP_UEQ_D_MMR6:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (setcc:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft, SETOLT:{ *:[Other] })
RESULT:  (CMP_LT_D_MMR6:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (setcc:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft, SETULT:{ *:[Other] })
RESULT:  (CMP_ULT_D_MMR6:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (setcc:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft, SETOLE:{ *:[Other] })
RESULT:  (CMP_LE_D_MMR6:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (setcc:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft, SETULE:{ *:[Other] })
RESULT:  (CMP_ULE_D_MMR6:{ *:[i32] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (ld:{ *:[i32] } addrDefault:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LW_MMR6:{ *:[i32] } addrDefault:{ *:[iPTR] }:$addr)
PATTERN: (add:{ *:[i32] } GPRMM16Opnd:{ *:[i32] }:$rs, GPRMM16Opnd:{ *:[i32] }:$rt)
RESULT:  (ADDU16_MMR6:{ *:[i32] } GPRMM16Opnd:{ *:[i32] }:$rs, GPRMM16Opnd:{ *:[i32] }:$rt)
PATTERN: (xor:{ *:[i32] } GPRMM16Opnd:{ *:[i32] }:$rs, -1:{ *:[i32] })
RESULT:  (NOT16_MMR6:{ *:[i32] } GPRMM16Opnd:{ *:[i32] }:$rs)
PATTERN: (sub:{ *:[i32] } GPRMM16Opnd:{ *:[i32] }:$rs, GPRMM16Opnd:{ *:[i32] }:$rt)
RESULT:  (SUBU16_MMR6:{ *:[i32] } GPRMM16Opnd:{ *:[i32] }:$rs, GPRMM16Opnd:{ *:[i32] }:$rt)
PATTERN: (MipsExt:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] }):$pos, (imm:{ *:[i32] }):$size)
RESULT:  (EXT_MMR6:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] }):$pos, (imm:{ *:[i32] }):$size)
PATTERN: (MipsIns:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] }):$pos, (imm:{ *:[i32] }):$size, GPR32Opnd:{ *:[i32] }:$src)
RESULT:  (INS_MMR6:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] }):$pos, (imm:{ *:[i32] }):$size, GPR32Opnd:{ *:[i32] }:$src)
PATTERN: (select:{ *:[f32] } FGRCCOpnd:{ *:[i32] }:$fd_in, FGR32Opnd:{ *:[f32] }:$ft, FGR32Opnd:{ *:[f32] }:$fs)
RESULT:  (SEL_S_MMR6:{ *:[f32] } FGRCCOpnd:{ *:[i32] }:$fd_in, FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (MipsFSelect:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fd_in, FGR64Opnd:{ *:[f64] }:$ft, FGR64Opnd:{ *:[f64] }:$fs)
RESULT:  (SEL_D_MMR6:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fd_in, FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (ld:{ *:[f64] } addrimm16:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LDC1_D64_MMR6:{ *:[f64] } addrimm16:{ *:[i32] }:$addr)
PATTERN: (st FGR64Opnd:{ *:[f64] }:$ft, addrimm16:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SDC1_D64_MMR6 FGR64Opnd:{ *:[f64] }:$ft, addrimm16:{ *:[i32] }:$addr)
PATTERN: (ld:{ *:[i32] } addrimm11:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LDC2_MMR6:{ *:[i32] } addrimm11:{ *:[i32] }:$addr)
PATTERN: (st COP2Opnd:{ *:[i32] }:$rt, addrimm11:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SDC2_MMR6 COP2Opnd:{ *:[i32] }:$rt, addrimm11:{ *:[i32] }:$addr)
PATTERN: (ld:{ *:[i32] } addrimm11:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LWC2_MMR6:{ *:[i32] } addrimm11:{ *:[i32] }:$addr)
PATTERN: (st COP2Opnd:{ *:[i32] }:$rt, addrimm11:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SWC2_MMR6 COP2Opnd:{ *:[i32] }:$rt, addrimm11:{ *:[i32] }:$addr)
PATTERN: (MipsTailCall GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (TAILCALLREG_MMR6 GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (brind GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (PseudoIndirectBranch_MMR6 GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4053:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (ADDQ_S_PH_MM:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4054:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (ADDQ_S_W_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4075:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (ADDU_S_QB_MM:{ *:[v4i8] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (MipsDPAQ_S_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPAQ_S_W_PH_MM:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsDPAQ_SA_L_W:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPAQ_SA_L_W_MM:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsDPAU_H_QBL:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPAU_H_QBL_MM:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsDPAU_H_QBR:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPAU_H_QBR_MM:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4045:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs)
RESULT:  (ABSQ_S_PH_MM:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4047:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (ABSQ_S_W_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4422:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$src, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (INSV_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$src, GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (MipsMAdd:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (MADD_DSP_MM:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsMAddu:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (MADDU_DSP_MM:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsMSub:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (MSUB_DSP_MM:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsMSubu:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (MSUBU_DSP_MM:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsMult:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (MULT_DSP_MM:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (MipsMultu:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (MULTU_DSP_MM:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4601:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immZExt4>>:$sa)
RESULT:  (SHLL_S_PH_MM:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, (imm:{ *:[i32] }):$sa)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4599:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (SHLLV_PH_MM:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4601:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (SHLLV_S_PH_MM:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (intrinsic_w_chain:{ *:[v4i8] } 4600:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (SHLLV_QB_MM:{ *:[v4i8] } DSPROpnd:{ *:[v4i8] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4602:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (SHLLV_S_W_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4602:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$sa)
RESULT:  (SHLL_S_W_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] }):$sa)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4605:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immZExt4>>:$sa)
RESULT:  (SHRA_R_PH_MM:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, (imm:{ *:[i32] }):$sa)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4603:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (SHRAV_PH_MM:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4605:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (SHRAV_R_PH_MM:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (intrinsic_wo_chain:{ *:[i32] } 4607:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (SHRAV_R_W_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (intrinsic_wo_chain:{ *:[i32] } 4607:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$sa)
RESULT:  (SHRA_R_W_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] }):$sa)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4609:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (SHRLV_QB_MM:{ *:[v4i8] } DSPROpnd:{ *:[v4i8] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (intrinsic_wo_chain:{ *:[i32] } 4565:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs)
RESULT:  (PRECEQ_W_PHL_MM:{ *:[i32] } DSPROpnd:{ *:[v2i16] }:$rs)
PATTERN: (intrinsic_wo_chain:{ *:[i32] } 4566:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs)
RESULT:  (PRECEQ_W_PHR_MM:{ *:[i32] } DSPROpnd:{ *:[v2i16] }:$rs)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4567:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs)
RESULT:  (PRECEQU_PH_QBL_MM:{ *:[v2i16] } DSPROpnd:{ *:[v4i8] }:$rs)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4568:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs)
RESULT:  (PRECEQU_PH_QBLA_MM:{ *:[v2i16] } DSPROpnd:{ *:[v4i8] }:$rs)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4569:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs)
RESULT:  (PRECEQU_PH_QBR_MM:{ *:[v2i16] } DSPROpnd:{ *:[v4i8] }:$rs)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4570:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs)
RESULT:  (PRECEQU_PH_QBRA_MM:{ *:[v2i16] } DSPROpnd:{ *:[v4i8] }:$rs)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4571:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs)
RESULT:  (PRECEU_PH_QBL_MM:{ *:[v2i16] } DSPROpnd:{ *:[v4i8] }:$rs)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4572:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs)
RESULT:  (PRECEU_PH_QBLA_MM:{ *:[v2i16] } DSPROpnd:{ *:[v4i8] }:$rs)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4573:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs)
RESULT:  (PRECEU_PH_QBR_MM:{ *:[v2i16] } DSPROpnd:{ *:[v4i8] }:$rs)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4574:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs)
RESULT:  (PRECEU_PH_QBRA_MM:{ *:[v2i16] } DSPROpnd:{ *:[v4i8] }:$rs)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4673:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (SUBQ_S_PH_MM:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4674:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (SUBQ_S_W_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4698:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (SUBU_S_QB_MM:{ *:[v4i8] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (MipsDPSQ_S_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPSQ_S_W_PH_MM:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsDPSQ_SA_L_W:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPSQ_SA_L_W_MM:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsDPSU_H_QBL:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPSU_H_QBL_MM:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsDPSU_H_QBR:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPSU_H_QBR_MM:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4520:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (MULEQ_S_W_PHL_MM:{ *:[i32] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4521:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (MULEQ_S_W_PHR_MM:{ *:[i32] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4522:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (MULEU_S_PH_QBL_MM:{ *:[v2i16] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4523:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (MULEU_S_PH_QBR_MM:{ *:[v2i16] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4524:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (MULQ_RS_PH_MM:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4578:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (PRECRQ_PH_W_MM:{ *:[v2i16] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4579:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (PRECRQ_QB_PH_MM:{ *:[v4i8] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[v4i8] } 4581:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (PRECRQU_S_QB_PH_MM:{ *:[v4i8] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4580:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (PRECRQ_RS_PH_W_MM:{ *:[v2i16] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4427:{ *:[iPTR] }, iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[i32] }:$index)
RESULT:  (LBUX_MM:{ *:[i32] } iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[i32] }:$index)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4438:{ *:[iPTR] }, iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[i32] }:$index)
RESULT:  (LHX_MM:{ *:[i32] } iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[i32] }:$index)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4440:{ *:[iPTR] }, iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[i32] }:$index)
RESULT:  (LWX_MM:{ *:[i32] } iPTR:{ *:[iPTR] }:$base, iPTR:{ *:[i32] }:$index)
PATTERN: (MipsMAQ_S_W_PHL:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (MAQ_S_W_PHL_MM:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsMAQ_SA_W_PHL:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (MAQ_SA_W_PHL_MM:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsMAQ_S_W_PHR:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (MAQ_S_W_PHR_MM:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsMAQ_SA_W_PHR:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (MAQ_SA_W_PHR_MM:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsMFHI:{ *:[i32] } ACC64DSPOpnd:{ *:[Untyped] }:$ac)
RESULT:  (MFHI_DSP_MM:{ *:[i32] } ACC64DSPOpnd:{ *:[Untyped] }:$ac)
PATTERN: (MipsMFLO:{ *:[i32] } ACC64DSPOpnd:{ *:[Untyped] }:$ac)
RESULT:  (MFLO_DSP_MM:{ *:[i32] } ACC64DSPOpnd:{ *:[Untyped] }:$ac)
PATTERN: (intrinsic_wo_chain:{ *:[i32] } 4583:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs)
RESULT:  (RADDU_W_QB_MM:{ *:[i32] } DSPROpnd:{ *:[v4i8] }:$rs)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4584:{ *:[iPTR] }, (timm:{ *:[i32] })<<P:Predicate_timmZExt7>>:$mask)
RESULT:  (RDDSP_MM:{ *:[i32] } (timm:{ *:[i32] }):$mask)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4585:{ *:[iPTR] }, (imm:{ *:[i32] })<<P:Predicate_immSExt10>>:$imm)
RESULT:  (REPL_PH_MM:{ *:[v2i16] } (imm:{ *:[i32] }):$imm)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4586:{ *:[iPTR] }, (imm:{ *:[i32] })<<P:Predicate_immZExt8>>:$imm)
RESULT:  (REPL_QB_MM:{ *:[v4i8] } (imm:{ *:[i32] }):$imm)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4585:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (REPLV_PH_MM:{ *:[v2i16] } GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4586:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (REPLV_QB_MM:{ *:[v4i8] } GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (MipsMTHLIP:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (MTHLIP_MM:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4550:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (PACKRL_PH_MM:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4563:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (PICK_PH_MM:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[v4i8] } 4564:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (PICK_QB_MM:{ *:[v4i8] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (MipsSHILO:{ *:[Untyped] } (imm:{ *:[i32] })<<P:Predicate_immSExt6>>:$shift, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (SHILO_MM:{ *:[Untyped] } (imm:{ *:[i32] }):$shift, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsSHILO:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (SHILOV_MM:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (intrinsic_void 4713:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rt, (timm:{ *:[i32] })<<P:Predicate_timmZExt7>>:$mask)
RESULT:  (WRDSP_MM GPR32Opnd:{ *:[i32] }:$rt, (timm:{ *:[i32] }):$mask)
PATTERN: (intrinsic_wo_chain:{ *:[i32] } 4503:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (MODSUB_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (MipsMULSAQ_S_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (MULSAQ_S_W_PH_MM:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (intrinsic_wo_chain:{ *:[i32] } 4139:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (BITREV_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (intrinsic_void 4214:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (CMP_EQ_PH_MM DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_void 4216:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (CMP_LT_PH_MM DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_void 4215:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (CMP_LE_PH_MM DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4220:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (CMPGU_EQ_QB_MM:{ *:[i32] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4222:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (CMPGU_LT_QB_MM:{ *:[i32] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4221:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (CMPGU_LE_QB_MM:{ *:[i32] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_void 4223:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (CMPU_EQ_QB_MM DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_void 4225:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (CMPU_LT_QB_MM DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_void 4224:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (CMPU_LE_QB_MM DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[v4i8] } 4046:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs)
RESULT:  (ABSQ_S_QB_MMR2:{ *:[v4i8] } DSPROpnd:{ *:[v4i8] }:$rs)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4055:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (ADDQH_PH_MMR2:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4056:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (ADDQH_R_PH_MMR2:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[i32] } 4058:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (ADDQH_W_MMR2:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[i32] } 4057:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (ADDQH_R_W_MMR2:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4072:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (ADDU_PH_MMR2:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4074:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (ADDU_S_PH_MMR2:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4076:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (ADDUH_QB_MMR2:{ *:[v4i8] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4077:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (ADDUH_R_QB_MMR2:{ *:[v4i8] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (MipsDPA_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPA_W_PH_MMR2:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsDPAQX_S_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPAQX_S_W_PH_MMR2:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsDPAQX_SA_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPAQX_SA_W_PH_MMR2:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsDPAX_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPAX_W_PH_MMR2:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4606:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immZExt3>>:$sa)
RESULT:  (SHRA_R_QB_MMR2:{ *:[v4i8] } DSPROpnd:{ *:[v4i8] }:$rs, (imm:{ *:[i32] }):$sa)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4604:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (SHRAV_QB_MMR2:{ *:[v4i8] } DSPROpnd:{ *:[v4i8] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4606:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (SHRAV_R_QB_MMR2:{ *:[v4i8] } DSPROpnd:{ *:[v4i8] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (intrinsic_wo_chain:{ *:[i32] } 4114:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$src, GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immZExt2>>:$bp)
RESULT:  (BALIGN_MMR2:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] }):$bp, GPR32Opnd:{ *:[i32] }:$src)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4217:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (CMPGDU_EQ_QB_MMR2:{ *:[i32] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4219:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (CMPGDU_LT_QB_MMR2:{ *:[i32] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4218:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (CMPGDU_LE_QB_MMR2:{ *:[i32] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4608:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
RESULT:  (SHRLV_PH_MMR2:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rt, GPR32Opnd:{ *:[i32] }:$rs)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4675:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (SUBQH_PH_MMR2:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4676:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (SUBQH_R_PH_MMR2:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[i32] } 4678:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (SUBQH_W_MMR2:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[i32] } 4677:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (SUBQH_R_W_MMR2:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4695:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (SUBU_PH_MMR2:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4697:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (SUBU_S_PH_MMR2:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4699:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (SUBUH_QB_MMR2:{ *:[v4i8] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4700:{ *:[iPTR] }, DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
RESULT:  (SUBUH_R_QB_MMR2:{ *:[v4i8] } DSPROpnd:{ *:[v4i8] }:$rs, DSPROpnd:{ *:[v4i8] }:$rt)
PATTERN: (MipsDPS_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPS_W_PH_MMR2:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsDPSQX_S_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPSQX_S_W_PH_MMR2:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsDPSQX_SA_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPSQX_SA_W_PH_MMR2:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (MipsDPSX_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (DPSX_W_PH_MMR2:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4519:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (MUL_S_PH_MMR2:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4525:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (MULQ_RS_W_MMR2:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4526:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (MULQ_S_PH_MMR2:{ *:[v2i16] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4527:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (MULQ_S_W_MMR2:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (intrinsic_w_chain:{ *:[v4i8] } 4575:{ *:[iPTR] }, DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
RESULT:  (PRECR_QB_PH_MMR2:{ *:[v4i8] } DSPROpnd:{ *:[v2i16] }:$rs, DSPROpnd:{ *:[v2i16] }:$rt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4576:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$src, GPR32Opnd:{ *:[i32] }:$rs, (timm:{ *:[i32] })<<P:Predicate_timmZExt5>>:$sa)
RESULT:  (PRECR_SRA_PH_W_MMR2:{ *:[v2i16] } GPR32Opnd:{ *:[i32] }:$rs, (timm:{ *:[i32] }):$sa, GPR32Opnd:{ *:[i32] }:$src)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4577:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$src, GPR32Opnd:{ *:[i32] }:$rs, (timm:{ *:[i32] })<<P:Predicate_timmZExt5>>:$sa)
RESULT:  (PRECR_SRA_R_PH_W_MMR2:{ *:[v2i16] } GPR32Opnd:{ *:[i32] }:$rs, (timm:{ *:[i32] }):$sa, GPR32Opnd:{ *:[i32] }:$src)
PATTERN: (intrinsic_wo_chain:{ *:[i32] } 4582:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$src, GPR32Opnd:{ *:[i32] }:$rs, (timm:{ *:[i32] })<<P:Predicate_timmZExt5>>:$sa)
RESULT:  (PREPEND_MMR2:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (timm:{ *:[i32] }):$sa, GPR32Opnd:{ *:[i32] }:$src)
PATTERN: (intrinsic_wo_chain:{ *:[i32] } 4089:{ *:[iPTR] }, GPR32Opnd:{ *:[i32] }:$src, GPR32Opnd:{ *:[i32] }:$rs, (timm:{ *:[i32] })<<P:Predicate_timmZExt5>>:$sa)
RESULT:  (APPEND_MMR2:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (timm:{ *:[i32] }):$sa, GPR32Opnd:{ *:[i32] }:$src)
PATTERN: (MipsMULSA_W_PH:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
RESULT:  (MULSA_W_PH_MMR2:{ *:[Untyped] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, ACC64DSPOpnd:{ *:[Untyped] }:$acin)
PATTERN: (st MSA128D:{ *:[v2f64] }:$ws, addrimm10lsl3:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (ST_D MSA128D:{ *:[v2f64] }:$ws, addrimm10lsl3:{ *:[iPTR] }:$addr)
PATTERN: (st MSA128H:{ *:[v8f16] }:$ws, addrimm10lsl1:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (ST_H MSA128H:{ *:[v8f16] }:$ws, addrimm10lsl1:{ *:[iPTR] }:$addr)
PATTERN: (st MSA128W:{ *:[v4f32] }:$ws, addrimm10lsl2:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (ST_W MSA128W:{ *:[v4f32] }:$ws, addrimm10lsl2:{ *:[iPTR] }:$addr)
PATTERN: (imm:{ *:[i32] })<<P:Predicate_LUiORiPred>>:$imm
RESULT:  (ORi:{ *:[i32] } (LUi:{ *:[i32] } (HI16:{ *:[i32] } (imm:{ *:[i32] }):$imm)), (LO16:{ *:[i32] } (imm:{ *:[i32] }):$imm))
PATTERN: (imm:{ *:[i32] })<<P:Predicate_LUiPred>>:$imm
RESULT:  (LUi:{ *:[i32] } (HI16:{ *:[i32] } (imm:{ *:[i32] }):$imm))
PATTERN: (imm:{ *:[i32] })<<P:Predicate_ORiPred>><<X:LO16>>:$imm
RESULT:  (ORi:{ *:[i32] } ZERO:{ *:[i32] }, (imm:{ *:[i32] }):$imm)
PATTERN: (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$imm
RESULT:  (ADDiu:{ *:[i32] } ZERO:{ *:[i32] }, (imm:{ *:[i32] }):$imm)
PATTERN: (subc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs)
RESULT:  (SUBu:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs)
PATTERN: (addc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs)
RESULT:  (ADDu:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs)
PATTERN: (addc:{ *:[i32] } GPR32:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$imm)
RESULT:  (ADDiu:{ *:[i32] } GPR32:{ *:[i32] }:$src, (imm:{ *:[i32] }):$imm)
PATTERN: (mul:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs)
RESULT:  (PseudoMFLO:{ *:[i32] } (PseudoMULT:{ *:[Untyped] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs))
PATTERN: (MipsSync (imm:{ *:[i32] })<<P:Predicate_immz>>)
RESULT:  (SYNC 0:{ *:[i32] })
PATTERN: (MipsJmpLink (texternalsym:{ *:[i32] }):$dst)
RESULT:  (JAL (texternalsym:{ *:[i32] }):$dst)
PATTERN: (MipsTailCall (tglobaladdr:{ *:[iPTR] }):$dst)
RESULT:  (TAILCALL (tglobaladdr:{ *:[iPTR] }):$dst)
PATTERN: (MipsTailCall (texternalsym:{ *:[iPTR] }):$dst)
RESULT:  (TAILCALL (texternalsym:{ *:[iPTR] }):$dst)
PATTERN: (MipsHi:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$in)
RESULT:  (LUi:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$in)
PATTERN: (MipsHi:{ *:[i32] } (tblockaddress:{ *:[i32] }):$in)
RESULT:  (LUi:{ *:[i32] } (tblockaddress:{ *:[i32] }):$in)
PATTERN: (MipsHi:{ *:[i32] } (tjumptable:{ *:[i32] }):$in)
RESULT:  (LUi:{ *:[i32] } (tjumptable:{ *:[i32] }):$in)
PATTERN: (MipsHi:{ *:[i32] } (tconstpool:{ *:[i32] }):$in)
RESULT:  (LUi:{ *:[i32] } (tconstpool:{ *:[i32] }):$in)
PATTERN: (MipsHi:{ *:[i32] } (texternalsym:{ *:[i32] }):$in)
RESULT:  (LUi:{ *:[i32] } (texternalsym:{ *:[i32] }):$in)
PATTERN: (MipsLo:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$in)
RESULT:  (ADDiu:{ *:[i32] } ZERO:{ *:[i32] }, (tglobaladdr:{ *:[i32] }):$in)
PATTERN: (MipsLo:{ *:[i32] } (tblockaddress:{ *:[i32] }):$in)
RESULT:  (ADDiu:{ *:[i32] } ZERO:{ *:[i32] }, (tblockaddress:{ *:[i32] }):$in)
PATTERN: (MipsLo:{ *:[i32] } (tjumptable:{ *:[i32] }):$in)
RESULT:  (ADDiu:{ *:[i32] } ZERO:{ *:[i32] }, (tjumptable:{ *:[i32] }):$in)
PATTERN: (MipsLo:{ *:[i32] } (tconstpool:{ *:[i32] }):$in)
RESULT:  (ADDiu:{ *:[i32] } ZERO:{ *:[i32] }, (tconstpool:{ *:[i32] }):$in)
PATTERN: (MipsLo:{ *:[i32] } (tglobaltlsaddr:{ *:[i32] }):$in)
RESULT:  (ADDiu:{ *:[i32] } ZERO:{ *:[i32] }, (tglobaltlsaddr:{ *:[i32] }):$in)
PATTERN: (MipsLo:{ *:[i32] } (texternalsym:{ *:[i32] }):$in)
RESULT:  (ADDiu:{ *:[i32] } ZERO:{ *:[i32] }, (texternalsym:{ *:[i32] }):$in)
PATTERN: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$lo))
RESULT:  (ADDiu:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (tglobaladdr:{ *:[i32] }):$lo)
PATTERN: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tblockaddress:{ *:[i32] }):$lo))
RESULT:  (ADDiu:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (tblockaddress:{ *:[i32] }):$lo)
PATTERN: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tjumptable:{ *:[i32] }):$lo))
RESULT:  (ADDiu:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (tjumptable:{ *:[i32] }):$lo)
PATTERN: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tconstpool:{ *:[i32] }):$lo))
RESULT:  (ADDiu:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (tconstpool:{ *:[i32] }):$lo)
PATTERN: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tglobaltlsaddr:{ *:[i32] }):$lo))
RESULT:  (ADDiu:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (tglobaltlsaddr:{ *:[i32] }):$lo)
PATTERN: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (texternalsym:{ *:[i32] }):$lo))
RESULT:  (ADDiu:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (texternalsym:{ *:[i32] }):$lo)
PATTERN: (MipsGotHi:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$in)
RESULT:  (LUi:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$in)
PATTERN: (MipsGotHi:{ *:[i32] } (texternalsym:{ *:[i32] }):$in)
RESULT:  (LUi:{ *:[i32] } (texternalsym:{ *:[i32] }):$in)
PATTERN: (MipsTlsHi:{ *:[i32] } (tglobaltlsaddr:{ *:[i32] }):$in)
RESULT:  (LUi:{ *:[i32] } (tglobaltlsaddr:{ *:[i32] }):$in)
PATTERN: (add:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (MipsGPRel:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$in))
RESULT:  (ADDiu:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (tglobaladdr:{ *:[i32] }):$in)
PATTERN: (add:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (MipsGPRel:{ *:[i32] } (tconstpool:{ *:[i32] }):$in))
RESULT:  (ADDiu:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (tconstpool:{ *:[i32] }):$in)
PATTERN: (MipsWrapper:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (tglobaladdr:{ *:[i32] }):$in)
RESULT:  (ADDiu:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (tglobaladdr:{ *:[i32] }):$in)
PATTERN: (MipsWrapper:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (tconstpool:{ *:[i32] }):$in)
RESULT:  (ADDiu:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (tconstpool:{ *:[i32] }):$in)
PATTERN: (MipsWrapper:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (texternalsym:{ *:[i32] }):$in)
RESULT:  (ADDiu:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (texternalsym:{ *:[i32] }):$in)
PATTERN: (MipsWrapper:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (tblockaddress:{ *:[i32] }):$in)
RESULT:  (ADDiu:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (tblockaddress:{ *:[i32] }):$in)
PATTERN: (MipsWrapper:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (tjumptable:{ *:[i32] }):$in)
RESULT:  (ADDiu:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (tjumptable:{ *:[i32] }):$in)
PATTERN: (MipsWrapper:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (tglobaltlsaddr:{ *:[i32] }):$in)
RESULT:  (ADDiu:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (tglobaltlsaddr:{ *:[i32] }):$in)
PATTERN: (xor:{ *:[i32] } GPR32:{ *:[i32] }:$in, -1:{ *:[i32] })
RESULT:  (NOR:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$in, ZERO:{ *:[i32] })
PATTERN: (ld:{ *:[i32] } addr:{ *:[iPTR] }:$src)<<P:Predicate_unindexedload>><<P:Predicate_extload>><<P:Predicate_extloadi1>>
RESULT:  (LBu:{ *:[i32] } addr:{ *:[iPTR] }:$src)
PATTERN: (ld:{ *:[i32] } addr:{ *:[iPTR] }:$src)<<P:Predicate_unindexedload>><<P:Predicate_extload>><<P:Predicate_extloadi8>>
RESULT:  (LBu:{ *:[i32] } addr:{ *:[iPTR] }:$src)
PATTERN: (ld:{ *:[i32] } addr:{ *:[iPTR] }:$src)<<P:Predicate_unindexedload>><<P:Predicate_extload>><<P:Predicate_extloadi16>>
RESULT:  (LHu:{ *:[i32] } addr:{ *:[iPTR] }:$src)
PATTERN: (st 0:{ *:[i32] }, addr:{ *:[iPTR] }:$dst)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SW ZERO:{ *:[i32] }, addr:{ *:[iPTR] }:$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETNE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BNE GPR32:{ *:[i32] }:$lhs, ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETEQ:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQ GPR32:{ *:[i32] }:$lhs, ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETGE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQ (SLT:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETUGE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQ (SLTu:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs, SETGE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQ (SLTi:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs), ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs, SETUGE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQ (SLTiu:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs), ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETGT:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQ (SLTi:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$rhs)), ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETUGT:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQ (SLTiu:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$rhs)), ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETLE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQ (SLT:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs), ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETULE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQ (SLTu:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs), ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond GPR32:{ *:[i32] }:$cond, (bb:{ *:[Other] }):$dst)
RESULT:  (BNE GPR32:{ *:[i32] }:$cond, ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } i32:{ *:[i32] }:$lhs, 1:{ *:[i32] }, SETLT:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BLEZ i32:{ *:[i32] }:$lhs, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } i32:{ *:[i32] }:$lhs, -1:{ *:[i32] }, SETGT:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BGEZ i32:{ *:[i32] }:$lhs, (bb:{ *:[Other] }):$dst)
PATTERN: (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETEQ:{ *:[Other] })
RESULT:  (SLTiu:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 1:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETNE:{ *:[Other] })
RESULT:  (SLTu:{ *:[i32] } ZERO:{ *:[i32] }, GPR32:{ *:[i32] }:$lhs)
PATTERN: (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETEQ:{ *:[Other] })
RESULT:  (SLTiu:{ *:[i32] } (XOR:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), 1:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETNE:{ *:[Other] })
RESULT:  (SLTu:{ *:[i32] } ZERO:{ *:[i32] }, (XOR:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs))
PATTERN: (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETLE:{ *:[Other] })
RESULT:  (XORi:{ *:[i32] } (SLT:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs), 1:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETULE:{ *:[Other] })
RESULT:  (XORi:{ *:[i32] } (SLTu:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs), 1:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETGT:{ *:[Other] })
RESULT:  (SLT:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs)
PATTERN: (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETUGT:{ *:[Other] })
RESULT:  (SLTu:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs)
PATTERN: (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETGE:{ *:[Other] })
RESULT:  (XORi:{ *:[i32] } (SLT:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), 1:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETUGE:{ *:[Other] })
RESULT:  (XORi:{ *:[i32] } (SLTu:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), 1:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs, SETGE:{ *:[Other] })
RESULT:  (XORi:{ *:[i32] } (SLTi:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs), 1:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs, SETUGE:{ *:[Other] })
RESULT:  (XORi:{ *:[i32] } (SLTiu:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs), 1:{ *:[i32] })
PATTERN: (bswap:{ *:[i32] } GPR32:{ *:[i32] }:$rt)
RESULT:  (ROTR:{ *:[i32] } (WSBH:{ *:[i32] } GPR32:{ *:[i32] }:$rt), 16:{ *:[i32] })
PATTERN: (ld:{ *:[i32] } addrRegImm:{ *:[iPTR] }:$a)<<P:Predicate_unindexedload>><<P:Predicate_zextload>><<P:Predicate_zextloadi8>>
RESULT:  (LBu:{ *:[i32] } addrRegImm:{ *:[iPTR] }:$a)
PATTERN: (ld:{ *:[i32] } addrRegImm:{ *:[iPTR] }:$a)<<P:Predicate_unindexedload>><<P:Predicate_zextload>><<P:Predicate_zextloadi16>>
RESULT:  (LHu:{ *:[i32] } addrRegImm:{ *:[iPTR] }:$a)
PATTERN: (ld:{ *:[i32] } addrRegImm:{ *:[iPTR] }:$a)<<P:Predicate_unindexedload>><<P:Predicate_sextload>><<P:Predicate_sextloadi8>>
RESULT:  (LB:{ *:[i32] } addrRegImm:{ *:[iPTR] }:$a)
PATTERN: (ld:{ *:[i32] } addrRegImm:{ *:[iPTR] }:$a)<<P:Predicate_unindexedload>><<P:Predicate_sextload>><<P:Predicate_sextloadi16>>
RESULT:  (LH:{ *:[i32] } addrRegImm:{ *:[iPTR] }:$a)
PATTERN: (ld:{ *:[i32] } addrRegImm:{ *:[iPTR] }:$a)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LW:{ *:[i32] } addrRegImm:{ *:[iPTR] }:$a)
PATTERN: (atomic_load:{ *:[i32] } addr:{ *:[iPTR] }:$a)<<P:Predicate_atomic_load_8>>
RESULT:  (LB:{ *:[i32] } addr:{ *:[iPTR] }:$a)
PATTERN: (atomic_load:{ *:[i32] } addr:{ *:[iPTR] }:$a)<<P:Predicate_atomic_load_16>>
RESULT:  (LH:{ *:[i32] } addr:{ *:[iPTR] }:$a)
PATTERN: (atomic_load:{ *:[i32] } addr:{ *:[iPTR] }:$a)<<P:Predicate_atomic_load_32>>
RESULT:  (LW:{ *:[i32] } addr:{ *:[iPTR] }:$a)
PATTERN: (atomic_store addr:{ *:[iPTR] }:$a, GPR32:{ *:[i32] }:$v)<<P:Predicate_atomic_store_8>>
RESULT:  (SB GPR32:{ *:[i32] }:$v, addr:{ *:[iPTR] }:$a)
PATTERN: (atomic_store addr:{ *:[iPTR] }:$a, GPR32:{ *:[i32] }:$v)<<P:Predicate_atomic_store_16>>
RESULT:  (SH GPR32:{ *:[i32] }:$v, addr:{ *:[iPTR] }:$a)
PATTERN: (atomic_store addr:{ *:[iPTR] }:$a, GPR32:{ *:[i32] }:$v)<<P:Predicate_atomic_store_32>>
RESULT:  (SW GPR32:{ *:[i32] }:$v, addr:{ *:[iPTR] }:$a)
PATTERN: (fpimm:{ *:[f32] })<<P:Predicate_fpimm0>>
RESULT:  (MTC1:{ *:[f32] } ZERO:{ *:[i32] })
PATTERN: (fpimm:{ *:[f32] })<<P:Predicate_fpimm0neg>>
RESULT:  (FNEG_S:{ *:[f32] } (MTC1:{ *:[f32] } ZERO:{ *:[i32] }))
PATTERN: (sint_to_fp:{ *:[f32] } GPR32Opnd:{ *:[i32] }:$src)
RESULT:  (PseudoCVT_S_W:{ *:[f32] } GPR32Opnd:{ *:[i32] }:$src)
PATTERN: (MipsTruncIntFP:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$src)
RESULT:  (TRUNC_W_S:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$src)
PATTERN: (MipsMTC1_D64:{ *:[f64] } GPR32Opnd:{ *:[i32] }:$src)
RESULT:  (MTC1_D64:{ *:[f64] } GPR32Opnd:{ *:[i32] }:$src)
PATTERN: (sint_to_fp:{ *:[f64] } GPR32Opnd:{ *:[i32] }:$src)
RESULT:  (PseudoCVT_D32_W:{ *:[f64] } GPR32Opnd:{ *:[i32] }:$src)
PATTERN: (MipsTruncIntFP:{ *:[f32] } AFGR64Opnd:{ *:[f64] }:$src)
RESULT:  (TRUNC_W_D32:{ *:[f32] } AFGR64Opnd:{ *:[f64] }:$src)
PATTERN: (fpround:{ *:[f32] } AFGR64Opnd:{ *:[f64] }:$src)
RESULT:  (CVT_S_D32:{ *:[f32] } AFGR64Opnd:{ *:[f64] }:$src)
PATTERN: (fpextend:{ *:[f64] } FGR32Opnd:{ *:[f32] }:$src)
RESULT:  (CVT_D32_S:{ *:[f64] } FGR32Opnd:{ *:[f32] }:$src)
PATTERN: (fpimm:{ *:[f64] })<<P:Predicate_fpimm0>>
RESULT:  (DMTC1:{ *:[f64] } ZERO_64:{ *:[i64] })
PATTERN: (fpimm:{ *:[f64] })<<P:Predicate_fpimm0neg>>
RESULT:  (FNEG_D64:{ *:[f64] } (DMTC1:{ *:[f64] } ZERO_64:{ *:[i64] }))
PATTERN: (sint_to_fp:{ *:[f64] } GPR32Opnd:{ *:[i32] }:$src)
RESULT:  (PseudoCVT_D64_W:{ *:[f64] } GPR32Opnd:{ *:[i32] }:$src)
PATTERN: (sint_to_fp:{ *:[f32] } GPR64Opnd:{ *:[i64] }:$src)
RESULT:  (EXTRACT_SUBREG:{ *:[f32] } (PseudoCVT_S_L:{ *:[f64] } GPR64Opnd:{ *:[i64] }:$src), sub_lo:{ *:[i32] })
PATTERN: (sint_to_fp:{ *:[f64] } GPR64Opnd:{ *:[i64] }:$src)
RESULT:  (PseudoCVT_D64_L:{ *:[f64] } GPR64Opnd:{ *:[i64] }:$src)
PATTERN: (MipsTruncIntFP:{ *:[f32] } FGR64Opnd:{ *:[f64] }:$src)
RESULT:  (TRUNC_W_D64:{ *:[f32] } FGR64Opnd:{ *:[f64] }:$src)
PATTERN: (MipsTruncIntFP:{ *:[f64] } FGR32Opnd:{ *:[f32] }:$src)
RESULT:  (TRUNC_L_S:{ *:[f64] } FGR32Opnd:{ *:[f32] }:$src)
PATTERN: (MipsTruncIntFP:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$src)
RESULT:  (TRUNC_L_D64:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$src)
PATTERN: (fpround:{ *:[f32] } FGR64Opnd:{ *:[f64] }:$src)
RESULT:  (CVT_S_D64:{ *:[f32] } FGR64Opnd:{ *:[f64] }:$src)
PATTERN: (fpextend:{ *:[f64] } FGR32Opnd:{ *:[f32] }:$src)
RESULT:  (CVT_D64_S:{ *:[f64] } FGR32Opnd:{ *:[f32] }:$src)
PATTERN: (fneg:{ *:[f32] } (fadd:{ *:[f32] } (fmul:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft), FGR32Opnd:{ *:[f32] }:$fr))
RESULT:  (NMADD_S:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fr, FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (fneg:{ *:[f32] } (fsub:{ *:[f32] } (fmul:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft), FGR32Opnd:{ *:[f32] }:$fr))
RESULT:  (NMSUB_S:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fr, FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (fneg:{ *:[f64] } (fadd:{ *:[f64] } (fmul:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft), AFGR64Opnd:{ *:[f64] }:$fr))
RESULT:  (NMADD_D32:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fr, AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fneg:{ *:[f64] } (fsub:{ *:[f64] } (fmul:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft), AFGR64Opnd:{ *:[f64] }:$fr))
RESULT:  (NMSUB_D32:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fr, AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fneg:{ *:[f64] } (fadd:{ *:[f64] } (fmul:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft), FGR64Opnd:{ *:[f64] }:$fr))
RESULT:  (NMADD_D64:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fr, FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fneg:{ *:[f64] } (fsub:{ *:[f64] } (fmul:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft), FGR64Opnd:{ *:[f64] }:$fr))
RESULT:  (NMSUB_D64:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fr, FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (ld:{ *:[f32] } addrRegImm:{ *:[iPTR] }:$a)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LWC1:{ *:[f32] } addrRegImm:{ *:[iPTR] }:$a)
PATTERN: (st f32:{ *:[f32] }:$v, addrRegImm:{ *:[iPTR] }:$a)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SWC1 f32:{ *:[f32] }:$v, addrRegImm:{ *:[iPTR] }:$a)
PATTERN: (ld:{ *:[f64] } addrRegImm:{ *:[iPTR] }:$a)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LDC164:{ *:[f64] } addrRegImm:{ *:[iPTR] }:$a)
PATTERN: (st f64:{ *:[f64] }:$v, addrRegImm:{ *:[iPTR] }:$a)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SDC164 f64:{ *:[f64] }:$v, addrRegImm:{ *:[iPTR] }:$a)
PATTERN: (ld:{ *:[f64] } addrRegImm:{ *:[iPTR] }:$a)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LDC1:{ *:[f64] } addrRegImm:{ *:[iPTR] }:$a)
PATTERN: (st f64:{ *:[f64] }:$v, addrRegImm:{ *:[iPTR] }:$a)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SDC1 f64:{ *:[f64] }:$v, addrRegImm:{ *:[iPTR] }:$a)
PATTERN: (imm:{ *:[i64] })<<P:Predicate_LUiORiPred>>:$imm
RESULT:  (ORi64:{ *:[i64] } (LUi64:{ *:[i64] } (HI16:{ *:[i64] } (imm:{ *:[i64] }):$imm)), (LO16:{ *:[i64] } (imm:{ *:[i64] }):$imm))
PATTERN: (imm:{ *:[i64] })<<P:Predicate_LUiPred>>:$imm
RESULT:  (LUi64:{ *:[i64] } (HI16:{ *:[i64] } (imm:{ *:[i64] }):$imm))
PATTERN: (imm:{ *:[i64] })<<P:Predicate_ORiPred>><<X:LO16>>:$imm
RESULT:  (ORi64:{ *:[i64] } ZERO_64:{ *:[i64] }, (imm:{ *:[i64] }):$imm)
PATTERN: (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$imm
RESULT:  (DADDiu:{ *:[i64] } ZERO_64:{ *:[i64] }, (imm:{ *:[i64] }):$imm)
PATTERN: (imm:{ *:[i64] })<<P:Predicate_immZExt32Low16Zero>>:$imm
RESULT:  (DSLL:{ *:[i64] } (ORi64:{ *:[i64] } ZERO_64:{ *:[i64] }, (HI16:{ *:[i64] } (imm:{ *:[i64] }):$imm)), 16:{ *:[i32] })
PATTERN: (imm:{ *:[i64] })<<P:Predicate_immZExt32>>:$imm
RESULT:  (ORi64:{ *:[i64] } (DSLL:{ *:[i64] } (ORi64:{ *:[i64] } ZERO_64:{ *:[i64] }, (HI16:{ *:[i64] } (imm:{ *:[i64] }):$imm)), 16:{ *:[i32] }), (LO16:{ *:[i64] } (imm:{ *:[i64] }):$imm))
PATTERN: (ld:{ *:[i64] } addr:{ *:[iPTR] }:$src)<<P:Predicate_unindexedload>><<P:Predicate_extload>><<P:Predicate_extloadi1>>
RESULT:  (LB64:{ *:[i64] } addr:{ *:[iPTR] }:$src)
PATTERN: (ld:{ *:[i64] } addr:{ *:[iPTR] }:$src)<<P:Predicate_unindexedload>><<P:Predicate_extload>><<P:Predicate_extloadi8>>
RESULT:  (LB64:{ *:[i64] } addr:{ *:[iPTR] }:$src)
PATTERN: (ld:{ *:[i64] } addr:{ *:[iPTR] }:$src)<<P:Predicate_unindexedload>><<P:Predicate_extload>><<P:Predicate_extloadi16>>
RESULT:  (LH64:{ *:[i64] } addr:{ *:[iPTR] }:$src)
PATTERN: (ld:{ *:[i64] } addr:{ *:[iPTR] }:$src)<<P:Predicate_unindexedload>><<P:Predicate_extload>><<P:Predicate_extloadi32>>
RESULT:  (LW64:{ *:[i64] } addr:{ *:[iPTR] }:$src)
PATTERN: (MipsHi:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$in)
RESULT:  (LUi64:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$in)
PATTERN: (MipsHi:{ *:[i64] } (tblockaddress:{ *:[i64] }):$in)
RESULT:  (LUi64:{ *:[i64] } (tblockaddress:{ *:[i64] }):$in)
PATTERN: (MipsHi:{ *:[i64] } (tjumptable:{ *:[i64] }):$in)
RESULT:  (LUi64:{ *:[i64] } (tjumptable:{ *:[i64] }):$in)
PATTERN: (MipsHi:{ *:[i64] } (tconstpool:{ *:[i64] }):$in)
RESULT:  (LUi64:{ *:[i64] } (tconstpool:{ *:[i64] }):$in)
PATTERN: (MipsHi:{ *:[i64] } (texternalsym:{ *:[i64] }):$in)
RESULT:  (LUi64:{ *:[i64] } (texternalsym:{ *:[i64] }):$in)
PATTERN: (MipsLo:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$in)
RESULT:  (DADDiu:{ *:[i64] } ZERO_64:{ *:[i64] }, (tglobaladdr:{ *:[i64] }):$in)
PATTERN: (MipsLo:{ *:[i64] } (tblockaddress:{ *:[i64] }):$in)
RESULT:  (DADDiu:{ *:[i64] } ZERO_64:{ *:[i64] }, (tblockaddress:{ *:[i64] }):$in)
PATTERN: (MipsLo:{ *:[i64] } (tjumptable:{ *:[i64] }):$in)
RESULT:  (DADDiu:{ *:[i64] } ZERO_64:{ *:[i64] }, (tjumptable:{ *:[i64] }):$in)
PATTERN: (MipsLo:{ *:[i64] } (tconstpool:{ *:[i64] }):$in)
RESULT:  (DADDiu:{ *:[i64] } ZERO_64:{ *:[i64] }, (tconstpool:{ *:[i64] }):$in)
PATTERN: (MipsLo:{ *:[i64] } (tglobaltlsaddr:{ *:[i64] }):$in)
RESULT:  (DADDiu:{ *:[i64] } ZERO_64:{ *:[i64] }, (tglobaltlsaddr:{ *:[i64] }):$in)
PATTERN: (MipsLo:{ *:[i64] } (texternalsym:{ *:[i64] }):$in)
RESULT:  (DADDiu:{ *:[i64] } ZERO_64:{ *:[i64] }, (texternalsym:{ *:[i64] }):$in)
PATTERN: (add:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$lo))
RESULT:  (DADDiu:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (tglobaladdr:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tblockaddress:{ *:[i64] }):$lo))
RESULT:  (DADDiu:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (tblockaddress:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tjumptable:{ *:[i64] }):$lo))
RESULT:  (DADDiu:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (tjumptable:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tconstpool:{ *:[i64] }):$lo))
RESULT:  (DADDiu:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (tconstpool:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tglobaltlsaddr:{ *:[i64] }):$lo))
RESULT:  (DADDiu:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (tglobaltlsaddr:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (texternalsym:{ *:[i64] }):$lo))
RESULT:  (DADDiu:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (texternalsym:{ *:[i64] }):$lo)
PATTERN: (MipsGotHi:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$in)
RESULT:  (LUi64:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$in)
PATTERN: (MipsGotHi:{ *:[i64] } (texternalsym:{ *:[i64] }):$in)
RESULT:  (LUi64:{ *:[i64] } (texternalsym:{ *:[i64] }):$in)
PATTERN: (MipsTlsHi:{ *:[i64] } (tglobaltlsaddr:{ *:[i64] }):$in)
RESULT:  (LUi64:{ *:[i64] } (tglobaltlsaddr:{ *:[i64] }):$in)
PATTERN: (MipsJmpLink (texternalsym:{ *:[i64] }):$dst)
RESULT:  (JAL (texternalsym:{ *:[i64] }):$dst)
PATTERN: (MipsHighest:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$in)
RESULT:  (LUi64:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$in)
PATTERN: (MipsHighest:{ *:[i64] } (tblockaddress:{ *:[i64] }):$in)
RESULT:  (LUi64:{ *:[i64] } (tblockaddress:{ *:[i64] }):$in)
PATTERN: (MipsHighest:{ *:[i64] } (tjumptable:{ *:[i64] }):$in)
RESULT:  (LUi64:{ *:[i64] } (tjumptable:{ *:[i64] }):$in)
PATTERN: (MipsHighest:{ *:[i64] } (tconstpool:{ *:[i64] }):$in)
RESULT:  (LUi64:{ *:[i64] } (tconstpool:{ *:[i64] }):$in)
PATTERN: (MipsHighest:{ *:[i64] } (texternalsym:{ *:[i64] }):$in)
RESULT:  (LUi64:{ *:[i64] } (texternalsym:{ *:[i64] }):$in)
PATTERN: (MipsHigher:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$in)
RESULT:  (DADDiu:{ *:[i64] } ZERO_64:{ *:[i64] }, (tglobaladdr:{ *:[i64] }):$in)
PATTERN: (MipsHigher:{ *:[i64] } (tblockaddress:{ *:[i64] }):$in)
RESULT:  (DADDiu:{ *:[i64] } ZERO_64:{ *:[i64] }, (tblockaddress:{ *:[i64] }):$in)
PATTERN: (MipsHigher:{ *:[i64] } (tjumptable:{ *:[i64] }):$in)
RESULT:  (DADDiu:{ *:[i64] } ZERO_64:{ *:[i64] }, (tjumptable:{ *:[i64] }):$in)
PATTERN: (MipsHigher:{ *:[i64] } (tconstpool:{ *:[i64] }):$in)
RESULT:  (DADDiu:{ *:[i64] } ZERO_64:{ *:[i64] }, (tconstpool:{ *:[i64] }):$in)
PATTERN: (MipsHigher:{ *:[i64] } (texternalsym:{ *:[i64] }):$in)
RESULT:  (DADDiu:{ *:[i64] } ZERO_64:{ *:[i64] }, (texternalsym:{ *:[i64] }):$in)
PATTERN: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHigher:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$lo))
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (tglobaladdr:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHigher:{ *:[i64] } (tblockaddress:{ *:[i64] }):$lo))
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (tblockaddress:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHigher:{ *:[i64] } (tjumptable:{ *:[i64] }):$lo))
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (tjumptable:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHigher:{ *:[i64] } (tconstpool:{ *:[i64] }):$lo))
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (tconstpool:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHigher:{ *:[i64] } (texternalsym:{ *:[i64] }):$lo))
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (texternalsym:{ *:[i64] }):$lo)
PATTERN: (MipsHi:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$in)
RESULT:  (DADDiu:{ *:[i64] } ZERO_64:{ *:[i64] }, (tglobaladdr:{ *:[i64] }):$in)
PATTERN: (MipsHi:{ *:[i64] } (tblockaddress:{ *:[i64] }):$in)
RESULT:  (DADDiu:{ *:[i64] } ZERO_64:{ *:[i64] }, (tblockaddress:{ *:[i64] }):$in)
PATTERN: (MipsHi:{ *:[i64] } (tjumptable:{ *:[i64] }):$in)
RESULT:  (DADDiu:{ *:[i64] } ZERO_64:{ *:[i64] }, (tjumptable:{ *:[i64] }):$in)
PATTERN: (MipsHi:{ *:[i64] } (tconstpool:{ *:[i64] }):$in)
RESULT:  (DADDiu:{ *:[i64] } ZERO_64:{ *:[i64] }, (tconstpool:{ *:[i64] }):$in)
PATTERN: (MipsHi:{ *:[i64] } (texternalsym:{ *:[i64] }):$in)
RESULT:  (DADDiu:{ *:[i64] } ZERO_64:{ *:[i64] }, (texternalsym:{ *:[i64] }):$in)
PATTERN: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHi:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$lo))
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (tglobaladdr:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHi:{ *:[i64] } (tblockaddress:{ *:[i64] }):$lo))
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (tblockaddress:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHi:{ *:[i64] } (tjumptable:{ *:[i64] }):$lo))
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (tjumptable:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHi:{ *:[i64] } (tconstpool:{ *:[i64] }):$lo))
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (tconstpool:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsHi:{ *:[i64] } (texternalsym:{ *:[i64] }):$lo))
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (texternalsym:{ *:[i64] }):$lo)
PATTERN: (MipsLo:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$in)
RESULT:  (DADDiu:{ *:[i64] } ZERO_64:{ *:[i64] }, (tglobaladdr:{ *:[i64] }):$in)
PATTERN: (MipsLo:{ *:[i64] } (tblockaddress:{ *:[i64] }):$in)
RESULT:  (DADDiu:{ *:[i64] } ZERO_64:{ *:[i64] }, (tblockaddress:{ *:[i64] }):$in)
PATTERN: (MipsLo:{ *:[i64] } (tjumptable:{ *:[i64] }):$in)
RESULT:  (DADDiu:{ *:[i64] } ZERO_64:{ *:[i64] }, (tjumptable:{ *:[i64] }):$in)
PATTERN: (MipsLo:{ *:[i64] } (tconstpool:{ *:[i64] }):$in)
RESULT:  (DADDiu:{ *:[i64] } ZERO_64:{ *:[i64] }, (tconstpool:{ *:[i64] }):$in)
PATTERN: (MipsLo:{ *:[i64] } (tglobaltlsaddr:{ *:[i64] }):$in)
RESULT:  (DADDiu:{ *:[i64] } ZERO_64:{ *:[i64] }, (tglobaltlsaddr:{ *:[i64] }):$in)
PATTERN: (MipsLo:{ *:[i64] } (texternalsym:{ *:[i64] }):$in)
RESULT:  (DADDiu:{ *:[i64] } ZERO_64:{ *:[i64] }, (texternalsym:{ *:[i64] }):$in)
PATTERN: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$lo))
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (tglobaladdr:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tblockaddress:{ *:[i64] }):$lo))
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (tblockaddress:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tjumptable:{ *:[i64] }):$lo))
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (tjumptable:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tconstpool:{ *:[i64] }):$lo))
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (tconstpool:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (tglobaltlsaddr:{ *:[i64] }):$lo))
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (tglobaltlsaddr:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (MipsLo:{ *:[i64] } (texternalsym:{ *:[i64] }):$lo))
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (texternalsym:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } GPR64:{ *:[i64] }:$gp, (MipsGPRel:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$in))
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$gp, (tglobaladdr:{ *:[i64] }):$in)
PATTERN: (add:{ *:[i64] } GPR64:{ *:[i64] }:$gp, (MipsGPRel:{ *:[i64] } (tconstpool:{ *:[i64] }):$in))
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$gp, (tconstpool:{ *:[i64] }):$in)
PATTERN: (MipsWrapper:{ *:[i64] } GPR64:{ *:[i64] }:$gp, (tglobaladdr:{ *:[i64] }):$in)
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$gp, (tglobaladdr:{ *:[i64] }):$in)
PATTERN: (MipsWrapper:{ *:[i64] } GPR64:{ *:[i64] }:$gp, (tconstpool:{ *:[i64] }):$in)
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$gp, (tconstpool:{ *:[i64] }):$in)
PATTERN: (MipsWrapper:{ *:[i64] } GPR64:{ *:[i64] }:$gp, (texternalsym:{ *:[i64] }):$in)
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$gp, (texternalsym:{ *:[i64] }):$in)
PATTERN: (MipsWrapper:{ *:[i64] } GPR64:{ *:[i64] }:$gp, (tblockaddress:{ *:[i64] }):$in)
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$gp, (tblockaddress:{ *:[i64] }):$in)
PATTERN: (MipsWrapper:{ *:[i64] } GPR64:{ *:[i64] }:$gp, (tjumptable:{ *:[i64] }):$in)
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$gp, (tjumptable:{ *:[i64] }):$in)
PATTERN: (MipsWrapper:{ *:[i64] } GPR64:{ *:[i64] }:$gp, (tglobaltlsaddr:{ *:[i64] }):$in)
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$gp, (tglobaltlsaddr:{ *:[i64] }):$in)
PATTERN: (brcond (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, 0:{ *:[i64] }, SETNE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BNE64 GPR64:{ *:[i64] }:$lhs, ZERO_64:{ *:[i64] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, 0:{ *:[i64] }, SETEQ:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQ64 GPR64:{ *:[i64] }:$lhs, ZERO_64:{ *:[i64] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETGE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQ (SLT64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs), ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETUGE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQ (SLTu64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs), ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$rhs, SETGE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQ (SLTi64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$rhs), ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$rhs, SETUGE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQ (SLTiu64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$rhs), ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETGT:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQ (SLTi64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (Plus1:{ *:[i64] } (imm:{ *:[i64] }):$rhs)), ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETUGT:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQ (SLTiu64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (Plus1:{ *:[i64] } (imm:{ *:[i64] }):$rhs)), ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETLE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQ (SLT64:{ *:[i32] } GPR64:{ *:[i64] }:$rhs, GPR64:{ *:[i64] }:$lhs), ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETULE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQ (SLTu64:{ *:[i32] } GPR64:{ *:[i64] }:$rhs, GPR64:{ *:[i64] }:$lhs), ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond GPR64:{ *:[i64] }:$cond, (bb:{ *:[Other] }):$dst)
RESULT:  (BNE64 GPR64:{ *:[i64] }:$cond, ZERO_64:{ *:[i64] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } i64:{ *:[i64] }:$lhs, 1:{ *:[i64] }, SETLT:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BLEZ64 i64:{ *:[i64] }:$lhs, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } i64:{ *:[i64] }:$lhs, -1:{ *:[i64] }, SETGT:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BGEZ64 i64:{ *:[i64] }:$lhs, (bb:{ *:[Other] }):$dst)
PATTERN: (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, 0:{ *:[i64] }, SETEQ:{ *:[Other] })
RESULT:  (SLTiu64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, 1:{ *:[i64] })
PATTERN: (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, 0:{ *:[i64] }, SETNE:{ *:[Other] })
RESULT:  (SLTu64:{ *:[i32] } ZERO_64:{ *:[i64] }, GPR64:{ *:[i64] }:$lhs)
PATTERN: (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETEQ:{ *:[Other] })
RESULT:  (SLTiu64:{ *:[i32] } (XOR64:{ *:[i64] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs), 1:{ *:[i64] })
PATTERN: (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETNE:{ *:[Other] })
RESULT:  (SLTu64:{ *:[i32] } ZERO_64:{ *:[i64] }, (XOR64:{ *:[i64] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs))
PATTERN: (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETLE:{ *:[Other] })
RESULT:  (XORi:{ *:[i32] } (SLT64:{ *:[i32] } GPR64:{ *:[i64] }:$rhs, GPR64:{ *:[i64] }:$lhs), 1:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETULE:{ *:[Other] })
RESULT:  (XORi:{ *:[i32] } (SLTu64:{ *:[i32] } GPR64:{ *:[i64] }:$rhs, GPR64:{ *:[i64] }:$lhs), 1:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETGT:{ *:[Other] })
RESULT:  (SLT64:{ *:[i32] } GPR64:{ *:[i64] }:$rhs, GPR64:{ *:[i64] }:$lhs)
PATTERN: (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETUGT:{ *:[Other] })
RESULT:  (SLTu64:{ *:[i32] } GPR64:{ *:[i64] }:$rhs, GPR64:{ *:[i64] }:$lhs)
PATTERN: (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETGE:{ *:[Other] })
RESULT:  (XORi:{ *:[i32] } (SLT64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs), 1:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETUGE:{ *:[Other] })
RESULT:  (XORi:{ *:[i32] } (SLTu64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs), 1:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$rhs, SETGE:{ *:[Other] })
RESULT:  (XORi:{ *:[i32] } (SLTi64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$rhs), 1:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$rhs, SETUGE:{ *:[Other] })
RESULT:  (XORi:{ *:[i32] } (SLTiu64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$rhs), 1:{ *:[i32] })
PATTERN: (trunc:{ *:[i32] } (assertsext:{ *:[i64] } GPR64:{ *:[i64] }:$src))
RESULT:  (EXTRACT_SUBREG:{ *:[i32] } GPR64:{ *:[i64] }:$src, sub_32:{ *:[i32] })
PATTERN: (trunc:{ *:[i32] } (assertzext:{ *:[i64] } GPR64:{ *:[i64] }:$src)<<P:Predicate_assertzext_lt_i32>>)
RESULT:  (EXTRACT_SUBREG:{ *:[i32] } GPR64:{ *:[i64] }:$src, sub_32:{ *:[i32] })
PATTERN: (trunc:{ *:[i32] } GPR64:{ *:[i64] }:$src)
RESULT:  (SLL:{ *:[i32] } (EXTRACT_SUBREG:{ *:[i32] } GPR64:{ *:[i64] }:$src, sub_32:{ *:[i32] }), 0:{ *:[i32] })
PATTERN: (shl:{ *:[i64] } GPR64:{ *:[i64] }:$rt, (trunc:{ *:[i32] } GPR64:{ *:[i64] }:$rs))
RESULT:  (DSLLV:{ *:[i64] } GPR64:{ *:[i64] }:$rt, (EXTRACT_SUBREG:{ *:[i32] } GPR64:{ *:[i64] }:$rs, sub_32:{ *:[i32] }))
PATTERN: (srl:{ *:[i64] } GPR64:{ *:[i64] }:$rt, (trunc:{ *:[i32] } GPR64:{ *:[i64] }:$rs))
RESULT:  (DSRLV:{ *:[i64] } GPR64:{ *:[i64] }:$rt, (EXTRACT_SUBREG:{ *:[i32] } GPR64:{ *:[i64] }:$rs, sub_32:{ *:[i32] }))
PATTERN: (sra:{ *:[i64] } GPR64:{ *:[i64] }:$rt, (trunc:{ *:[i32] } GPR64:{ *:[i64] }:$rs))
RESULT:  (DSRAV:{ *:[i64] } GPR64:{ *:[i64] }:$rt, (EXTRACT_SUBREG:{ *:[i32] } GPR64:{ *:[i64] }:$rs, sub_32:{ *:[i32] }))
PATTERN: (rotr:{ *:[i64] } GPR64:{ *:[i64] }:$rt, (trunc:{ *:[i32] } GPR64:{ *:[i64] }:$rs))
RESULT:  (DROTRV:{ *:[i64] } GPR64:{ *:[i64] }:$rt, (EXTRACT_SUBREG:{ *:[i32] } GPR64:{ *:[i64] }:$rs, sub_32:{ *:[i32] }))
PATTERN: (anyext:{ *:[i64] } GPR32:{ *:[i32] }:$src)
RESULT:  (INSERT_SUBREG:{ *:[i64] } (IMPLICIT_DEF:{ *:[i64] }), GPR32:{ *:[i32] }:$src, sub_32:{ *:[i32] })
PATTERN: (zext:{ *:[i64] } GPR32:{ *:[i32] }:$src)
RESULT:  (DSRL:{ *:[i64] } (DSLL64_32:{ *:[i64] } GPR32:{ *:[i32] }:$src), 32:{ *:[i32] })
PATTERN: (sext:{ *:[i64] } GPR32:{ *:[i32] }:$src)
RESULT:  (SLL64_32:{ *:[i64] } GPR32:{ *:[i32] }:$src)
PATTERN: (zext:{ *:[i64] } GPR32:{ *:[i32] }:$src)
RESULT:  (DEXT64_32:{ *:[i64] } GPR32:{ *:[i32] }:$src, 0:{ *:[i32] }, 32:{ *:[i32] })
PATTERN: (zext:{ *:[i64] } (shl:{ *:[i32] } GPR32:{ *:[i32] }:$rt, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$imm))
RESULT:  (CINS64_32:{ *:[i64] } GPR32:{ *:[i32] }:$rt, (imm:{ *:[i32] }):$imm, (immZExt5To31:{ *:[i32] } (imm:{ *:[i32] }):$imm))
PATTERN: (sext_inreg:{ *:[i64] } GPR64:{ *:[i64] }:$src, i32:{ *:[Other] })
RESULT:  (SLL64_64:{ *:[i64] } GPR64:{ *:[i64] }:$src)
PATTERN: (bswap:{ *:[i64] } GPR64:{ *:[i64] }:$rt)
RESULT:  (DSHD:{ *:[i64] } (DSBH:{ *:[i64] } GPR64:{ *:[i64] }:$rt))
PATTERN: (subc:{ *:[i64] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs)
RESULT:  (DSUBu:{ *:[i64] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs)
PATTERN: (addc:{ *:[i64] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs)
RESULT:  (DADDu:{ *:[i64] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs)
PATTERN: (addc:{ *:[i64] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$imm)
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] }):$imm)
PATTERN: (brcond (setcc:{ *:[i32] } (and:{ *:[i64] } i64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_PowerOf2LO>>:$mask), 0:{ *:[i64] }, SETEQ:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BBIT0 i64:{ *:[i64] }:$lhs, (Log2LO:{ *:[i64] } (imm:{ *:[i64] })<<P:Predicate_PowerOf2LO>>:$mask), (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } (and:{ *:[i64] } i64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_PowerOf2HI>>:$mask), 0:{ *:[i64] }, SETEQ:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BBIT032 i64:{ *:[i64] }:$lhs, (Log2HI:{ *:[i64] } (imm:{ *:[i64] })<<P:Predicate_PowerOf2HI>>:$mask), (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } (and:{ *:[i64] } i64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_PowerOf2LO>>:$mask), 0:{ *:[i64] }, SETNE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BBIT1 i64:{ *:[i64] }:$lhs, (Log2LO:{ *:[i64] } (imm:{ *:[i64] })<<P:Predicate_PowerOf2LO>>:$mask), (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } (and:{ *:[i64] } i64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_PowerOf2HI>>:$mask), 0:{ *:[i64] }, SETNE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BBIT132 i64:{ *:[i64] }:$lhs, (Log2HI:{ *:[i64] } (imm:{ *:[i64] })<<P:Predicate_PowerOf2HI>>:$mask), (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } (and:{ *:[i32] } i32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_PowerOf2LO_i32>>:$mask), 0:{ *:[i32] }, SETEQ:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BBIT0 (INSERT_SUBREG:{ *:[i64] } (IMPLICIT_DEF:{ *:[i64] }), i32:{ *:[i32] }:$lhs, sub_32:{ *:[i32] }), (Log2LO:{ *:[i64] } (imm:{ *:[i32] })<<P:Predicate_PowerOf2LO_i32>>:$mask), (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } (and:{ *:[i32] } i32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_PowerOf2LO_i32>>:$mask), 0:{ *:[i32] }, SETNE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BBIT1 (INSERT_SUBREG:{ *:[i64] } (IMPLICIT_DEF:{ *:[i64] }), i32:{ *:[i32] }:$lhs, sub_32:{ *:[i32] }), (Log2LO:{ *:[i64] } (imm:{ *:[i32] })<<P:Predicate_PowerOf2LO_i32>>:$mask), (bb:{ *:[Other] }):$dst)
PATTERN: (atomic_load:{ *:[i64] } addr:{ *:[iPTR] }:$a)<<P:Predicate_atomic_load_8>>
RESULT:  (LB64:{ *:[i64] } addr:{ *:[iPTR] }:$a)
PATTERN: (atomic_load:{ *:[i64] } addr:{ *:[iPTR] }:$a)<<P:Predicate_atomic_load_16>>
RESULT:  (LH64:{ *:[i64] } addr:{ *:[iPTR] }:$a)
PATTERN: (atomic_load:{ *:[i64] } addr:{ *:[iPTR] }:$a)<<P:Predicate_atomic_load_32>>
RESULT:  (LW64:{ *:[i64] } addr:{ *:[iPTR] }:$a)
PATTERN: (atomic_load:{ *:[i64] } addr:{ *:[iPTR] }:$a)<<P:Predicate_atomic_load_64>>
RESULT:  (LD:{ *:[i64] } addr:{ *:[iPTR] }:$a)
PATTERN: (atomic_store addr:{ *:[iPTR] }:$a, GPR64:{ *:[i64] }:$v)<<P:Predicate_atomic_store_8>>
RESULT:  (SB64 GPR64:{ *:[i64] }:$v, addr:{ *:[iPTR] }:$a)
PATTERN: (atomic_store addr:{ *:[iPTR] }:$a, GPR64:{ *:[i64] }:$v)<<P:Predicate_atomic_store_16>>
RESULT:  (SH64 GPR64:{ *:[i64] }:$v, addr:{ *:[iPTR] }:$a)
PATTERN: (atomic_store addr:{ *:[iPTR] }:$a, GPR64:{ *:[i64] }:$v)<<P:Predicate_atomic_store_32>>
RESULT:  (SW64 GPR64:{ *:[i64] }:$v, addr:{ *:[iPTR] }:$a)
PATTERN: (atomic_store addr:{ *:[iPTR] }:$a, GPR64:{ *:[i64] }:$v)<<P:Predicate_atomic_store_64>>
RESULT:  (SD GPR64:{ *:[i64] }:$v, addr:{ *:[iPTR] }:$a)
PATTERN: (sext:{ *:[i64] } (add:{ *:[i32] } GPR32:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$imm16))
RESULT:  (INSERT_SUBREG:{ *:[i64] } (IMPLICIT_DEF:{ *:[i64] }), (ADDiu:{ *:[i32] } GPR32:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$imm16), sub_32:{ *:[i32] })
PATTERN: (sext:{ *:[i64] } (add:{ *:[i32] } GPR32:{ *:[i32] }:$src, GPR32:{ *:[i32] }:$src2))
RESULT:  (INSERT_SUBREG:{ *:[i64] } (IMPLICIT_DEF:{ *:[i64] }), (ADDu:{ *:[i32] } GPR32:{ *:[i32] }:$src, GPR32:{ *:[i32] }:$src2), sub_32:{ *:[i32] })
PATTERN: (sext:{ *:[i64] } (sub:{ *:[i32] } GPR32:{ *:[i32] }:$src, GPR32:{ *:[i32] }:$src2))
RESULT:  (INSERT_SUBREG:{ *:[i64] } (IMPLICIT_DEF:{ *:[i64] }), (SUBu:{ *:[i32] } GPR32:{ *:[i32] }:$src, GPR32:{ *:[i32] }:$src2), sub_32:{ *:[i32] })
PATTERN: (sext:{ *:[i64] } (mul:{ *:[i32] } GPR32:{ *:[i32] }:$src, GPR32:{ *:[i32] }:$src2))
RESULT:  (INSERT_SUBREG:{ *:[i64] } (IMPLICIT_DEF:{ *:[i64] }), (MUL:{ *:[i32] }:{ *:[i32] } GPR32:{ *:[i32] }:$src, GPR32:{ *:[i32] }:$src2), sub_32:{ *:[i32] })
PATTERN: (sext:{ *:[i64] } (MipsMFHI:{ *:[i32] } ACC64:{ *:[Untyped] }:$src))
RESULT:  (INSERT_SUBREG:{ *:[i64] } (IMPLICIT_DEF:{ *:[i64] }), (PseudoMFHI:{ *:[i32] } ACC64:{ *:[Untyped] }:$src), sub_32:{ *:[i32] })
PATTERN: (sext:{ *:[i64] } (MipsMFLO:{ *:[i32] } ACC64:{ *:[Untyped] }:$src))
RESULT:  (INSERT_SUBREG:{ *:[i64] } (IMPLICIT_DEF:{ *:[i64] }), (PseudoMFLO:{ *:[i32] } ACC64:{ *:[Untyped] }:$src), sub_32:{ *:[i32] })
PATTERN: (sext:{ *:[i64] } (shl:{ *:[i32] } GPR32:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$imm5))
RESULT:  (INSERT_SUBREG:{ *:[i64] } (IMPLICIT_DEF:{ *:[i64] }), (SLL:{ *:[i32] } GPR32:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$imm5), sub_32:{ *:[i32] })
PATTERN: (sext:{ *:[i64] } (shl:{ *:[i32] } GPR32:{ *:[i32] }:$src, GPR32:{ *:[i32] }:$src2))
RESULT:  (INSERT_SUBREG:{ *:[i64] } (IMPLICIT_DEF:{ *:[i64] }), (SLLV:{ *:[i32] } GPR32:{ *:[i32] }:$src, GPR32:{ *:[i32] }:$src2), sub_32:{ *:[i32] })
PATTERN: (sext:{ *:[i64] } (srl:{ *:[i32] } GPR32:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$imm5))
RESULT:  (INSERT_SUBREG:{ *:[i64] } (IMPLICIT_DEF:{ *:[i64] }), (SRL:{ *:[i32] } GPR32:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$imm5), sub_32:{ *:[i32] })
PATTERN: (sext:{ *:[i64] } (srl:{ *:[i32] } GPR32:{ *:[i32] }:$src, GPR32:{ *:[i32] }:$src2))
RESULT:  (INSERT_SUBREG:{ *:[i64] } (IMPLICIT_DEF:{ *:[i64] }), (SRLV:{ *:[i32] } GPR32:{ *:[i32] }:$src, GPR32:{ *:[i32] }:$src2), sub_32:{ *:[i32] })
PATTERN: (sext:{ *:[i64] } (sra:{ *:[i32] } GPR32:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$imm5))
RESULT:  (INSERT_SUBREG:{ *:[i64] } (IMPLICIT_DEF:{ *:[i64] }), (SRA:{ *:[i32] } GPR32:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$imm5), sub_32:{ *:[i32] })
PATTERN: (sext:{ *:[i64] } (sra:{ *:[i32] } GPR32:{ *:[i32] }:$src, GPR32:{ *:[i32] }:$src2))
RESULT:  (INSERT_SUBREG:{ *:[i64] } (IMPLICIT_DEF:{ *:[i64] }), (SRAV:{ *:[i32] } GPR32:{ *:[i32] }:$src, GPR32:{ *:[i32] }:$src2), sub_32:{ *:[i32] })
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETGE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_I:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLT:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETUGE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_I:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLTu:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs, SETGE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_I:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLTi:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lh, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rh, SETUGE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_I:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLTiu:{ *:[i32] } GPR32:{ *:[i32] }:$lh, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rh), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETLE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_I:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLT:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETULE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_I:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLTu:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETGT:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_I:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLTi:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$rhs)), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETUGT:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_I:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLTiu:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$rhs)), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETEQ:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_I:{ *:[i32] } GPR32:{ *:[i32] }:$T, (XOR:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETEQ:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_I:{ *:[i32] } GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immZExt16>><<X:LO16>>:$uimm16, SETEQ:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_I:{ *:[i32] } GPR32:{ *:[i32] }:$T, (XORi:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (LO16:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immZExt16>>:$uimm16)), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETNE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVN_I_I:{ *:[i32] } GPR32:{ *:[i32] }:$T, (XOR:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } GPR32:{ *:[i32] }:$cond, GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVN_I_I:{ *:[i32] } GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$cond, GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETNE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVN_I_I:{ *:[i32] } GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETGE:{ *:[Other] }), GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$F)
RESULT:  (MOVZ_I_I64:{ *:[i64] } GPR64:{ *:[i64] }:$T, (SLT:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), GPR64:{ *:[i64] }:$F)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETUGE:{ *:[Other] }), GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$F)
RESULT:  (MOVZ_I_I64:{ *:[i64] } GPR64:{ *:[i64] }:$T, (SLTu:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), GPR64:{ *:[i64] }:$F)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs, SETGE:{ *:[Other] }), GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$F)
RESULT:  (MOVZ_I_I64:{ *:[i64] } GPR64:{ *:[i64] }:$T, (SLTi:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs), GPR64:{ *:[i64] }:$F)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lh, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rh, SETUGE:{ *:[Other] }), GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$F)
RESULT:  (MOVZ_I_I64:{ *:[i64] } GPR64:{ *:[i64] }:$T, (SLTiu:{ *:[i32] } GPR32:{ *:[i32] }:$lh, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rh), GPR64:{ *:[i64] }:$F)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETLE:{ *:[Other] }), GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$F)
RESULT:  (MOVZ_I_I64:{ *:[i64] } GPR64:{ *:[i64] }:$T, (SLT:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs), GPR64:{ *:[i64] }:$F)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETULE:{ *:[Other] }), GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$F)
RESULT:  (MOVZ_I_I64:{ *:[i64] } GPR64:{ *:[i64] }:$T, (SLTu:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs), GPR64:{ *:[i64] }:$F)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETGT:{ *:[Other] }), GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$F)
RESULT:  (MOVZ_I_I64:{ *:[i64] } GPR64:{ *:[i64] }:$T, (SLTi:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$rhs)), GPR64:{ *:[i64] }:$F)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETUGT:{ *:[Other] }), GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$F)
RESULT:  (MOVZ_I_I64:{ *:[i64] } GPR64:{ *:[i64] }:$T, (SLTiu:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$rhs)), GPR64:{ *:[i64] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETGE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_I:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLT64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETUGE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_I:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLTu64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$rhs, SETGE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_I:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLTi64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$rhs), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lh, (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$rh, SETUGE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_I:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLTiu64:{ *:[i32] } GPR64:{ *:[i64] }:$lh, (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$rh), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETLE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_I:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLT64:{ *:[i32] } GPR64:{ *:[i64] }:$rhs, GPR64:{ *:[i64] }:$lhs), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETULE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_I:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLTu64:{ *:[i32] } GPR64:{ *:[i64] }:$rhs, GPR64:{ *:[i64] }:$lhs), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETGT:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_I:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLTi64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (Plus1:{ *:[i64] } (imm:{ *:[i64] }):$rhs)), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETUGT:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_I:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLTiu64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (Plus1:{ *:[i64] } (imm:{ *:[i64] }):$rhs)), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETGE:{ *:[Other] }), GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$F)
RESULT:  (MOVZ_I_I64:{ *:[i64] } GPR64:{ *:[i64] }:$T, (SLT64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs), GPR64:{ *:[i64] }:$F)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETUGE:{ *:[Other] }), GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$F)
RESULT:  (MOVZ_I_I64:{ *:[i64] } GPR64:{ *:[i64] }:$T, (SLTu64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs), GPR64:{ *:[i64] }:$F)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$rhs, SETGE:{ *:[Other] }), GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$F)
RESULT:  (MOVZ_I_I64:{ *:[i64] } GPR64:{ *:[i64] }:$T, (SLTi64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$rhs), GPR64:{ *:[i64] }:$F)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lh, (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$rh, SETUGE:{ *:[Other] }), GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$F)
RESULT:  (MOVZ_I_I64:{ *:[i64] } GPR64:{ *:[i64] }:$T, (SLTiu64:{ *:[i32] } GPR64:{ *:[i64] }:$lh, (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$rh), GPR64:{ *:[i64] }:$F)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETLE:{ *:[Other] }), GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$F)
RESULT:  (MOVZ_I_I64:{ *:[i64] } GPR64:{ *:[i64] }:$T, (SLT64:{ *:[i32] } GPR64:{ *:[i64] }:$rhs, GPR64:{ *:[i64] }:$lhs), GPR64:{ *:[i64] }:$F)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETULE:{ *:[Other] }), GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$F)
RESULT:  (MOVZ_I_I64:{ *:[i64] } GPR64:{ *:[i64] }:$T, (SLTu64:{ *:[i32] } GPR64:{ *:[i64] }:$rhs, GPR64:{ *:[i64] }:$lhs), GPR64:{ *:[i64] }:$F)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETGT:{ *:[Other] }), GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$F)
RESULT:  (MOVZ_I_I64:{ *:[i64] } GPR64:{ *:[i64] }:$T, (SLTi64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (Plus1:{ *:[i64] } (imm:{ *:[i64] }):$rhs)), GPR64:{ *:[i64] }:$F)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETUGT:{ *:[Other] }), GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$F)
RESULT:  (MOVZ_I_I64:{ *:[i64] } GPR64:{ *:[i64] }:$T, (SLTiu64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (Plus1:{ *:[i64] } (imm:{ *:[i64] }):$rhs)), GPR64:{ *:[i64] }:$F)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETEQ:{ *:[Other] }), GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$F)
RESULT:  (MOVZ_I_I64:{ *:[i64] } GPR64:{ *:[i64] }:$T, (XOR:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), GPR64:{ *:[i64] }:$F)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETEQ:{ *:[Other] }), GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$F)
RESULT:  (MOVZ_I_I64:{ *:[i64] } GPR64:{ *:[i64] }:$T, GPR32:{ *:[i32] }:$lhs, GPR64:{ *:[i64] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETEQ:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I64_I:{ *:[i32] } GPR32:{ *:[i32] }:$T, (XOR64:{ *:[i64] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, 0:{ *:[i64] }, SETEQ:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I64_I:{ *:[i32] } GPR32:{ *:[i32] }:$T, GPR64:{ *:[i64] }:$lhs, GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETEQ:{ *:[Other] }), GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$F)
RESULT:  (MOVZ_I64_I64:{ *:[i64] } GPR64:{ *:[i64] }:$T, (XOR64:{ *:[i64] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs), GPR64:{ *:[i64] }:$F)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, 0:{ *:[i64] }, SETEQ:{ *:[Other] }), GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$F)
RESULT:  (MOVZ_I64_I64:{ *:[i64] } GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$F)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immZExt16>><<X:LO16>>:$uimm16, SETEQ:{ *:[Other] }), GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$F)
RESULT:  (MOVZ_I_I64:{ *:[i64] } GPR64:{ *:[i64] }:$T, (XORi:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (LO16:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immZExt16>>:$uimm16)), GPR64:{ *:[i64] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immZExt16>><<X:LO16>>:$uimm16, SETEQ:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I64_I:{ *:[i32] } GPR32:{ *:[i32] }:$T, (XORi64:{ *:[i64] } GPR64:{ *:[i64] }:$lhs, (LO16:{ *:[i64] } (imm:{ *:[i64] })<<P:Predicate_immZExt16>>:$uimm16)), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immZExt16>><<X:LO16>>:$uimm16, SETEQ:{ *:[Other] }), GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$F)
RESULT:  (MOVZ_I64_I64:{ *:[i64] } GPR64:{ *:[i64] }:$T, (XORi64:{ *:[i64] } GPR64:{ *:[i64] }:$lhs, (LO16:{ *:[i64] } (imm:{ *:[i64] })<<P:Predicate_immZExt16>>:$uimm16)), GPR64:{ *:[i64] }:$F)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETNE:{ *:[Other] }), GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$F)
RESULT:  (MOVN_I_I64:{ *:[i64] } GPR64:{ *:[i64] }:$T, (XOR:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), GPR64:{ *:[i64] }:$F)
PATTERN: (select:{ *:[i64] } GPR32:{ *:[i32] }:$cond, GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$F)
RESULT:  (MOVN_I_I64:{ *:[i64] } GPR64:{ *:[i64] }:$T, GPR32:{ *:[i32] }:$cond, GPR64:{ *:[i64] }:$F)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETNE:{ *:[Other] }), GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$F)
RESULT:  (MOVN_I_I64:{ *:[i64] } GPR64:{ *:[i64] }:$T, GPR32:{ *:[i32] }:$lhs, GPR64:{ *:[i64] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETNE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVN_I64_I:{ *:[i32] } GPR32:{ *:[i32] }:$T, (XOR64:{ *:[i64] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } GPR64:{ *:[i64] }:$cond, GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVN_I64_I:{ *:[i32] } GPR32:{ *:[i32] }:$T, GPR64:{ *:[i64] }:$cond, GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, 0:{ *:[i64] }, SETNE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVN_I64_I:{ *:[i32] } GPR32:{ *:[i32] }:$T, GPR64:{ *:[i64] }:$lhs, GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETNE:{ *:[Other] }), GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$F)
RESULT:  (MOVN_I64_I64:{ *:[i64] } GPR64:{ *:[i64] }:$T, (XOR64:{ *:[i64] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs), GPR64:{ *:[i64] }:$F)
PATTERN: (select:{ *:[i64] } GPR64:{ *:[i64] }:$cond, GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$F)
RESULT:  (MOVN_I64_I64:{ *:[i64] } GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$cond, GPR64:{ *:[i64] }:$F)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, 0:{ *:[i64] }, SETNE:{ *:[Other] }), GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$F)
RESULT:  (MOVN_I64_I64:{ *:[i64] } GPR64:{ *:[i64] }:$T, GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETGE:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I_S:{ *:[f32] } FGR32:{ *:[f32] }:$T, (SLT:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETUGE:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I_S:{ *:[f32] } FGR32:{ *:[f32] }:$T, (SLTu:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs, SETGE:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I_S:{ *:[f32] } FGR32:{ *:[f32] }:$T, (SLTi:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lh, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rh, SETUGE:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I_S:{ *:[f32] } FGR32:{ *:[f32] }:$T, (SLTiu:{ *:[i32] } GPR32:{ *:[i32] }:$lh, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rh), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETLE:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I_S:{ *:[f32] } FGR32:{ *:[f32] }:$T, (SLT:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETULE:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I_S:{ *:[f32] } FGR32:{ *:[f32] }:$T, (SLTu:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETGT:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I_S:{ *:[f32] } FGR32:{ *:[f32] }:$T, (SLTi:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$rhs)), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETUGT:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I_S:{ *:[f32] } FGR32:{ *:[f32] }:$T, (SLTiu:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$rhs)), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETEQ:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I_S:{ *:[f32] } FGR32:{ *:[f32] }:$T, (XOR:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETEQ:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I_S:{ *:[f32] } FGR32:{ *:[f32] }:$T, GPR32:{ *:[i32] }:$lhs, FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETNE:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVN_I_S:{ *:[f32] } FGR32:{ *:[f32] }:$T, (XOR:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } GPR32:{ *:[i32] }:$cond, FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVN_I_S:{ *:[f32] } FGR32:{ *:[f32] }:$T, GPR32:{ *:[i32] }:$cond, FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETNE:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVN_I_S:{ *:[f32] } FGR32:{ *:[f32] }:$T, GPR32:{ *:[i32] }:$lhs, FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETGE:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I_S:{ *:[f32] } FGR32:{ *:[f32] }:$T, (SLT64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETUGE:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I_S:{ *:[f32] } FGR32:{ *:[f32] }:$T, (SLTu64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$rhs, SETGE:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I_S:{ *:[f32] } FGR32:{ *:[f32] }:$T, (SLTi64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$rhs), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lh, (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$rh, SETUGE:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I_S:{ *:[f32] } FGR32:{ *:[f32] }:$T, (SLTiu64:{ *:[i32] } GPR64:{ *:[i64] }:$lh, (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$rh), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETLE:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I_S:{ *:[f32] } FGR32:{ *:[f32] }:$T, (SLT64:{ *:[i32] } GPR64:{ *:[i64] }:$rhs, GPR64:{ *:[i64] }:$lhs), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETULE:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I_S:{ *:[f32] } FGR32:{ *:[f32] }:$T, (SLTu64:{ *:[i32] } GPR64:{ *:[i64] }:$rhs, GPR64:{ *:[i64] }:$lhs), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETGT:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I_S:{ *:[f32] } FGR32:{ *:[f32] }:$T, (SLTi64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (Plus1:{ *:[i64] } (imm:{ *:[i64] }):$rhs)), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETUGT:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I_S:{ *:[f32] } FGR32:{ *:[f32] }:$T, (SLTiu64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (Plus1:{ *:[i64] } (imm:{ *:[i64] }):$rhs)), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETEQ:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I64_S:{ *:[f32] } FGR32:{ *:[f32] }:$T, (XOR64:{ *:[i64] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, 0:{ *:[i64] }, SETEQ:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I64_S:{ *:[f32] } FGR32:{ *:[f32] }:$T, GPR64:{ *:[i64] }:$lhs, FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETNE:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVN_I64_S:{ *:[f32] } FGR32:{ *:[f32] }:$T, (XOR64:{ *:[i64] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } GPR64:{ *:[i64] }:$cond, FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVN_I64_S:{ *:[f32] } FGR32:{ *:[f32] }:$T, GPR64:{ *:[i64] }:$cond, FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, 0:{ *:[i64] }, SETNE:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVN_I64_S:{ *:[f32] } FGR32:{ *:[f32] }:$T, GPR64:{ *:[i64] }:$lhs, FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETGE:{ *:[Other] }), AFGR64:{ *:[f64] }:$T, AFGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D32:{ *:[f64] } AFGR64:{ *:[f64] }:$T, (SLT:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), AFGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETUGE:{ *:[Other] }), AFGR64:{ *:[f64] }:$T, AFGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D32:{ *:[f64] } AFGR64:{ *:[f64] }:$T, (SLTu:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), AFGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs, SETGE:{ *:[Other] }), AFGR64:{ *:[f64] }:$T, AFGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D32:{ *:[f64] } AFGR64:{ *:[f64] }:$T, (SLTi:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs), AFGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lh, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rh, SETUGE:{ *:[Other] }), AFGR64:{ *:[f64] }:$T, AFGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D32:{ *:[f64] } AFGR64:{ *:[f64] }:$T, (SLTiu:{ *:[i32] } GPR32:{ *:[i32] }:$lh, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rh), AFGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETLE:{ *:[Other] }), AFGR64:{ *:[f64] }:$T, AFGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D32:{ *:[f64] } AFGR64:{ *:[f64] }:$T, (SLT:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs), AFGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETULE:{ *:[Other] }), AFGR64:{ *:[f64] }:$T, AFGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D32:{ *:[f64] } AFGR64:{ *:[f64] }:$T, (SLTu:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs), AFGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETGT:{ *:[Other] }), AFGR64:{ *:[f64] }:$T, AFGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D32:{ *:[f64] } AFGR64:{ *:[f64] }:$T, (SLTi:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$rhs)), AFGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETUGT:{ *:[Other] }), AFGR64:{ *:[f64] }:$T, AFGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D32:{ *:[f64] } AFGR64:{ *:[f64] }:$T, (SLTiu:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$rhs)), AFGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETEQ:{ *:[Other] }), AFGR64:{ *:[f64] }:$T, AFGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D32:{ *:[f64] } AFGR64:{ *:[f64] }:$T, (XOR:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), AFGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETEQ:{ *:[Other] }), AFGR64:{ *:[f64] }:$T, AFGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D32:{ *:[f64] } AFGR64:{ *:[f64] }:$T, GPR32:{ *:[i32] }:$lhs, AFGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETNE:{ *:[Other] }), AFGR64:{ *:[f64] }:$T, AFGR64:{ *:[f64] }:$F)
RESULT:  (MOVN_I_D32:{ *:[f64] } AFGR64:{ *:[f64] }:$T, (XOR:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), AFGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } GPR32:{ *:[i32] }:$cond, AFGR64:{ *:[f64] }:$T, AFGR64:{ *:[f64] }:$F)
RESULT:  (MOVN_I_D32:{ *:[f64] } AFGR64:{ *:[f64] }:$T, GPR32:{ *:[i32] }:$cond, AFGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETNE:{ *:[Other] }), AFGR64:{ *:[f64] }:$T, AFGR64:{ *:[f64] }:$F)
RESULT:  (MOVN_I_D32:{ *:[f64] } AFGR64:{ *:[f64] }:$T, GPR32:{ *:[i32] }:$lhs, AFGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETGE:{ *:[Other] }), FGR64:{ *:[f64] }:$T, FGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D64:{ *:[f64] } FGR64:{ *:[f64] }:$T, (SLT:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), FGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETUGE:{ *:[Other] }), FGR64:{ *:[f64] }:$T, FGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D64:{ *:[f64] } FGR64:{ *:[f64] }:$T, (SLTu:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), FGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs, SETGE:{ *:[Other] }), FGR64:{ *:[f64] }:$T, FGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D64:{ *:[f64] } FGR64:{ *:[f64] }:$T, (SLTi:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs), FGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lh, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rh, SETUGE:{ *:[Other] }), FGR64:{ *:[f64] }:$T, FGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D64:{ *:[f64] } FGR64:{ *:[f64] }:$T, (SLTiu:{ *:[i32] } GPR32:{ *:[i32] }:$lh, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rh), FGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETLE:{ *:[Other] }), FGR64:{ *:[f64] }:$T, FGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D64:{ *:[f64] } FGR64:{ *:[f64] }:$T, (SLT:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs), FGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETULE:{ *:[Other] }), FGR64:{ *:[f64] }:$T, FGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D64:{ *:[f64] } FGR64:{ *:[f64] }:$T, (SLTu:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs), FGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETGT:{ *:[Other] }), FGR64:{ *:[f64] }:$T, FGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D64:{ *:[f64] } FGR64:{ *:[f64] }:$T, (SLTi:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$rhs)), FGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETUGT:{ *:[Other] }), FGR64:{ *:[f64] }:$T, FGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D64:{ *:[f64] } FGR64:{ *:[f64] }:$T, (SLTiu:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$rhs)), FGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETGE:{ *:[Other] }), FGR64:{ *:[f64] }:$T, FGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D64:{ *:[f64] } FGR64:{ *:[f64] }:$T, (SLT64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs), FGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETUGE:{ *:[Other] }), FGR64:{ *:[f64] }:$T, FGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D64:{ *:[f64] } FGR64:{ *:[f64] }:$T, (SLTu64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs), FGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$rhs, SETGE:{ *:[Other] }), FGR64:{ *:[f64] }:$T, FGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D64:{ *:[f64] } FGR64:{ *:[f64] }:$T, (SLTi64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$rhs), FGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lh, (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$rh, SETUGE:{ *:[Other] }), FGR64:{ *:[f64] }:$T, FGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D64:{ *:[f64] } FGR64:{ *:[f64] }:$T, (SLTiu64:{ *:[i32] } GPR64:{ *:[i64] }:$lh, (imm:{ *:[i64] })<<P:Predicate_immSExt16>>:$rh), FGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETLE:{ *:[Other] }), FGR64:{ *:[f64] }:$T, FGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D64:{ *:[f64] } FGR64:{ *:[f64] }:$T, (SLT64:{ *:[i32] } GPR64:{ *:[i64] }:$rhs, GPR64:{ *:[i64] }:$lhs), FGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETULE:{ *:[Other] }), FGR64:{ *:[f64] }:$T, FGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D64:{ *:[f64] } FGR64:{ *:[f64] }:$T, (SLTu64:{ *:[i32] } GPR64:{ *:[i64] }:$rhs, GPR64:{ *:[i64] }:$lhs), FGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETGT:{ *:[Other] }), FGR64:{ *:[f64] }:$T, FGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D64:{ *:[f64] } FGR64:{ *:[f64] }:$T, (SLTi64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (Plus1:{ *:[i64] } (imm:{ *:[i64] }):$rhs)), FGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (imm:{ *:[i64] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETUGT:{ *:[Other] }), FGR64:{ *:[f64] }:$T, FGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D64:{ *:[f64] } FGR64:{ *:[f64] }:$T, (SLTiu64:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, (Plus1:{ *:[i64] } (imm:{ *:[i64] }):$rhs)), FGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETEQ:{ *:[Other] }), FGR64:{ *:[f64] }:$T, FGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D64:{ *:[f64] } FGR64:{ *:[f64] }:$T, (XOR:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), FGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETEQ:{ *:[Other] }), FGR64:{ *:[f64] }:$T, FGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D64:{ *:[f64] } FGR64:{ *:[f64] }:$T, GPR32:{ *:[i32] }:$lhs, FGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETEQ:{ *:[Other] }), FGR64:{ *:[f64] }:$T, FGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I64_D64:{ *:[f64] } FGR64:{ *:[f64] }:$T, (XOR64:{ *:[i64] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs), FGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, 0:{ *:[i64] }, SETEQ:{ *:[Other] }), FGR64:{ *:[f64] }:$T, FGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I64_D64:{ *:[f64] } FGR64:{ *:[f64] }:$T, GPR64:{ *:[i64] }:$lhs, FGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETNE:{ *:[Other] }), FGR64:{ *:[f64] }:$T, FGR64:{ *:[f64] }:$F)
RESULT:  (MOVN_I_D64:{ *:[f64] } FGR64:{ *:[f64] }:$T, (XOR:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), FGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } GPR32:{ *:[i32] }:$cond, FGR64:{ *:[f64] }:$T, FGR64:{ *:[f64] }:$F)
RESULT:  (MOVN_I_D64:{ *:[f64] } FGR64:{ *:[f64] }:$T, GPR32:{ *:[i32] }:$cond, FGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETNE:{ *:[Other] }), FGR64:{ *:[f64] }:$T, FGR64:{ *:[f64] }:$F)
RESULT:  (MOVN_I_D64:{ *:[f64] } FGR64:{ *:[f64] }:$T, GPR32:{ *:[i32] }:$lhs, FGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs, SETNE:{ *:[Other] }), FGR64:{ *:[f64] }:$T, FGR64:{ *:[f64] }:$F)
RESULT:  (MOVN_I64_D64:{ *:[f64] } FGR64:{ *:[f64] }:$T, (XOR64:{ *:[i64] } GPR64:{ *:[i64] }:$lhs, GPR64:{ *:[i64] }:$rhs), FGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } GPR64:{ *:[i64] }:$cond, FGR64:{ *:[f64] }:$T, FGR64:{ *:[f64] }:$F)
RESULT:  (MOVN_I64_D64:{ *:[f64] } FGR64:{ *:[f64] }:$T, GPR64:{ *:[i64] }:$cond, FGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR64:{ *:[i64] }:$lhs, 0:{ *:[i64] }, SETNE:{ *:[Other] }), FGR64:{ *:[f64] }:$T, FGR64:{ *:[f64] }:$F)
RESULT:  (MOVN_I64_D64:{ *:[f64] } FGR64:{ *:[f64] }:$T, GPR64:{ *:[i64] }:$lhs, FGR64:{ *:[f64] }:$F)
PATTERN: (setcc:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs, SETONE:{ *:[Other] })
RESULT:  (NOR:{ *:[i32] } (CMP_UEQ_S:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs), ZERO:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs, SETO:{ *:[Other] })
RESULT:  (NOR:{ *:[i32] } (CMP_UN_S:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs), ZERO:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs, SETUNE:{ *:[Other] })
RESULT:  (NOR:{ *:[i32] } (CMP_EQ_S:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs), ZERO:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs, SETEQ:{ *:[Other] })
RESULT:  (CMP_EQ_S:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs)
PATTERN: (setcc:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs, SETGT:{ *:[Other] })
RESULT:  (CMP_LE_S:{ *:[i32] } f32:{ *:[f32] }:$rhs, f32:{ *:[f32] }:$lhs)
PATTERN: (setcc:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs, SETGE:{ *:[Other] })
RESULT:  (CMP_LT_S:{ *:[i32] } f32:{ *:[f32] }:$rhs, f32:{ *:[f32] }:$lhs)
PATTERN: (setcc:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs, SETLT:{ *:[Other] })
RESULT:  (CMP_LT_S:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs)
PATTERN: (setcc:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs, SETLE:{ *:[Other] })
RESULT:  (CMP_LE_S:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs)
PATTERN: (setcc:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs, SETNE:{ *:[Other] })
RESULT:  (NOR:{ *:[i32] } (CMP_EQ_S:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs), ZERO:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs, SETONE:{ *:[Other] })
RESULT:  (NOR:{ *:[i32] } (CMP_UEQ_D:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs), ZERO:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs, SETO:{ *:[Other] })
RESULT:  (NOR:{ *:[i32] } (CMP_UN_D:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs), ZERO:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs, SETUNE:{ *:[Other] })
RESULT:  (NOR:{ *:[i32] } (CMP_EQ_D:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs), ZERO:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs, SETEQ:{ *:[Other] })
RESULT:  (CMP_EQ_D:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs)
PATTERN: (setcc:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs, SETGT:{ *:[Other] })
RESULT:  (CMP_LE_D:{ *:[i32] } f64:{ *:[f64] }:$rhs, f64:{ *:[f64] }:$lhs)
PATTERN: (setcc:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs, SETGE:{ *:[Other] })
RESULT:  (CMP_LT_D:{ *:[i32] } f64:{ *:[f64] }:$rhs, f64:{ *:[f64] }:$lhs)
PATTERN: (setcc:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs, SETLT:{ *:[Other] })
RESULT:  (CMP_LT_D:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs)
PATTERN: (setcc:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs, SETLE:{ *:[Other] })
RESULT:  (CMP_LE_D:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs)
PATTERN: (setcc:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs, SETNE:{ *:[Other] })
RESULT:  (NOR:{ *:[i32] } (CMP_EQ_D:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs), ZERO:{ *:[i32] })
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immz>>, SETEQ:{ *:[Other] }), i32:{ *:[i32] }:$t, i32:{ *:[i32] }:$f)
RESULT:  (OR:{ *:[i32] } (SELEQZ:{ *:[i32] } i32:{ *:[i32] }:$t, i32:{ *:[i32] }:$cond), (SELNEZ:{ *:[i32] } i32:{ *:[i32] }:$f, i32:{ *:[i32] }:$cond))
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immz>>, SETNE:{ *:[Other] }), i32:{ *:[i32] }:$t, i32:{ *:[i32] }:$f)
RESULT:  (OR:{ *:[i32] } (SELNEZ:{ *:[i32] } i32:{ *:[i32] }:$t, i32:{ *:[i32] }:$cond), (SELEQZ:{ *:[i32] } i32:{ *:[i32] }:$f, i32:{ *:[i32] }:$cond))
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immZExt16>><<X:LO16>>:$imm, SETEQ:{ *:[Other] }), i32:{ *:[i32] }:$t, i32:{ *:[i32] }:$f)
RESULT:  (OR:{ *:[i32] } (SELEQZ:{ *:[i32] } i32:{ *:[i32] }:$t, (XORi:{ *:[i32] } i32:{ *:[i32] }:$cond, (LO16:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immZExt16>>:$imm))), (SELNEZ:{ *:[i32] } i32:{ *:[i32] }:$f, (XORi:{ *:[i32] } i32:{ *:[i32] }:$cond, (LO16:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immZExt16>>:$imm))))
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immZExt16>><<X:LO16>>:$imm, SETNE:{ *:[Other] }), i32:{ *:[i32] }:$t, i32:{ *:[i32] }:$f)
RESULT:  (OR:{ *:[i32] } (SELNEZ:{ *:[i32] } i32:{ *:[i32] }:$t, (XORi:{ *:[i32] } i32:{ *:[i32] }:$cond, (LO16:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immZExt16>>:$imm))), (SELEQZ:{ *:[i32] } i32:{ *:[i32] }:$f, (XORi:{ *:[i32] } i32:{ *:[i32] }:$cond, (LO16:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immZExt16>>:$imm))))
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immSExt16Plus1>>:$imm, SETGT:{ *:[Other] }), i32:{ *:[i32] }:$t, i32:{ *:[i32] }:$f)
RESULT:  (OR:{ *:[i32] } (SELEQZ:{ *:[i32] } i32:{ *:[i32] }:$t, (SLTi:{ *:[i32] } i32:{ *:[i32] }:$cond, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$imm))), (SELNEZ:{ *:[i32] } i32:{ *:[i32] }:$f, (SLTi:{ *:[i32] } i32:{ *:[i32] }:$cond, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$imm))))
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immSExt16Plus1>>:$imm, SETUGT:{ *:[Other] }), i32:{ *:[i32] }:$t, i32:{ *:[i32] }:$f)
RESULT:  (OR:{ *:[i32] } (SELEQZ:{ *:[i32] } i32:{ *:[i32] }:$t, (SLTiu:{ *:[i32] } i32:{ *:[i32] }:$cond, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$imm))), (SELNEZ:{ *:[i32] } i32:{ *:[i32] }:$f, (SLTiu:{ *:[i32] } i32:{ *:[i32] }:$cond, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$imm))))
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immz>>, SETEQ:{ *:[Other] }), i32:{ *:[i32] }:$t, (imm:{ *:[i32] })<<P:Predicate_immz>>)
RESULT:  (SELEQZ:{ *:[i32] } i32:{ *:[i32] }:$t, i32:{ *:[i32] }:$cond)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immz>>, SETNE:{ *:[Other] }), i32:{ *:[i32] }:$t, (imm:{ *:[i32] })<<P:Predicate_immz>>)
RESULT:  (SELNEZ:{ *:[i32] } i32:{ *:[i32] }:$t, i32:{ *:[i32] }:$cond)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immz>>, SETEQ:{ *:[Other] }), (imm:{ *:[i32] })<<P:Predicate_immz>>, i32:{ *:[i32] }:$f)
RESULT:  (SELNEZ:{ *:[i32] } i32:{ *:[i32] }:$f, i32:{ *:[i32] }:$cond)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immz>>, SETNE:{ *:[Other] }), (imm:{ *:[i32] })<<P:Predicate_immz>>, i32:{ *:[i32] }:$f)
RESULT:  (SELEQZ:{ *:[i32] } i32:{ *:[i32] }:$f, i32:{ *:[i32] }:$cond)
PATTERN: (select:{ *:[i32] } i32:{ *:[i32] }:$cond, i32:{ *:[i32] }:$t, i32:{ *:[i32] }:$f)
RESULT:  (OR:{ *:[i32] } (SELNEZ:{ *:[i32] } i32:{ *:[i32] }:$t, i32:{ *:[i32] }:$cond), (SELEQZ:{ *:[i32] } i32:{ *:[i32] }:$f, i32:{ *:[i32] }:$cond))
PATTERN: (select:{ *:[i32] } i32:{ *:[i32] }:$cond, i32:{ *:[i32] }:$t, (imm:{ *:[i32] })<<P:Predicate_immz>>)
RESULT:  (SELNEZ:{ *:[i32] } i32:{ *:[i32] }:$t, i32:{ *:[i32] }:$cond)
PATTERN: (select:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immz>>, i32:{ *:[i32] }:$f)
RESULT:  (SELEQZ:{ *:[i32] } i32:{ *:[i32] }:$f, i32:{ *:[i32] }:$cond)
PATTERN: (select:{ *:[i64] } i64:{ *:[i64] }:$cond, i64:{ *:[i64] }:$t, i64:{ *:[i64] }:$f)
RESULT:  (OR64:{ *:[i64] } (SELNEZ64:{ *:[i64] } i64:{ *:[i64] }:$t, i64:{ *:[i64] }:$cond), (SELEQZ64:{ *:[i64] } i64:{ *:[i64] }:$f, i64:{ *:[i64] }:$cond))
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } i64:{ *:[i64] }:$cond, (imm:{ *:[i64] })<<P:Predicate_immz>>, SETEQ:{ *:[Other] }), i64:{ *:[i64] }:$t, i64:{ *:[i64] }:$f)
RESULT:  (OR64:{ *:[i64] } (SELEQZ64:{ *:[i64] } i64:{ *:[i64] }:$t, i64:{ *:[i64] }:$cond), (SELNEZ64:{ *:[i64] } i64:{ *:[i64] }:$f, i64:{ *:[i64] }:$cond))
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } i64:{ *:[i64] }:$cond, (imm:{ *:[i64] })<<P:Predicate_immz>>, SETNE:{ *:[Other] }), i64:{ *:[i64] }:$t, i64:{ *:[i64] }:$f)
RESULT:  (OR64:{ *:[i64] } (SELNEZ64:{ *:[i64] } i64:{ *:[i64] }:$t, i64:{ *:[i64] }:$cond), (SELEQZ64:{ *:[i64] } i64:{ *:[i64] }:$f, i64:{ *:[i64] }:$cond))
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } i64:{ *:[i64] }:$cond, (imm:{ *:[i64] })<<P:Predicate_immZExt16_64>>:$imm, SETEQ:{ *:[Other] }), i64:{ *:[i64] }:$t, i64:{ *:[i64] }:$f)
RESULT:  (OR64:{ *:[i64] } (SELEQZ64:{ *:[i64] } i64:{ *:[i64] }:$t, (XORi64:{ *:[i64] } i64:{ *:[i64] }:$cond, (imm:{ *:[i64] })<<P:Predicate_immZExt16_64>>:$imm)), (SELNEZ64:{ *:[i64] } i64:{ *:[i64] }:$f, (XORi64:{ *:[i64] } i64:{ *:[i64] }:$cond, (imm:{ *:[i64] })<<P:Predicate_immZExt16_64>>:$imm)))
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } i64:{ *:[i64] }:$cond, (imm:{ *:[i64] })<<P:Predicate_immZExt16_64>>:$imm, SETNE:{ *:[Other] }), i64:{ *:[i64] }:$t, i64:{ *:[i64] }:$f)
RESULT:  (OR64:{ *:[i64] } (SELNEZ64:{ *:[i64] } i64:{ *:[i64] }:$t, (XORi64:{ *:[i64] } i64:{ *:[i64] }:$cond, (imm:{ *:[i64] })<<P:Predicate_immZExt16_64>>:$imm)), (SELEQZ64:{ *:[i64] } i64:{ *:[i64] }:$f, (XORi64:{ *:[i64] } i64:{ *:[i64] }:$cond, (imm:{ *:[i64] })<<P:Predicate_immZExt16_64>>:$imm)))
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } i64:{ *:[i64] }:$cond, (imm:{ *:[i64] })<<P:Predicate_immSExt16Plus1>>:$imm, SETGT:{ *:[Other] }), i64:{ *:[i64] }:$t, i64:{ *:[i64] }:$f)
RESULT:  (OR64:{ *:[i64] } (SELEQZ64:{ *:[i64] } i64:{ *:[i64] }:$t, (SUBREG_TO_REG:{ *:[i64] } 0:{ *:[i64] }, (SLTi64:{ *:[i32] } i64:{ *:[i64] }:$cond, (Plus1:{ *:[i64] } (imm:{ *:[i64] }):$imm)), sub_32:{ *:[i32] })), (SELNEZ64:{ *:[i64] } i64:{ *:[i64] }:$f, (SUBREG_TO_REG:{ *:[i64] } 0:{ *:[i64] }, (SLTi64:{ *:[i32] } i64:{ *:[i64] }:$cond, (Plus1:{ *:[i64] } (imm:{ *:[i64] }):$imm)), sub_32:{ *:[i32] })))
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } i64:{ *:[i64] }:$cond, (imm:{ *:[i64] })<<P:Predicate_immSExt16Plus1>>:$imm, SETUGT:{ *:[Other] }), i64:{ *:[i64] }:$t, i64:{ *:[i64] }:$f)
RESULT:  (OR64:{ *:[i64] } (SELEQZ64:{ *:[i64] } i64:{ *:[i64] }:$t, (SUBREG_TO_REG:{ *:[i64] } 0:{ *:[i64] }, (SLTiu64:{ *:[i32] } i64:{ *:[i64] }:$cond, (Plus1:{ *:[i64] } (imm:{ *:[i64] }):$imm)), sub_32:{ *:[i32] })), (SELNEZ64:{ *:[i64] } i64:{ *:[i64] }:$f, (SUBREG_TO_REG:{ *:[i64] } 0:{ *:[i64] }, (SLTiu64:{ *:[i32] } i64:{ *:[i64] }:$cond, (Plus1:{ *:[i64] } (imm:{ *:[i64] }):$imm)), sub_32:{ *:[i32] })))
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } i64:{ *:[i64] }:$cond, (imm:{ *:[i64] })<<P:Predicate_immz>>, SETNE:{ *:[Other] }), i64:{ *:[i64] }:$t, (imm:{ *:[i64] })<<P:Predicate_immz>>)
RESULT:  (SELNEZ64:{ *:[i64] } i64:{ *:[i64] }:$t, i64:{ *:[i64] }:$cond)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } i64:{ *:[i64] }:$cond, (imm:{ *:[i64] })<<P:Predicate_immz>>, SETEQ:{ *:[Other] }), i64:{ *:[i64] }:$t, (imm:{ *:[i64] })<<P:Predicate_immz>>)
RESULT:  (SELEQZ64:{ *:[i64] } i64:{ *:[i64] }:$t, i64:{ *:[i64] }:$cond)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } i64:{ *:[i64] }:$cond, (imm:{ *:[i64] })<<P:Predicate_immz>>, SETNE:{ *:[Other] }), (imm:{ *:[i64] })<<P:Predicate_immz>>, i64:{ *:[i64] }:$f)
RESULT:  (SELEQZ64:{ *:[i64] } i64:{ *:[i64] }:$f, i64:{ *:[i64] }:$cond)
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } i64:{ *:[i64] }:$cond, (imm:{ *:[i64] })<<P:Predicate_immz>>, SETEQ:{ *:[Other] }), (imm:{ *:[i64] })<<P:Predicate_immz>>, i64:{ *:[i64] }:$f)
RESULT:  (SELNEZ64:{ *:[i64] } i64:{ *:[i64] }:$f, i64:{ *:[i64] }:$cond)
PATTERN: (select:{ *:[i64] } i32:{ *:[i32] }:$cond, i64:{ *:[i64] }:$t, i64:{ *:[i64] }:$f)
RESULT:  (OR64:{ *:[i64] } (SELNEZ64:{ *:[i64] } i64:{ *:[i64] }:$t, (SLL64_32:{ *:[i64] } i32:{ *:[i32] }:$cond)), (SELEQZ64:{ *:[i64] } i64:{ *:[i64] }:$f, (SLL64_32:{ *:[i64] } i32:{ *:[i32] }:$cond)))
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immz>>, SETEQ:{ *:[Other] }), i64:{ *:[i64] }:$t, i64:{ *:[i64] }:$f)
RESULT:  (OR64:{ *:[i64] } (SELEQZ64:{ *:[i64] } i64:{ *:[i64] }:$t, (SLL64_32:{ *:[i64] } i32:{ *:[i32] }:$cond)), (SELNEZ64:{ *:[i64] } i64:{ *:[i64] }:$f, (SLL64_32:{ *:[i64] } i32:{ *:[i32] }:$cond)))
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immz>>, SETNE:{ *:[Other] }), i64:{ *:[i64] }:$t, i64:{ *:[i64] }:$f)
RESULT:  (OR64:{ *:[i64] } (SELNEZ64:{ *:[i64] } i64:{ *:[i64] }:$t, (SLL64_32:{ *:[i64] } i32:{ *:[i32] }:$cond)), (SELEQZ64:{ *:[i64] } i64:{ *:[i64] }:$f, (SLL64_32:{ *:[i64] } i32:{ *:[i32] }:$cond)))
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immZExt16>><<X:LO16>>:$imm, SETEQ:{ *:[Other] }), i64:{ *:[i64] }:$t, i64:{ *:[i64] }:$f)
RESULT:  (OR64:{ *:[i64] } (SELEQZ64:{ *:[i64] } i64:{ *:[i64] }:$t, (SLL64_32:{ *:[i64] } (XORi:{ *:[i32] } i32:{ *:[i32] }:$cond, (LO16:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immZExt16>>:$imm)))), (SELNEZ64:{ *:[i64] } i64:{ *:[i64] }:$f, (SLL64_32:{ *:[i64] } (XORi:{ *:[i32] } i32:{ *:[i32] }:$cond, (LO16:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immZExt16>>:$imm)))))
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immZExt16>><<X:LO16>>:$imm, SETNE:{ *:[Other] }), i64:{ *:[i64] }:$t, i64:{ *:[i64] }:$f)
RESULT:  (OR64:{ *:[i64] } (SELNEZ64:{ *:[i64] } i64:{ *:[i64] }:$t, (SLL64_32:{ *:[i64] } (XORi:{ *:[i32] } i32:{ *:[i32] }:$cond, (LO16:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immZExt16>>:$imm)))), (SELEQZ64:{ *:[i64] } i64:{ *:[i64] }:$f, (SLL64_32:{ *:[i64] } (XORi:{ *:[i32] } i32:{ *:[i32] }:$cond, (LO16:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immZExt16>>:$imm)))))
PATTERN: (select:{ *:[i64] } i32:{ *:[i32] }:$cond, i64:{ *:[i64] }:$t, (imm:{ *:[i64] })<<P:Predicate_immz>>)
RESULT:  (SELNEZ64:{ *:[i64] } i64:{ *:[i64] }:$t, (SLL64_32:{ *:[i64] } i32:{ *:[i32] }:$cond))
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immz>>, SETNE:{ *:[Other] }), i64:{ *:[i64] }:$t, (imm:{ *:[i64] })<<P:Predicate_immz>>)
RESULT:  (SELNEZ64:{ *:[i64] } i64:{ *:[i64] }:$t, (SLL64_32:{ *:[i64] } i32:{ *:[i32] }:$cond))
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immz>>, SETEQ:{ *:[Other] }), i64:{ *:[i64] }:$t, (imm:{ *:[i64] })<<P:Predicate_immz>>)
RESULT:  (SELEQZ64:{ *:[i64] } i64:{ *:[i64] }:$t, (SLL64_32:{ *:[i64] } i32:{ *:[i32] }:$cond))
PATTERN: (select:{ *:[i64] } i32:{ *:[i32] }:$cond, (imm:{ *:[i64] })<<P:Predicate_immz>>, i64:{ *:[i64] }:$f)
RESULT:  (SELEQZ64:{ *:[i64] } i64:{ *:[i64] }:$f, (SLL64_32:{ *:[i64] } i32:{ *:[i32] }:$cond))
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immz>>, SETNE:{ *:[Other] }), (imm:{ *:[i64] })<<P:Predicate_immz>>, i64:{ *:[i64] }:$f)
RESULT:  (SELEQZ64:{ *:[i64] } i64:{ *:[i64] }:$f, (SLL64_32:{ *:[i64] } i32:{ *:[i32] }:$cond))
PATTERN: (select:{ *:[i64] } (setcc:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immz>>, SETEQ:{ *:[Other] }), (imm:{ *:[i64] })<<P:Predicate_immz>>, i64:{ *:[i64] }:$f)
RESULT:  (SELNEZ64:{ *:[i64] } i64:{ *:[i64] }:$f, (SLL64_32:{ *:[i64] } i32:{ *:[i32] }:$cond))
PATTERN: (sext:{ *:[i64] } (mul:{ *:[i32] } GPR32:{ *:[i32] }:$src, GPR32:{ *:[i32] }:$src2))
RESULT:  (INSERT_SUBREG:{ *:[i64] } (IMPLICIT_DEF:{ *:[i64] }), (MUL_R6:{ *:[i32] } GPR32:{ *:[i32] }:$src, GPR32:{ *:[i32] }:$src2), sub_32:{ *:[i32] })
PATTERN: (sext:{ *:[i64] } (sdiv:{ *:[i32] } GPR32:{ *:[i32] }:$src, GPR32:{ *:[i32] }:$src2))
RESULT:  (INSERT_SUBREG:{ *:[i64] } (IMPLICIT_DEF:{ *:[i64] }), (DIV:{ *:[i32] } GPR32:{ *:[i32] }:$src, GPR32:{ *:[i32] }:$src2), sub_32:{ *:[i32] })
PATTERN: (sext:{ *:[i64] } (udiv:{ *:[i32] } GPR32:{ *:[i32] }:$src, GPR32:{ *:[i32] }:$src2))
RESULT:  (INSERT_SUBREG:{ *:[i64] } (IMPLICIT_DEF:{ *:[i64] }), (DIVU:{ *:[i32] } GPR32:{ *:[i32] }:$src, GPR32:{ *:[i32] }:$src2), sub_32:{ *:[i32] })
PATTERN: (sext:{ *:[i64] } (srem:{ *:[i32] } GPR32:{ *:[i32] }:$src, GPR32:{ *:[i32] }:$src2))
RESULT:  (INSERT_SUBREG:{ *:[i64] } (IMPLICIT_DEF:{ *:[i64] }), (MOD:{ *:[i32] } GPR32:{ *:[i32] }:$src, GPR32:{ *:[i32] }:$src2), sub_32:{ *:[i32] })
PATTERN: (sext:{ *:[i64] } (urem:{ *:[i32] } GPR32:{ *:[i32] }:$src, GPR32:{ *:[i32] }:$src2))
RESULT:  (INSERT_SUBREG:{ *:[i64] } (IMPLICIT_DEF:{ *:[i64] }), (MODU:{ *:[i32] } GPR32:{ *:[i32] }:$src, GPR32:{ *:[i32] }:$src2), sub_32:{ *:[i32] })
PATTERN: (xor:{ *:[i32] } CPU16Regs:{ *:[i32] }:$r, -1:{ *:[i32] })
RESULT:  (NotRxRy16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$r)
PATTERN: (sub:{ *:[i32] } 0:{ *:[i32] }, CPU16Regs:{ *:[i32] }:$r)
RESULT:  (NegRxRy16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$r)
PATTERN: (add:{ *:[i32] } CPU16Regs:{ *:[i32] }:$l, CPU16Regs:{ *:[i32] }:$r)
RESULT:  (AdduRxRyRz16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$l, CPU16Regs:{ *:[i32] }:$r)
PATTERN: (and:{ *:[i32] } CPU16Regs:{ *:[i32] }:$l, CPU16Regs:{ *:[i32] }:$r)
RESULT:  (AndRxRxRy16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$l, CPU16Regs:{ *:[i32] }:$r)
PATTERN: (mul:{ *:[i32] } CPU16Regs:{ *:[i32] }:$l, CPU16Regs:{ *:[i32] }:$r)
RESULT:  (MultRxRyRz16:{ *:[i32] }:{ *:[i32] } CPU16Regs:{ *:[i32] }:$l, CPU16Regs:{ *:[i32] }:$r)
PATTERN: (or:{ *:[i32] } CPU16Regs:{ *:[i32] }:$l, CPU16Regs:{ *:[i32] }:$r)
RESULT:  (OrRxRxRy16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$l, CPU16Regs:{ *:[i32] }:$r)
PATTERN: (sub:{ *:[i32] } CPU16Regs:{ *:[i32] }:$l, CPU16Regs:{ *:[i32] }:$r)
RESULT:  (SubuRxRyRz16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$l, CPU16Regs:{ *:[i32] }:$r)
PATTERN: (xor:{ *:[i32] } CPU16Regs:{ *:[i32] }:$l, CPU16Regs:{ *:[i32] }:$r)
RESULT:  (XorRxRxRy16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$l, CPU16Regs:{ *:[i32] }:$r)
PATTERN: (add:{ *:[i32] } CPU16Regs:{ *:[i32] }:$in, (imm:{ *:[i32] })<<P:Predicate_immSExt8>>:$imm)
RESULT:  (AddiuRxRxImm16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$in, (imm:{ *:[i32] })<<P:Predicate_immSExt8>>:$imm)
PATTERN: (add:{ *:[i32] } CPU16Regs:{ *:[i32] }:$in, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$imm)
RESULT:  (AddiuRxRxImmX16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$in, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$imm)
PATTERN: (shl:{ *:[i32] } CPU16Regs:{ *:[i32] }:$in, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$imm)
RESULT:  (SllX16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$in, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$imm)
PATTERN: (srl:{ *:[i32] } CPU16Regs:{ *:[i32] }:$in, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$imm)
RESULT:  (SrlX16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$in, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$imm)
PATTERN: (sra:{ *:[i32] } CPU16Regs:{ *:[i32] }:$in, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$imm)
RESULT:  (SraX16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$in, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$imm)
PATTERN: (shl:{ *:[i32] } CPU16Regs:{ *:[i32] }:$r, CPU16Regs:{ *:[i32] }:$ra)
RESULT:  (SllvRxRy16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$r, CPU16Regs:{ *:[i32] }:$ra)
PATTERN: (sra:{ *:[i32] } CPU16Regs:{ *:[i32] }:$r, CPU16Regs:{ *:[i32] }:$ra)
RESULT:  (SravRxRy16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$r, CPU16Regs:{ *:[i32] }:$ra)
PATTERN: (srl:{ *:[i32] } CPU16Regs:{ *:[i32] }:$r, CPU16Regs:{ *:[i32] }:$ra)
RESULT:  (SrlvRxRy16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$r, CPU16Regs:{ *:[i32] }:$ra)
PATTERN: (ld:{ *:[i32] } addr16:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_sextload>><<P:Predicate_sextloadi8>>
RESULT:  (LbRxRyOffMemX16:{ *:[i32] } addr16:{ *:[i32] }:$addr)
PATTERN: (ld:{ *:[i32] } addr16:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_zextload>><<P:Predicate_zextloadi8>>
RESULT:  (LbuRxRyOffMemX16:{ *:[i32] } addr16:{ *:[i32] }:$addr)
PATTERN: (ld:{ *:[i32] } addr16:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_sextload>><<P:Predicate_sextloadi16>>
RESULT:  (LhRxRyOffMemX16:{ *:[i32] } addr16:{ *:[i32] }:$addr)
PATTERN: (ld:{ *:[i32] } addr16:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_zextload>><<P:Predicate_zextloadi16>>
RESULT:  (LhuRxRyOffMemX16:{ *:[i32] } addr16:{ *:[i32] }:$addr)
PATTERN: (ld:{ *:[i32] } addr16sp:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LwRxSpImmX16:{ *:[i32] } addr16sp:{ *:[i32] }:$addr)
PATTERN: (st CPU16Regs:{ *:[i32] }:$r, addr16:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_truncstore>><<P:Predicate_truncstorei8>>
RESULT:  (SbRxRyOffMemX16 CPU16Regs:{ *:[i32] }:$r, addr16:{ *:[i32] }:$addr)
PATTERN: (st CPU16Regs:{ *:[i32] }:$r, addr16:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_truncstore>><<P:Predicate_truncstorei16>>
RESULT:  (ShRxRyOffMemX16 CPU16Regs:{ *:[i32] }:$r, addr16:{ *:[i32] }:$addr)
PATTERN: (st CPU16Regs:{ *:[i32] }:$r, addr16sp:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SwRxSpImmX16 CPU16Regs:{ *:[i32] }:$r, addr16sp:{ *:[i32] }:$addr)
PATTERN: (MipsJmpLink (tglobaladdr:{ *:[i32] }):$dst)
RESULT:  (Jal16 (tglobaladdr:{ *:[i32] }):$dst)
PATTERN: (MipsJmpLink (texternalsym:{ *:[i32] }):$dst)
RESULT:  (Jal16 (texternalsym:{ *:[i32] }):$dst)
PATTERN: (brind CPU16Regs:{ *:[i32] }:$rs)
RESULT:  (JrcRx16 CPU16Regs:{ *:[i32] }:$rs)
PATTERN: addr16sp:{ *:[i32] }:$addr
RESULT:  (AddiuRxRyOffMemX16:{ *:[i32] } addr16sp:{ *:[i32] }:$addr)
PATTERN: (imm:{ *:[i32] }):$imm
RESULT:  (LwConstant32:{ *:[i32] } (imm:{ *:[i32] }):$imm, -1:{ *:[i32] })
PATTERN: (brcond (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$rx, CPU16Regs:{ *:[i32] }:$ry, SETEQ:{ *:[Other] }), (bb:{ *:[Other] }):$imm16)
RESULT:  (BteqzT8CmpX16 CPU16Regs:{ *:[i32] }:$rx, CPU16Regs:{ *:[i32] }:$ry, (bb:{ *:[Other] }):$imm16)
PATTERN: (brcond (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$rx, (imm:{ *:[i32] })<<P:Predicate_immZExt16>><<X:LO16>>:$imm, SETEQ:{ *:[Other] }), (bb:{ *:[Other] }):$targ16)
RESULT:  (BteqzT8CmpiX16 CPU16Regs:{ *:[i32] }:$rx, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$imm, (bb:{ *:[Other] }):$targ16)
PATTERN: (brcond (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$rx, 0:{ *:[i32] }, SETEQ:{ *:[Other] }), (bb:{ *:[Other] }):$targ16)
RESULT:  (BeqzRxImm16 CPU16Regs:{ *:[i32] }:$rx, (bb:{ *:[Other] }):$targ16)
PATTERN: (brcond (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$rx, CPU16Regs:{ *:[i32] }:$ry, SETGT:{ *:[Other] }), (bb:{ *:[Other] }):$imm16)
RESULT:  (BtnezT8SltX16 CPU16Regs:{ *:[i32] }:$ry, CPU16Regs:{ *:[i32] }:$rx, (bb:{ *:[Other] }):$imm16)
PATTERN: (brcond (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$rx, CPU16Regs:{ *:[i32] }:$ry, SETGE:{ *:[Other] }), (bb:{ *:[Other] }):$imm16)
RESULT:  (BteqzT8SltX16 CPU16Regs:{ *:[i32] }:$rx, CPU16Regs:{ *:[i32] }:$ry, (bb:{ *:[Other] }):$imm16)
PATTERN: (brcond (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$rx, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$imm, SETGE:{ *:[Other] }), (bb:{ *:[Other] }):$imm16)
RESULT:  (BteqzT8SltiX16 CPU16Regs:{ *:[i32] }:$rx, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$imm, (bb:{ *:[Other] }):$imm16)
PATTERN: (brcond (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$rx, CPU16Regs:{ *:[i32] }:$ry, SETLT:{ *:[Other] }), (bb:{ *:[Other] }):$imm16)
RESULT:  (BtnezT8SltX16 CPU16Regs:{ *:[i32] }:$rx, CPU16Regs:{ *:[i32] }:$ry, (bb:{ *:[Other] }):$imm16)
PATTERN: (brcond (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$rx, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$imm, SETLT:{ *:[Other] }), (bb:{ *:[Other] }):$imm16)
RESULT:  (BtnezT8SltiX16 CPU16Regs:{ *:[i32] }:$rx, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$imm, (bb:{ *:[Other] }):$imm16)
PATTERN: (brcond (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$rx, CPU16Regs:{ *:[i32] }:$ry, SETLE:{ *:[Other] }), (bb:{ *:[Other] }):$imm16)
RESULT:  (BteqzT8SltX16 CPU16Regs:{ *:[i32] }:$ry, CPU16Regs:{ *:[i32] }:$rx, (bb:{ *:[Other] }):$imm16)
PATTERN: (brcond (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$rx, CPU16Regs:{ *:[i32] }:$ry, SETNE:{ *:[Other] }), (bb:{ *:[Other] }):$imm16)
RESULT:  (BtnezT8CmpX16 CPU16Regs:{ *:[i32] }:$rx, CPU16Regs:{ *:[i32] }:$ry, (bb:{ *:[Other] }):$imm16)
PATTERN: (brcond (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$rx, (imm:{ *:[i32] })<<P:Predicate_immZExt16>><<X:LO16>>:$imm, SETNE:{ *:[Other] }), (bb:{ *:[Other] }):$targ16)
RESULT:  (BtnezT8CmpiX16 CPU16Regs:{ *:[i32] }:$rx, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$imm, (bb:{ *:[Other] }):$targ16)
PATTERN: (brcond (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$rx, 0:{ *:[i32] }, SETNE:{ *:[Other] }), (bb:{ *:[Other] }):$targ16)
RESULT:  (BnezRxImm16 CPU16Regs:{ *:[i32] }:$rx, (bb:{ *:[Other] }):$targ16)
PATTERN: (brcond CPU16Regs:{ *:[i32] }:$rx, (bb:{ *:[Other] }):$targ16)
RESULT:  (BnezRxImm16 CPU16Regs:{ *:[i32] }:$rx, (bb:{ *:[Other] }):$targ16)
PATTERN: (br (bb:{ *:[Other] }):$imm16)
RESULT:  (Bimm16 (bb:{ *:[Other] }):$imm16)
PATTERN: (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$in
RESULT:  (AddiuRxRxImmX16:{ *:[i32] } (MoveR3216:{ *:[i32] } ZERO:{ *:[i32] }), (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$in)
PATTERN: (imm:{ *:[i32] })<<P:Predicate_immZExt16>><<X:LO16>>:$in
RESULT:  (LiRxImmX16:{ *:[i32] } (LO16:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immZExt16>>:$in))
PATTERN: (MipsDivRem16 CPU16Regs:{ *:[i32] }:$rx, CPU16Regs:{ *:[i32] }:$ry)
RESULT:  (DivRxRy16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$rx, CPU16Regs:{ *:[i32] }:$ry)
PATTERN: (MipsDivRemU16 CPU16Regs:{ *:[i32] }:$rx, CPU16Regs:{ *:[i32] }:$ry)
RESULT:  (DivuRxRy16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$rx, CPU16Regs:{ *:[i32] }:$ry)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$a, CPU16Regs:{ *:[i32] }:$b, SETGE:{ *:[Other] }), CPU16Regs:{ *:[i32] }:$x, CPU16Regs:{ *:[i32] }:$y)
RESULT:  (SelTBteqZSlt:{ *:[i32] } CPU16Regs:{ *:[i32] }:$x, CPU16Regs:{ *:[i32] }:$y, CPU16Regs:{ *:[i32] }:$a, CPU16Regs:{ *:[i32] }:$b)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$a, CPU16Regs:{ *:[i32] }:$b, SETGT:{ *:[Other] }), CPU16Regs:{ *:[i32] }:$x, CPU16Regs:{ *:[i32] }:$y)
RESULT:  (SelTBtneZSlt:{ *:[i32] } CPU16Regs:{ *:[i32] }:$x, CPU16Regs:{ *:[i32] }:$y, CPU16Regs:{ *:[i32] }:$b, CPU16Regs:{ *:[i32] }:$a)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$a, CPU16Regs:{ *:[i32] }:$b, SETUGE:{ *:[Other] }), CPU16Regs:{ *:[i32] }:$x, CPU16Regs:{ *:[i32] }:$y)
RESULT:  (SelTBteqZSltu:{ *:[i32] } CPU16Regs:{ *:[i32] }:$x, CPU16Regs:{ *:[i32] }:$y, CPU16Regs:{ *:[i32] }:$a, CPU16Regs:{ *:[i32] }:$b)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$a, CPU16Regs:{ *:[i32] }:$b, SETUGT:{ *:[Other] }), CPU16Regs:{ *:[i32] }:$x, CPU16Regs:{ *:[i32] }:$y)
RESULT:  (SelTBtneZSltu:{ *:[i32] } CPU16Regs:{ *:[i32] }:$x, CPU16Regs:{ *:[i32] }:$y, CPU16Regs:{ *:[i32] }:$b, CPU16Regs:{ *:[i32] }:$a)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$a, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$b, SETLT:{ *:[Other] }), CPU16Regs:{ *:[i32] }:$x, CPU16Regs:{ *:[i32] }:$y)
RESULT:  (SelTBtneZSlti:{ *:[i32] } CPU16Regs:{ *:[i32] }:$x, CPU16Regs:{ *:[i32] }:$y, CPU16Regs:{ *:[i32] }:$a, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$b)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$a, CPU16Regs:{ *:[i32] }:$b, SETLE:{ *:[Other] }), CPU16Regs:{ *:[i32] }:$x, CPU16Regs:{ *:[i32] }:$y)
RESULT:  (SelTBteqZSlt:{ *:[i32] } CPU16Regs:{ *:[i32] }:$x, CPU16Regs:{ *:[i32] }:$y, CPU16Regs:{ *:[i32] }:$b, CPU16Regs:{ *:[i32] }:$a)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$a, CPU16Regs:{ *:[i32] }:$b, SETULE:{ *:[Other] }), CPU16Regs:{ *:[i32] }:$x, CPU16Regs:{ *:[i32] }:$y)
RESULT:  (SelTBteqZSltu:{ *:[i32] } CPU16Regs:{ *:[i32] }:$x, CPU16Regs:{ *:[i32] }:$y, CPU16Regs:{ *:[i32] }:$b, CPU16Regs:{ *:[i32] }:$a)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$a, CPU16Regs:{ *:[i32] }:$b, SETEQ:{ *:[Other] }), CPU16Regs:{ *:[i32] }:$x, CPU16Regs:{ *:[i32] }:$y)
RESULT:  (SelTBteqZCmp:{ *:[i32] } CPU16Regs:{ *:[i32] }:$x, CPU16Regs:{ *:[i32] }:$y, CPU16Regs:{ *:[i32] }:$b, CPU16Regs:{ *:[i32] }:$a)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$a, 0:{ *:[i32] }, SETEQ:{ *:[Other] }), CPU16Regs:{ *:[i32] }:$x, CPU16Regs:{ *:[i32] }:$y)
RESULT:  (SelBeqZ:{ *:[i32] } CPU16Regs:{ *:[i32] }:$x, CPU16Regs:{ *:[i32] }:$y, CPU16Regs:{ *:[i32] }:$a)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$a, (imm:{ *:[i32] })<<P:Predicate_immZExt16>><<X:LO16>>:$k, SETEQ:{ *:[Other] }), CPU16Regs:{ *:[i32] }:$x, CPU16Regs:{ *:[i32] }:$y)
RESULT:  (SelTBteqZCmpi:{ *:[i32] } CPU16Regs:{ *:[i32] }:$x, CPU16Regs:{ *:[i32] }:$y, CPU16Regs:{ *:[i32] }:$a, (LO16:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immZExt16>>:$k))
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$a, CPU16Regs:{ *:[i32] }:$b, SETNE:{ *:[Other] }), CPU16Regs:{ *:[i32] }:$x, CPU16Regs:{ *:[i32] }:$y)
RESULT:  (SelTBtneZCmp:{ *:[i32] } CPU16Regs:{ *:[i32] }:$x, CPU16Regs:{ *:[i32] }:$y, CPU16Regs:{ *:[i32] }:$b, CPU16Regs:{ *:[i32] }:$a)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$a, 0:{ *:[i32] }, SETNE:{ *:[Other] }), CPU16Regs:{ *:[i32] }:$x, CPU16Regs:{ *:[i32] }:$y)
RESULT:  (SelBneZ:{ *:[i32] } CPU16Regs:{ *:[i32] }:$x, CPU16Regs:{ *:[i32] }:$y, CPU16Regs:{ *:[i32] }:$a)
PATTERN: (select:{ *:[i32] } CPU16Regs:{ *:[i32] }:$a, CPU16Regs:{ *:[i32] }:$x, CPU16Regs:{ *:[i32] }:$y)
RESULT:  (SelBneZ:{ *:[i32] } CPU16Regs:{ *:[i32] }:$x, CPU16Regs:{ *:[i32] }:$y, CPU16Regs:{ *:[i32] }:$a)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$a, (imm:{ *:[i32] })<<P:Predicate_immZExt16>><<X:LO16>>:$k, SETNE:{ *:[Other] }), CPU16Regs:{ *:[i32] }:$x, CPU16Regs:{ *:[i32] }:$y)
RESULT:  (SelTBtneZCmpi:{ *:[i32] } CPU16Regs:{ *:[i32] }:$x, CPU16Regs:{ *:[i32] }:$y, CPU16Regs:{ *:[i32] }:$a, (LO16:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immZExt16>>:$k))
PATTERN: (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$lhs, CPU16Regs:{ *:[i32] }:$rhs, SETEQ:{ *:[Other] })
RESULT:  (SltiuCCRxImmX16:{ *:[i32] } (XorRxRxRy16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$lhs, CPU16Regs:{ *:[i32] }:$rhs), 1:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETEQ:{ *:[Other] })
RESULT:  (SltiuCCRxImmX16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$lhs, 1:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$lhs, CPU16Regs:{ *:[i32] }:$rhs, SETGE:{ *:[Other] })
RESULT:  (XorRxRxRy16:{ *:[i32] } (SltCCRxRy16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$lhs, CPU16Regs:{ *:[i32] }:$rhs), (LiRxImmX16:{ *:[i32] } 1:{ *:[i32] }))
PATTERN: (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$lhs, -32769:{ *:[i32] }, SETGT:{ *:[Other] })
RESULT:  (XorRxRxRy16:{ *:[i32] } (SltiCCRxImmX16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$lhs, -32768:{ *:[i32] }), (LiRxImmX16:{ *:[i32] } 1:{ *:[i32] }))
PATTERN: (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$lhs, CPU16Regs:{ *:[i32] }:$rhs, SETGT:{ *:[Other] })
RESULT:  (SltCCRxRy16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$rhs, CPU16Regs:{ *:[i32] }:$lhs)
PATTERN: (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$lhs, CPU16Regs:{ *:[i32] }:$rhs, SETLE:{ *:[Other] })
RESULT:  (XorRxRxRy16:{ *:[i32] } (SltCCRxRy16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$rhs, CPU16Regs:{ *:[i32] }:$lhs), (LiRxImm16:{ *:[i32] } 1:{ *:[i32] }))
PATTERN: (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$rx, CPU16Regs:{ *:[i32] }:$ry, SETLT:{ *:[Other] })
RESULT:  (SltCCRxRy16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$rx, CPU16Regs:{ *:[i32] }:$ry)
PATTERN: (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$rx, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$imm16, SETLT:{ *:[Other] })
RESULT:  (SltiCCRxImmX16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$rx, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$imm16)
PATTERN: (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$lhs, CPU16Regs:{ *:[i32] }:$rhs, SETNE:{ *:[Other] })
RESULT:  (SltuCCRxRy16:{ *:[i32] } (LiRxImmX16:{ *:[i32] } 0:{ *:[i32] }), (XorRxRxRy16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$lhs, CPU16Regs:{ *:[i32] }:$rhs))
PATTERN: (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$lhs, CPU16Regs:{ *:[i32] }:$rhs, SETUGE:{ *:[Other] })
RESULT:  (XorRxRxRy16:{ *:[i32] } (SltuCCRxRy16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$lhs, CPU16Regs:{ *:[i32] }:$rhs), (LiRxImmX16:{ *:[i32] } 1:{ *:[i32] }))
PATTERN: (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$lhs, CPU16Regs:{ *:[i32] }:$rhs, SETUGT:{ *:[Other] })
RESULT:  (SltuCCRxRy16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$rhs, CPU16Regs:{ *:[i32] }:$lhs)
PATTERN: (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$lhs, CPU16Regs:{ *:[i32] }:$rhs, SETULE:{ *:[Other] })
RESULT:  (XorRxRxRy16:{ *:[i32] } (SltuCCRxRy16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$rhs, CPU16Regs:{ *:[i32] }:$lhs), (LiRxImmX16:{ *:[i32] } 1:{ *:[i32] }))
PATTERN: (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$rx, CPU16Regs:{ *:[i32] }:$ry, SETULT:{ *:[Other] })
RESULT:  (SltuCCRxRy16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$rx, CPU16Regs:{ *:[i32] }:$ry)
PATTERN: (setcc:{ *:[i32] } CPU16Regs:{ *:[i32] }:$rx, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$imm16, SETULT:{ *:[Other] })
RESULT:  (SltiuCCRxImmX16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$rx, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$imm16)
PATTERN: (add:{ *:[i32] } CPU16Regs:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$lo))
RESULT:  (AddiuRxRxImmX16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$hi, (tglobaladdr:{ *:[i32] }):$lo)
PATTERN: (MipsHi:{ *:[i32] } (tblockaddress:{ *:[i32] }):$in)
RESULT:  (SllX16:{ *:[i32] } (LiRxImmX16:{ *:[i32] } (tblockaddress:{ *:[i32] }):$in), 16:{ *:[i32] })
PATTERN: (MipsHi:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$in)
RESULT:  (SllX16:{ *:[i32] } (LiRxImmX16:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$in), 16:{ *:[i32] })
PATTERN: (MipsHi:{ *:[i32] } (tjumptable:{ *:[i32] }):$in)
RESULT:  (SllX16:{ *:[i32] } (LiRxImmX16:{ *:[i32] } (tjumptable:{ *:[i32] }):$in), 16:{ *:[i32] })
PATTERN: (MipsLo:{ *:[i32] } (tblockaddress:{ *:[i32] }):$in)
RESULT:  (LiRxImmX16:{ *:[i32] } (tblockaddress:{ *:[i32] }):$in)
PATTERN: (MipsTlsHi:{ *:[i32] } (tglobaltlsaddr:{ *:[i32] }):$in)
RESULT:  (SllX16:{ *:[i32] } (LiRxImmX16:{ *:[i32] } (tglobaltlsaddr:{ *:[i32] }):$in), 16:{ *:[i32] })
PATTERN: (MipsWrapper:{ *:[i32] } CPU16Regs:{ *:[i32] }:$gp, (tglobaladdr:{ *:[i32] }):$in)
RESULT:  (AddiuRxRxImmX16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$gp, (tglobaladdr:{ *:[i32] }):$in)
PATTERN: (MipsWrapper:{ *:[i32] } CPU16Regs:{ *:[i32] }:$gp, (tglobaltlsaddr:{ *:[i32] }):$in)
RESULT:  (AddiuRxRxImmX16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$gp, (tglobaltlsaddr:{ *:[i32] }):$in)
PATTERN: (ld:{ *:[i32] } addr16:{ *:[iPTR] }:$src)<<P:Predicate_unindexedload>><<P:Predicate_extload>><<P:Predicate_extloadi8>>
RESULT:  (LbuRxRyOffMemX16:{ *:[i32] } addr16:{ *:[i32] }:$src)
PATTERN: (ld:{ *:[i32] } addr16:{ *:[iPTR] }:$src)<<P:Predicate_unindexedload>><<P:Predicate_extload>><<P:Predicate_extloadi16>>
RESULT:  (LhuRxRyOffMemX16:{ *:[i32] } addr16:{ *:[i32] }:$src)
PATTERN: (trap)
RESULT:  (Break16)
PATTERN: (sext_inreg:{ *:[i32] } CPU16Regs:{ *:[i32] }:$val, i8:{ *:[Other] })
RESULT:  (SebRx16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$val)
PATTERN: (sext_inreg:{ *:[i32] } CPU16Regs:{ *:[i32] }:$val, i16:{ *:[Other] })
RESULT:  (SehRx16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$val)
PATTERN: (bitconvert:{ *:[i32] } DSPR:{ *:[v2i16] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[i32] } DSPR:{ *:[v2i16] }:$src, GPR32:{ *:[i32] })
PATTERN: (bitconvert:{ *:[i32] } DSPR:{ *:[v4i8] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[i32] } DSPR:{ *:[v4i8] }:$src, GPR32:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v2i16] } GPR32:{ *:[i32] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v2i16] } GPR32:{ *:[i32] }:$src, DSPR:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v4i8] } GPR32:{ *:[i32] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v4i8] } GPR32:{ *:[i32] }:$src, DSPR:{ *:[i32] })
PATTERN: (bitconvert:{ *:[f32] } DSPR:{ *:[v2i16] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[f32] } DSPR:{ *:[v2i16] }:$src, FGR32:{ *:[i32] })
PATTERN: (bitconvert:{ *:[f32] } DSPR:{ *:[v4i8] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[f32] } DSPR:{ *:[v4i8] }:$src, FGR32:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v2i16] } FGR32:{ *:[f32] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v2i16] } FGR32:{ *:[f32] }:$src, DSPR:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v4i8] } FGR32:{ *:[f32] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v4i8] } FGR32:{ *:[f32] }:$src, DSPR:{ *:[i32] })
PATTERN: (ld:{ *:[v2i16] } addr:{ *:[iPTR] }:$a)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (COPY_TO_REGCLASS:{ *:[v2i16] } (LW:{ *:[i32] } addr:{ *:[iPTR] }:$a), DSPR:{ *:[i32] })
PATTERN: (ld:{ *:[v4i8] } addr:{ *:[iPTR] }:$a)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (COPY_TO_REGCLASS:{ *:[v4i8] } (LW:{ *:[i32] } addr:{ *:[iPTR] }:$a), DSPR:{ *:[i32] })
PATTERN: (st DSPR:{ *:[v2i16] }:$val, addr:{ *:[iPTR] }:$a)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SW (COPY_TO_REGCLASS:{ *:[i32] } DSPR:{ *:[v2i16] }:$val, GPR32:{ *:[i32] }), addr:{ *:[iPTR] }:$a)
PATTERN: (st DSPR:{ *:[v4i8] }:$val, addr:{ *:[iPTR] }:$a)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SW (COPY_TO_REGCLASS:{ *:[i32] } DSPR:{ *:[v4i8] }:$val, GPR32:{ *:[i32] }), addr:{ *:[iPTR] }:$a)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4052:{ *:[iPTR] }, v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b)
RESULT:  (ADDQ_PH:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b)
PATTERN: (add:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b)
RESULT:  (ADDQ_PH:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4672:{ *:[iPTR] }, v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b)
RESULT:  (SUBQ_PH:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b)
PATTERN: (sub:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b)
RESULT:  (SUBQ_PH:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4516:{ *:[iPTR] }, v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b)
RESULT:  (MUL_PH:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b)
PATTERN: (mul:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b)
RESULT:  (MUL_PH:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4073:{ *:[iPTR] }, v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b)
RESULT:  (ADDU_QB:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b)
PATTERN: (add:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b)
RESULT:  (ADDU_QB:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4696:{ *:[iPTR] }, v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b)
RESULT:  (SUBU_QB:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b)
PATTERN: (sub:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b)
RESULT:  (SUBU_QB:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4071:{ *:[iPTR] }, i32:{ *:[i32] }:$a, i32:{ *:[i32] }:$b)
RESULT:  (ADDSC:{ *:[i32] } i32:{ *:[i32] }:$a, i32:{ *:[i32] }:$b)
PATTERN: (addc:{ *:[i32] } i32:{ *:[i32] }:$a, i32:{ *:[i32] }:$b)
RESULT:  (ADDSC:{ *:[i32] } i32:{ *:[i32] }:$a, i32:{ *:[i32] }:$b)
PATTERN: (intrinsic_w_chain:{ *:[i32] } 4086:{ *:[iPTR] }, i32:{ *:[i32] }:$a, i32:{ *:[i32] }:$b)
RESULT:  (ADDWC:{ *:[i32] } i32:{ *:[i32] }:$a, i32:{ *:[i32] }:$b)
PATTERN: (adde:{ *:[i32] } i32:{ *:[i32] }:$a, i32:{ *:[i32] }:$b)
RESULT:  (ADDWC:{ *:[i32] } i32:{ *:[i32] }:$a, i32:{ *:[i32] }:$b)
PATTERN: (MipsSHLL_DSP:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, (imm:{ *:[i32] }):$shamt)
RESULT:  (SHLL_PH:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, (imm:{ *:[i32] }):$shamt)
PATTERN: (MipsSHRA_DSP:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, (imm:{ *:[i32] }):$shamt)
RESULT:  (SHRA_PH:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, (imm:{ *:[i32] }):$shamt)
PATTERN: (MipsSHRL_DSP:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, (imm:{ *:[i32] }):$shamt)
RESULT:  (SHRL_PH:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, (imm:{ *:[i32] }):$shamt)
PATTERN: (intrinsic_w_chain:{ *:[v2i16] } 4599:{ *:[iPTR] }, v2i16:{ *:[v2i16] }:$a, (imm:{ *:[i32] })<<P:Predicate_immZExt4>>:$shamt)
RESULT:  (SHLL_PH:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, (imm:{ *:[i32] })<<P:Predicate_immZExt4>>:$shamt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4603:{ *:[iPTR] }, v2i16:{ *:[v2i16] }:$a, (imm:{ *:[i32] })<<P:Predicate_immZExt4>>:$shamt)
RESULT:  (SHRA_PH:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, (imm:{ *:[i32] })<<P:Predicate_immZExt4>>:$shamt)
PATTERN: (intrinsic_wo_chain:{ *:[v2i16] } 4608:{ *:[iPTR] }, v2i16:{ *:[v2i16] }:$a, (imm:{ *:[i32] })<<P:Predicate_immZExt4>>:$shamt)
RESULT:  (SHRL_PH:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, (imm:{ *:[i32] })<<P:Predicate_immZExt4>>:$shamt)
PATTERN: (MipsSHLL_DSP:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, (imm:{ *:[i32] }):$shamt)
RESULT:  (SHLL_QB:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, (imm:{ *:[i32] }):$shamt)
PATTERN: (MipsSHRA_DSP:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, (imm:{ *:[i32] }):$shamt)
RESULT:  (SHRA_QB:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, (imm:{ *:[i32] }):$shamt)
PATTERN: (MipsSHRL_DSP:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, (imm:{ *:[i32] }):$shamt)
RESULT:  (SHRL_QB:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, (imm:{ *:[i32] }):$shamt)
PATTERN: (intrinsic_w_chain:{ *:[v4i8] } 4600:{ *:[iPTR] }, v4i8:{ *:[v4i8] }:$a, (imm:{ *:[i32] })<<P:Predicate_immZExt3>>:$shamt)
RESULT:  (SHLL_QB:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, (imm:{ *:[i32] })<<P:Predicate_immZExt3>>:$shamt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4604:{ *:[iPTR] }, v4i8:{ *:[v4i8] }:$a, (imm:{ *:[i32] })<<P:Predicate_immZExt3>>:$shamt)
RESULT:  (SHRA_QB:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, (imm:{ *:[i32] })<<P:Predicate_immZExt3>>:$shamt)
PATTERN: (intrinsic_wo_chain:{ *:[v4i8] } 4609:{ *:[iPTR] }, v4i8:{ *:[v4i8] }:$a, (imm:{ *:[i32] })<<P:Predicate_immZExt3>>:$shamt)
RESULT:  (SHRL_QB:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, (imm:{ *:[i32] })<<P:Predicate_immZExt3>>:$shamt)
PATTERN: (MipsSETCC_DSP:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b, SETEQ:{ *:[Other] })
RESULT:  (PseudoPICK_PH:{ *:[v2i16] } (PseudoCMP_EQ_PH:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b), (COPY_TO_REGCLASS:{ *:[v2i16] } (ADDiu:{ *:[i32] } ZERO:{ *:[i32] }, -1:{ *:[i32] }), DSPR:{ *:[i32] }), ZERO:{ *:[v2i16] })
PATTERN: (MipsSETCC_DSP:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b, SETLT:{ *:[Other] })
RESULT:  (PseudoPICK_PH:{ *:[v2i16] } (PseudoCMP_LT_PH:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b), (COPY_TO_REGCLASS:{ *:[v2i16] } (ADDiu:{ *:[i32] } ZERO:{ *:[i32] }, -1:{ *:[i32] }), DSPR:{ *:[i32] }), ZERO:{ *:[v2i16] })
PATTERN: (MipsSETCC_DSP:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b, SETLE:{ *:[Other] })
RESULT:  (PseudoPICK_PH:{ *:[v2i16] } (PseudoCMP_LE_PH:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b), (COPY_TO_REGCLASS:{ *:[v2i16] } (ADDiu:{ *:[i32] } ZERO:{ *:[i32] }, -1:{ *:[i32] }), DSPR:{ *:[i32] }), ZERO:{ *:[v2i16] })
PATTERN: (MipsSETCC_DSP:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b, SETNE:{ *:[Other] })
RESULT:  (PseudoPICK_PH:{ *:[v2i16] } (PseudoCMP_EQ_PH:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b), ZERO:{ *:[v2i16] }, (COPY_TO_REGCLASS:{ *:[v2i16] } (ADDiu:{ *:[i32] } ZERO:{ *:[i32] }, -1:{ *:[i32] }), DSPR:{ *:[i32] }))
PATTERN: (MipsSETCC_DSP:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b, SETGE:{ *:[Other] })
RESULT:  (PseudoPICK_PH:{ *:[v2i16] } (PseudoCMP_LT_PH:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b), ZERO:{ *:[v2i16] }, (COPY_TO_REGCLASS:{ *:[v2i16] } (ADDiu:{ *:[i32] } ZERO:{ *:[i32] }, -1:{ *:[i32] }), DSPR:{ *:[i32] }))
PATTERN: (MipsSETCC_DSP:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b, SETGT:{ *:[Other] })
RESULT:  (PseudoPICK_PH:{ *:[v2i16] } (PseudoCMP_LE_PH:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b), ZERO:{ *:[v2i16] }, (COPY_TO_REGCLASS:{ *:[v2i16] } (ADDiu:{ *:[i32] } ZERO:{ *:[i32] }, -1:{ *:[i32] }), DSPR:{ *:[i32] }))
PATTERN: (MipsSETCC_DSP:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b, SETEQ:{ *:[Other] })
RESULT:  (PseudoPICK_QB:{ *:[v4i8] } (PseudoCMPU_EQ_QB:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b), (COPY_TO_REGCLASS:{ *:[v4i8] } (ADDiu:{ *:[i32] } ZERO:{ *:[i32] }, -1:{ *:[i32] }), DSPR:{ *:[i32] }), ZERO:{ *:[v4i8] })
PATTERN: (MipsSETCC_DSP:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b, SETULT:{ *:[Other] })
RESULT:  (PseudoPICK_QB:{ *:[v4i8] } (PseudoCMPU_LT_QB:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b), (COPY_TO_REGCLASS:{ *:[v4i8] } (ADDiu:{ *:[i32] } ZERO:{ *:[i32] }, -1:{ *:[i32] }), DSPR:{ *:[i32] }), ZERO:{ *:[v4i8] })
PATTERN: (MipsSETCC_DSP:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b, SETULE:{ *:[Other] })
RESULT:  (PseudoPICK_QB:{ *:[v4i8] } (PseudoCMPU_LE_QB:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b), (COPY_TO_REGCLASS:{ *:[v4i8] } (ADDiu:{ *:[i32] } ZERO:{ *:[i32] }, -1:{ *:[i32] }), DSPR:{ *:[i32] }), ZERO:{ *:[v4i8] })
PATTERN: (MipsSETCC_DSP:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b, SETNE:{ *:[Other] })
RESULT:  (PseudoPICK_QB:{ *:[v4i8] } (PseudoCMPU_EQ_QB:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b), ZERO:{ *:[v4i8] }, (COPY_TO_REGCLASS:{ *:[v4i8] } (ADDiu:{ *:[i32] } ZERO:{ *:[i32] }, -1:{ *:[i32] }), DSPR:{ *:[i32] }))
PATTERN: (MipsSETCC_DSP:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b, SETUGE:{ *:[Other] })
RESULT:  (PseudoPICK_QB:{ *:[v4i8] } (PseudoCMPU_LT_QB:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b), ZERO:{ *:[v4i8] }, (COPY_TO_REGCLASS:{ *:[v4i8] } (ADDiu:{ *:[i32] } ZERO:{ *:[i32] }, -1:{ *:[i32] }), DSPR:{ *:[i32] }))
PATTERN: (MipsSETCC_DSP:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b, SETUGT:{ *:[Other] })
RESULT:  (PseudoPICK_QB:{ *:[v4i8] } (PseudoCMPU_LE_QB:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b), ZERO:{ *:[v4i8] }, (COPY_TO_REGCLASS:{ *:[v4i8] } (ADDiu:{ *:[i32] } ZERO:{ *:[i32] }, -1:{ *:[i32] }), DSPR:{ *:[i32] }))
PATTERN: (MipsSELECT_CC_DSP:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b, v2i16:{ *:[v2i16] }:$c, v2i16:{ *:[v2i16] }:$d, SETEQ:{ *:[Other] })
RESULT:  (PseudoPICK_PH:{ *:[v2i16] } (PseudoCMP_EQ_PH:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b), ?:{ *:[v2i16] }:$c, ?:{ *:[v2i16] }:$d)
PATTERN: (MipsSELECT_CC_DSP:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b, v2i16:{ *:[v2i16] }:$c, v2i16:{ *:[v2i16] }:$d, SETLT:{ *:[Other] })
RESULT:  (PseudoPICK_PH:{ *:[v2i16] } (PseudoCMP_LT_PH:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b), ?:{ *:[v2i16] }:$c, ?:{ *:[v2i16] }:$d)
PATTERN: (MipsSELECT_CC_DSP:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b, v2i16:{ *:[v2i16] }:$c, v2i16:{ *:[v2i16] }:$d, SETLE:{ *:[Other] })
RESULT:  (PseudoPICK_PH:{ *:[v2i16] } (PseudoCMP_LE_PH:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b), ?:{ *:[v2i16] }:$c, ?:{ *:[v2i16] }:$d)
PATTERN: (MipsSELECT_CC_DSP:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b, v2i16:{ *:[v2i16] }:$c, v2i16:{ *:[v2i16] }:$d, SETNE:{ *:[Other] })
RESULT:  (PseudoPICK_PH:{ *:[v2i16] } (PseudoCMP_EQ_PH:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b), ?:{ *:[v2i16] }:$d, ?:{ *:[v2i16] }:$c)
PATTERN: (MipsSELECT_CC_DSP:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b, v2i16:{ *:[v2i16] }:$c, v2i16:{ *:[v2i16] }:$d, SETGE:{ *:[Other] })
RESULT:  (PseudoPICK_PH:{ *:[v2i16] } (PseudoCMP_LT_PH:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b), ?:{ *:[v2i16] }:$d, ?:{ *:[v2i16] }:$c)
PATTERN: (MipsSELECT_CC_DSP:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b, v2i16:{ *:[v2i16] }:$c, v2i16:{ *:[v2i16] }:$d, SETGT:{ *:[Other] })
RESULT:  (PseudoPICK_PH:{ *:[v2i16] } (PseudoCMP_LE_PH:{ *:[v2i16] } v2i16:{ *:[v2i16] }:$a, v2i16:{ *:[v2i16] }:$b), ?:{ *:[v2i16] }:$d, ?:{ *:[v2i16] }:$c)
PATTERN: (MipsSELECT_CC_DSP:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b, v4i8:{ *:[v4i8] }:$c, v4i8:{ *:[v4i8] }:$d, SETEQ:{ *:[Other] })
RESULT:  (PseudoPICK_QB:{ *:[v4i8] } (PseudoCMPU_EQ_QB:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b), ?:{ *:[v4i8] }:$c, ?:{ *:[v4i8] }:$d)
PATTERN: (MipsSELECT_CC_DSP:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b, v4i8:{ *:[v4i8] }:$c, v4i8:{ *:[v4i8] }:$d, SETULT:{ *:[Other] })
RESULT:  (PseudoPICK_QB:{ *:[v4i8] } (PseudoCMPU_LT_QB:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b), ?:{ *:[v4i8] }:$c, ?:{ *:[v4i8] }:$d)
PATTERN: (MipsSELECT_CC_DSP:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b, v4i8:{ *:[v4i8] }:$c, v4i8:{ *:[v4i8] }:$d, SETULE:{ *:[Other] })
RESULT:  (PseudoPICK_QB:{ *:[v4i8] } (PseudoCMPU_LE_QB:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b), ?:{ *:[v4i8] }:$c, ?:{ *:[v4i8] }:$d)
PATTERN: (MipsSELECT_CC_DSP:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b, v4i8:{ *:[v4i8] }:$c, v4i8:{ *:[v4i8] }:$d, SETNE:{ *:[Other] })
RESULT:  (PseudoPICK_QB:{ *:[v4i8] } (PseudoCMPU_EQ_QB:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b), ?:{ *:[v4i8] }:$d, ?:{ *:[v4i8] }:$c)
PATTERN: (MipsSELECT_CC_DSP:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b, v4i8:{ *:[v4i8] }:$c, v4i8:{ *:[v4i8] }:$d, SETUGE:{ *:[Other] })
RESULT:  (PseudoPICK_QB:{ *:[v4i8] } (PseudoCMPU_LT_QB:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b), ?:{ *:[v4i8] }:$d, ?:{ *:[v4i8] }:$c)
PATTERN: (MipsSELECT_CC_DSP:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b, v4i8:{ *:[v4i8] }:$c, v4i8:{ *:[v4i8] }:$d, SETUGT:{ *:[Other] })
RESULT:  (PseudoPICK_QB:{ *:[v4i8] } (PseudoCMPU_LE_QB:{ *:[v4i8] } v4i8:{ *:[v4i8] }:$a, v4i8:{ *:[v4i8] }:$b), ?:{ *:[v4i8] }:$d, ?:{ *:[v4i8] }:$c)
PATTERN: (MipsEXTP:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$shift, ACC64DSP:{ *:[Untyped] }:$ac)
RESULT:  (EXTP:{ *:[i32] } ACC64DSP:{ *:[Untyped] }:$ac, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$shift)
PATTERN: (MipsEXTP:{ *:[i32] } GPR32:{ *:[i32] }:$rs, ACC64DSP:{ *:[Untyped] }:$ac)
RESULT:  (EXTPV:{ *:[i32] } ACC64DSP:{ *:[Untyped] }:$ac, GPR32:{ *:[i32] }:$rs)
PATTERN: (MipsEXTPDP:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$shift, ACC64DSP:{ *:[Untyped] }:$ac)
RESULT:  (EXTPDP:{ *:[i32] } ACC64DSP:{ *:[Untyped] }:$ac, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$shift)
PATTERN: (MipsEXTPDP:{ *:[i32] } GPR32:{ *:[i32] }:$rs, ACC64DSP:{ *:[Untyped] }:$ac)
RESULT:  (EXTPDPV:{ *:[i32] } ACC64DSP:{ *:[Untyped] }:$ac, GPR32:{ *:[i32] }:$rs)
PATTERN: (MipsEXTR_W:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$shift, ACC64DSP:{ *:[Untyped] }:$ac)
RESULT:  (EXTR_W:{ *:[i32] } ACC64DSP:{ *:[Untyped] }:$ac, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$shift)
PATTERN: (MipsEXTR_W:{ *:[i32] } GPR32:{ *:[i32] }:$rs, ACC64DSP:{ *:[Untyped] }:$ac)
RESULT:  (EXTRV_W:{ *:[i32] } ACC64DSP:{ *:[Untyped] }:$ac, GPR32:{ *:[i32] }:$rs)
PATTERN: (MipsEXTR_R_W:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$shift, ACC64DSP:{ *:[Untyped] }:$ac)
RESULT:  (EXTR_R_W:{ *:[i32] } ACC64DSP:{ *:[Untyped] }:$ac, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$shift)
PATTERN: (MipsEXTR_R_W:{ *:[i32] } GPR32:{ *:[i32] }:$rs, ACC64DSP:{ *:[Untyped] }:$ac)
RESULT:  (EXTRV_R_W:{ *:[i32] } ACC64DSP:{ *:[Untyped] }:$ac, GPR32:{ *:[i32] }:$rs)
PATTERN: (MipsEXTR_RS_W:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$shift, ACC64DSP:{ *:[Untyped] }:$ac)
RESULT:  (EXTR_RS_W:{ *:[i32] } ACC64DSP:{ *:[Untyped] }:$ac, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$shift)
PATTERN: (MipsEXTR_RS_W:{ *:[i32] } GPR32:{ *:[i32] }:$rs, ACC64DSP:{ *:[Untyped] }:$ac)
RESULT:  (EXTRV_RS_W:{ *:[i32] } ACC64DSP:{ *:[Untyped] }:$ac, GPR32:{ *:[i32] }:$rs)
PATTERN: (MipsEXTR_S_H:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$shift, ACC64DSP:{ *:[Untyped] }:$ac)
RESULT:  (EXTR_S_H:{ *:[i32] } ACC64DSP:{ *:[Untyped] }:$ac, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$shift)
PATTERN: (MipsEXTR_S_H:{ *:[i32] } GPR32:{ *:[i32] }:$rs, ACC64DSP:{ *:[Untyped] }:$ac)
RESULT:  (EXTRV_S_H:{ *:[i32] } ACC64DSP:{ *:[Untyped] }:$ac, GPR32:{ *:[i32] }:$rs)
PATTERN: (ld:{ *:[i32] } (add:{ *:[i32] } i32:{ *:[i32] }:$base, i32:{ *:[i32] }:$index))<<P:Predicate_unindexedload>><<P:Predicate_zextload>><<P:Predicate_zextloadi8>>
RESULT:  (LBUX:{ *:[i32] } i32:{ *:[i32] }:$base, i32:{ *:[i32] }:$index)
PATTERN: (ld:{ *:[i32] } (add:{ *:[i32] } i32:{ *:[i32] }:$base, i32:{ *:[i32] }:$index))<<P:Predicate_unindexedload>><<P:Predicate_sextload>><<P:Predicate_sextloadi16>>
RESULT:  (LHX:{ *:[i32] } i32:{ *:[i32] }:$base, i32:{ *:[i32] }:$index)
PATTERN: (ld:{ *:[i32] } (add:{ *:[i32] } i32:{ *:[i32] }:$base, i32:{ *:[i32] }:$index))<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LWX:{ *:[i32] } i32:{ *:[i32] }:$base, i32:{ *:[i32] }:$index)
PATTERN: (fsub:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$wd, (fmul:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt))
RESULT:  (FMSUB_W:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$wd, MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (fsub:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$wd, (fmul:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt))
RESULT:  (FMSUB_D:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$wd, MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (fadd:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$wd, (fmul:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt))
RESULT:  (FMADD_W:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$wd, MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (fadd:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$wd, (fmul:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt))
RESULT:  (FMADD_D:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$wd, MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (extractelt:{ *:[i32] } MSA128W:{ *:[v4i32] }:$ws, (imm:{ *:[i32] })<<P:Predicate_immZExt4>>:$idx)
RESULT:  (COPY_S_W:{ *:[i32] } MSA128W:{ *:[v4i32] }:$ws, (imm:{ *:[i32] })<<P:Predicate_immZExt4>>:$idx)
PATTERN: (ld:{ *:[v8f16] } addrimm10lsl1:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LD_H:{ *:[v8f16] } addrimm10lsl1:{ *:[iPTR] }:$addr)
PATTERN: (ld:{ *:[v4f32] } addrimm10lsl2:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LD_W:{ *:[v4f32] } addrimm10lsl2:{ *:[iPTR] }:$addr)
PATTERN: (ld:{ *:[v2f64] } addrimm10lsl3:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LD_D:{ *:[v2f64] } addrimm10lsl3:{ *:[iPTR] }:$addr)
PATTERN: (bitconvert:{ *:[v8i16] } v8f16:{ *:[v8f16] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v8i16] } v8f16:{ *:[v8f16] }:$src, MSA128H:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v4i32] } v4f32:{ *:[v4f32] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v4i32] } v4f32:{ *:[v4f32] }:$src, MSA128W:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v2i64] } v2f64:{ *:[v2f64] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v2i64] } v2f64:{ *:[v2f64] }:$src, MSA128D:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v8f16] } v8i16:{ *:[v8i16] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v8f16] } v8i16:{ *:[v8i16] }:$src, MSA128H:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v4f32] } v4i32:{ *:[v4i32] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v4f32] } v4i32:{ *:[v4i32] }:$src, MSA128W:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v2f64] } v2i64:{ *:[v2i64] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v2f64] } v2i64:{ *:[v2i64] }:$src, MSA128D:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v16i8] } v8i16:{ *:[v8i16] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v16i8] } v8i16:{ *:[v8i16] }:$src, MSA128B:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v16i8] } v4i32:{ *:[v4i32] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v16i8] } v4i32:{ *:[v4i32] }:$src, MSA128B:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v16i8] } v2i64:{ *:[v2i64] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v16i8] } v2i64:{ *:[v2i64] }:$src, MSA128B:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v16i8] } v8f16:{ *:[v8f16] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v16i8] } v8f16:{ *:[v8f16] }:$src, MSA128B:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v16i8] } v4f32:{ *:[v4f32] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v16i8] } v4f32:{ *:[v4f32] }:$src, MSA128B:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v16i8] } v2f64:{ *:[v2f64] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v16i8] } v2f64:{ *:[v2f64] }:$src, MSA128B:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v8i16] } v16i8:{ *:[v16i8] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v8i16] } v16i8:{ *:[v16i8] }:$src, MSA128H:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v8i16] } v4i32:{ *:[v4i32] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v8i16] } v4i32:{ *:[v4i32] }:$src, MSA128H:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v8i16] } v2i64:{ *:[v2i64] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v8i16] } v2i64:{ *:[v2i64] }:$src, MSA128H:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v8i16] } v4f32:{ *:[v4f32] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v8i16] } v4f32:{ *:[v4f32] }:$src, MSA128H:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v8i16] } v2f64:{ *:[v2f64] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v8i16] } v2f64:{ *:[v2f64] }:$src, MSA128H:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v4i32] } v16i8:{ *:[v16i8] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v4i32] } v16i8:{ *:[v16i8] }:$src, MSA128W:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v4i32] } v8i16:{ *:[v8i16] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v4i32] } v8i16:{ *:[v8i16] }:$src, MSA128W:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v4i32] } v2i64:{ *:[v2i64] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v4i32] } v2i64:{ *:[v2i64] }:$src, MSA128W:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v4i32] } v8f16:{ *:[v8f16] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v4i32] } v8f16:{ *:[v8f16] }:$src, MSA128W:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v4i32] } v2f64:{ *:[v2f64] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v4i32] } v2f64:{ *:[v2f64] }:$src, MSA128W:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v2i64] } v16i8:{ *:[v16i8] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v2i64] } v16i8:{ *:[v16i8] }:$src, MSA128D:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v2i64] } v8i16:{ *:[v8i16] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v2i64] } v8i16:{ *:[v8i16] }:$src, MSA128D:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v2i64] } v4i32:{ *:[v4i32] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v2i64] } v4i32:{ *:[v4i32] }:$src, MSA128D:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v2i64] } v8f16:{ *:[v8f16] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v2i64] } v8f16:{ *:[v8f16] }:$src, MSA128D:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v2i64] } v4f32:{ *:[v4f32] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v2i64] } v4f32:{ *:[v4f32] }:$src, MSA128D:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v4f32] } v16i8:{ *:[v16i8] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v4f32] } v16i8:{ *:[v16i8] }:$src, MSA128W:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v4f32] } v8i16:{ *:[v8i16] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v4f32] } v8i16:{ *:[v8i16] }:$src, MSA128W:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v4f32] } v2i64:{ *:[v2i64] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v4f32] } v2i64:{ *:[v2i64] }:$src, MSA128W:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v4f32] } v8f16:{ *:[v8f16] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v4f32] } v8f16:{ *:[v8f16] }:$src, MSA128W:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v4f32] } v2f64:{ *:[v2f64] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v4f32] } v2f64:{ *:[v2f64] }:$src, MSA128W:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v2f64] } v16i8:{ *:[v16i8] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v2f64] } v16i8:{ *:[v16i8] }:$src, MSA128D:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v2f64] } v8i16:{ *:[v8i16] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v2f64] } v8i16:{ *:[v8i16] }:$src, MSA128D:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v2f64] } v4i32:{ *:[v4i32] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v2f64] } v4i32:{ *:[v4i32] }:$src, MSA128D:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v2f64] } v8f16:{ *:[v8f16] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v2f64] } v8f16:{ *:[v8f16] }:$src, MSA128D:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v2f64] } v4f32:{ *:[v4f32] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v2f64] } v4f32:{ *:[v4f32] }:$src, MSA128D:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v8i16] } v16i8:{ *:[v16i8] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v8i16] } (SHF_B:{ *:[v16i8] } (COPY_TO_REGCLASS:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$src, MSA128B:{ *:[i32] }), 177:{ *:[i32] }), MSA128H:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v8f16] } v16i8:{ *:[v16i8] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v8f16] } (SHF_B:{ *:[v16i8] } (COPY_TO_REGCLASS:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$src, MSA128B:{ *:[i32] }), 177:{ *:[i32] }), MSA128H:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v4i32] } v16i8:{ *:[v16i8] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v4i32] } (SHF_B:{ *:[v16i8] } (COPY_TO_REGCLASS:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$src, MSA128B:{ *:[i32] }), 27:{ *:[i32] }), MSA128W:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v4f32] } v16i8:{ *:[v16i8] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v4f32] } (SHF_B:{ *:[v16i8] } (COPY_TO_REGCLASS:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$src, MSA128B:{ *:[i32] }), 27:{ *:[i32] }), MSA128W:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v2i64] } v16i8:{ *:[v16i8] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v2i64] } (SHF_W:{ *:[v4i32] } (COPY_TO_REGCLASS:{ *:[v4i32] } (SHF_B:{ *:[v16i8] } (COPY_TO_REGCLASS:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$src, MSA128B:{ *:[i32] }), 27:{ *:[i32] }), MSA128W:{ *:[i32] }), 177:{ *:[i32] }), MSA128D:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v2f64] } v16i8:{ *:[v16i8] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v2f64] } (SHF_W:{ *:[v4i32] } (COPY_TO_REGCLASS:{ *:[v4i32] } (SHF_B:{ *:[v16i8] } (COPY_TO_REGCLASS:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$src, MSA128B:{ *:[i32] }), 27:{ *:[i32] }), MSA128W:{ *:[i32] }), 177:{ *:[i32] }), MSA128D:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v16i8] } v8i16:{ *:[v8i16] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v16i8] } (SHF_B:{ *:[v16i8] } (COPY_TO_REGCLASS:{ *:[v16i8] } v8i16:{ *:[v8i16] }:$src, MSA128B:{ *:[i32] }), 177:{ *:[i32] }), MSA128B:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v4i32] } v8i16:{ *:[v8i16] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v4i32] } (SHF_H:{ *:[v8i16] } (COPY_TO_REGCLASS:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$src, MSA128H:{ *:[i32] }), 177:{ *:[i32] }), MSA128W:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v4f32] } v8i16:{ *:[v8i16] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v4f32] } (SHF_H:{ *:[v8i16] } (COPY_TO_REGCLASS:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$src, MSA128H:{ *:[i32] }), 177:{ *:[i32] }), MSA128W:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v2i64] } v8i16:{ *:[v8i16] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v2i64] } (SHF_H:{ *:[v8i16] } (COPY_TO_REGCLASS:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$src, MSA128H:{ *:[i32] }), 27:{ *:[i32] }), MSA128D:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v2f64] } v8i16:{ *:[v8i16] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v2f64] } (SHF_H:{ *:[v8i16] } (COPY_TO_REGCLASS:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$src, MSA128H:{ *:[i32] }), 27:{ *:[i32] }), MSA128D:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v16i8] } v8f16:{ *:[v8f16] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v16i8] } (SHF_B:{ *:[v16i8] } (COPY_TO_REGCLASS:{ *:[v16i8] } v8f16:{ *:[v8f16] }:$src, MSA128B:{ *:[i32] }), 177:{ *:[i32] }), MSA128B:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v4i32] } v8f16:{ *:[v8f16] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v4i32] } (SHF_H:{ *:[v8i16] } (COPY_TO_REGCLASS:{ *:[v8i16] } v8f16:{ *:[v8f16] }:$src, MSA128H:{ *:[i32] }), 177:{ *:[i32] }), MSA128W:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v4f32] } v8f16:{ *:[v8f16] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v4f32] } (SHF_H:{ *:[v8i16] } (COPY_TO_REGCLASS:{ *:[v8i16] } v8f16:{ *:[v8f16] }:$src, MSA128H:{ *:[i32] }), 177:{ *:[i32] }), MSA128W:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v2i64] } v8f16:{ *:[v8f16] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v2i64] } (SHF_H:{ *:[v8i16] } (COPY_TO_REGCLASS:{ *:[v8i16] } v8f16:{ *:[v8f16] }:$src, MSA128H:{ *:[i32] }), 27:{ *:[i32] }), MSA128D:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v2f64] } v8f16:{ *:[v8f16] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v2f64] } (SHF_H:{ *:[v8i16] } (COPY_TO_REGCLASS:{ *:[v8i16] } v8f16:{ *:[v8f16] }:$src, MSA128H:{ *:[i32] }), 27:{ *:[i32] }), MSA128D:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v16i8] } v4i32:{ *:[v4i32] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v16i8] } (SHF_B:{ *:[v16i8] } (COPY_TO_REGCLASS:{ *:[v16i8] } v4i32:{ *:[v4i32] }:$src, MSA128B:{ *:[i32] }), 27:{ *:[i32] }), MSA128B:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v8i16] } v4i32:{ *:[v4i32] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v8i16] } (SHF_H:{ *:[v8i16] } (COPY_TO_REGCLASS:{ *:[v8i16] } v4i32:{ *:[v4i32] }:$src, MSA128H:{ *:[i32] }), 177:{ *:[i32] }), MSA128H:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v8f16] } v4i32:{ *:[v4i32] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v8f16] } (SHF_H:{ *:[v8i16] } (COPY_TO_REGCLASS:{ *:[v8i16] } v4i32:{ *:[v4i32] }:$src, MSA128H:{ *:[i32] }), 177:{ *:[i32] }), MSA128H:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v2i64] } v4i32:{ *:[v4i32] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v2i64] } (SHF_W:{ *:[v4i32] } (COPY_TO_REGCLASS:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$src, MSA128W:{ *:[i32] }), 177:{ *:[i32] }), MSA128D:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v2f64] } v4i32:{ *:[v4i32] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v2f64] } (SHF_W:{ *:[v4i32] } (COPY_TO_REGCLASS:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$src, MSA128W:{ *:[i32] }), 177:{ *:[i32] }), MSA128D:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v16i8] } v4f32:{ *:[v4f32] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v16i8] } (SHF_B:{ *:[v16i8] } (COPY_TO_REGCLASS:{ *:[v16i8] } v4f32:{ *:[v4f32] }:$src, MSA128B:{ *:[i32] }), 27:{ *:[i32] }), MSA128B:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v8i16] } v4f32:{ *:[v4f32] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v8i16] } (SHF_H:{ *:[v8i16] } (COPY_TO_REGCLASS:{ *:[v8i16] } v4f32:{ *:[v4f32] }:$src, MSA128H:{ *:[i32] }), 177:{ *:[i32] }), MSA128H:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v8f16] } v4f32:{ *:[v4f32] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v8f16] } (SHF_H:{ *:[v8i16] } (COPY_TO_REGCLASS:{ *:[v8i16] } v4f32:{ *:[v4f32] }:$src, MSA128H:{ *:[i32] }), 177:{ *:[i32] }), MSA128H:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v2i64] } v4f32:{ *:[v4f32] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v2i64] } (SHF_W:{ *:[v4i32] } (COPY_TO_REGCLASS:{ *:[v4i32] } v4f32:{ *:[v4f32] }:$src, MSA128W:{ *:[i32] }), 177:{ *:[i32] }), MSA128D:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v2f64] } v4f32:{ *:[v4f32] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v2f64] } (SHF_W:{ *:[v4i32] } (COPY_TO_REGCLASS:{ *:[v4i32] } v4f32:{ *:[v4f32] }:$src, MSA128W:{ *:[i32] }), 177:{ *:[i32] }), MSA128D:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v16i8] } v2i64:{ *:[v2i64] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v16i8] } (SHF_W:{ *:[v4i32] } (COPY_TO_REGCLASS:{ *:[v4i32] } (SHF_B:{ *:[v16i8] } (COPY_TO_REGCLASS:{ *:[v16i8] } v2i64:{ *:[v2i64] }:$src, MSA128B:{ *:[i32] }), 27:{ *:[i32] }), MSA128W:{ *:[i32] }), 177:{ *:[i32] }), MSA128B:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v8i16] } v2i64:{ *:[v2i64] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v8i16] } (SHF_H:{ *:[v8i16] } (COPY_TO_REGCLASS:{ *:[v8i16] } v2i64:{ *:[v2i64] }:$src, MSA128H:{ *:[i32] }), 27:{ *:[i32] }), MSA128H:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v8f16] } v2i64:{ *:[v2i64] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v8f16] } (SHF_H:{ *:[v8i16] } (COPY_TO_REGCLASS:{ *:[v8i16] } v2i64:{ *:[v2i64] }:$src, MSA128H:{ *:[i32] }), 27:{ *:[i32] }), MSA128H:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v4i32] } v2i64:{ *:[v2i64] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v4i32] } (SHF_W:{ *:[v4i32] } (COPY_TO_REGCLASS:{ *:[v4i32] } v2i64:{ *:[v2i64] }:$src, MSA128W:{ *:[i32] }), 177:{ *:[i32] }), MSA128W:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v4f32] } v2i64:{ *:[v2i64] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v4f32] } (SHF_W:{ *:[v4i32] } (COPY_TO_REGCLASS:{ *:[v4i32] } v2i64:{ *:[v2i64] }:$src, MSA128W:{ *:[i32] }), 177:{ *:[i32] }), MSA128W:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v16i8] } v2f64:{ *:[v2f64] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v16i8] } (SHF_W:{ *:[v4i32] } (COPY_TO_REGCLASS:{ *:[v4i32] } (SHF_B:{ *:[v16i8] } (COPY_TO_REGCLASS:{ *:[v16i8] } v2f64:{ *:[v2f64] }:$src, MSA128B:{ *:[i32] }), 27:{ *:[i32] }), MSA128W:{ *:[i32] }), 177:{ *:[i32] }), MSA128B:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v8i16] } v2f64:{ *:[v2f64] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v8i16] } (SHF_H:{ *:[v8i16] } (COPY_TO_REGCLASS:{ *:[v8i16] } v2f64:{ *:[v2f64] }:$src, MSA128H:{ *:[i32] }), 27:{ *:[i32] }), MSA128H:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v8f16] } v2f64:{ *:[v2f64] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v8f16] } (SHF_H:{ *:[v8i16] } (COPY_TO_REGCLASS:{ *:[v8i16] } v2f64:{ *:[v2f64] }:$src, MSA128H:{ *:[i32] }), 27:{ *:[i32] }), MSA128H:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v4i32] } v2f64:{ *:[v2f64] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v4i32] } (SHF_W:{ *:[v4i32] } (COPY_TO_REGCLASS:{ *:[v4i32] } v2f64:{ *:[v2f64] }:$src, MSA128W:{ *:[i32] }), 177:{ *:[i32] }), MSA128W:{ *:[i32] })
PATTERN: (bitconvert:{ *:[v4f32] } v2f64:{ *:[v2f64] }:$src)
RESULT:  (COPY_TO_REGCLASS:{ *:[v4f32] } (SHF_W:{ *:[v4i32] } (COPY_TO_REGCLASS:{ *:[v4i32] } v2f64:{ *:[v2f64] }:$src, MSA128W:{ *:[i32] }), 177:{ *:[i32] }), MSA128W:{ *:[i32] })
PATTERN: (MipsTruncIntFP:{ *:[f32] } MSA128F16:{ *:[f16] }:$ws)
RESULT:  (TRUNC_W_D64:{ *:[f32] } (MSA_FP_EXTEND_D_PSEUDO:{ *:[f64] } MSA128F16:{ *:[f16] }:$ws))
PATTERN: (MipsFPCmp MSA128F16:{ *:[f16] }:$ws, MSA128F16:{ *:[f16] }:$wt, (imm:{ *:[i32] }):$cond)
RESULT:  (FCMP_S32:{ *:[i32] } (MSA_FP_EXTEND_W_PSEUDO:{ *:[f32] } MSA128F16:{ *:[f16] }:$ws), (MSA_FP_EXTEND_W_PSEUDO:{ *:[f32] } MSA128F16:{ *:[f16] }:$wt), (imm:{ *:[i32] }):$cond)
PATTERN: (shl:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>)))
RESULT:  (SLL_B:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, v16i8:{ *:[v16i8] }:$wt)
PATTERN: (shl:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>)))
RESULT:  (SLL_H:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, v8i16:{ *:[v8i16] }:$wt)
PATTERN: (shl:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>)))
RESULT:  (SLL_W:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, v4i32:{ *:[v4i32] }:$wt)
PATTERN: (shl:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$wt, (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>))
RESULT:  (SLL_D:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, v2i64:{ *:[v2i64] }:$wt)
PATTERN: (xor:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>))))
RESULT:  (BNEG_B:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, v16i8:{ *:[v16i8] }:$wt)
PATTERN: (xor:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>))))
RESULT:  (BNEG_H:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, v8i16:{ *:[v8i16] }:$wt)
PATTERN: (xor:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>))))
RESULT:  (BNEG_W:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, v4i32:{ *:[v4i32] }:$wt)
PATTERN: (xor:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$wt, (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>)))
RESULT:  (BNEG_D:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, v2i64:{ *:[v2i64] }:$wt)
PATTERN: (srl:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>)))
RESULT:  (SRL_B:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, v16i8:{ *:[v16i8] }:$wt)
PATTERN: (srl:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>)))
RESULT:  (SRL_H:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, v8i16:{ *:[v8i16] }:$wt)
PATTERN: (srl:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>)))
RESULT:  (SRL_W:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, v4i32:{ *:[v4i32] }:$wt)
PATTERN: (srl:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$wt, (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>))
RESULT:  (SRL_D:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, v2i64:{ *:[v2i64] }:$wt)
PATTERN: (sra:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>)))
RESULT:  (SRA_B:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, v16i8:{ *:[v16i8] }:$wt)
PATTERN: (sra:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>)))
RESULT:  (SRA_H:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, v8i16:{ *:[v8i16] }:$wt)
PATTERN: (sra:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>)))
RESULT:  (SRA_W:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, v4i32:{ *:[v4i32] }:$wt)
PATTERN: (sra:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$wt, (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>))
RESULT:  (SRA_D:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, v2i64:{ *:[v2i64] }:$wt)
PATTERN: (or:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>))))
RESULT:  (BSET_B:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, v16i8:{ *:[v16i8] }:$wt)
PATTERN: (or:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>))))
RESULT:  (BSET_H:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, v8i16:{ *:[v8i16] }:$wt)
PATTERN: (or:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>))))
RESULT:  (BSET_W:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, v4i32:{ *:[v4i32] }:$wt)
PATTERN: (or:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$wt, (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>)))
RESULT:  (BSET_D:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, v2i64:{ *:[v2i64] }:$wt)
PATTERN: (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (xor:{ *:[v16i8] } (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>))), immAllOnesV:{ *:[v16i8] }))
RESULT:  (BCLR_B:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, v16i8:{ *:[v16i8] }:$wt)
PATTERN: (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (xor:{ *:[v8i16] } (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>))), immAllOnesV:{ *:[v8i16] }))
RESULT:  (BCLR_H:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, v8i16:{ *:[v8i16] }:$wt)
PATTERN: (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (xor:{ *:[v4i32] } (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>))), immAllOnesV:{ *:[v4i32] }))
RESULT:  (BCLR_W:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, v4i32:{ *:[v4i32] }:$wt)
PATTERN: (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (xor:{ *:[v2i64] } (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$wt, (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>)), (bitconvert:{ *:[v2i64] } immAllOnesV:{ *:[v4i32] })))
RESULT:  (BCLR_D:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, v2i64:{ *:[v2i64] }:$wt)
PATTERN: (MipsVExtractZExt:{ *:[i32] } MSA128W:{ *:[v4i32] }:$ws, (imm:{ *:[iPTR] })<<P:Predicate_immZExt2Ptr>>:$idx, i32:{ *:[Other] })
RESULT:  (COPY_S_W:{ *:[i32] } MSA128W:{ *:[v4i32] }:$ws, (imm:{ *:[i32] })<<P:Predicate_immZExt2>>:$idx)
PATTERN: (MipsVExtractZExt:{ *:[i32] } MSA128W:{ *:[v4f32] }:$ws, (imm:{ *:[iPTR] })<<P:Predicate_immZExt2Ptr>>:$idx, i32:{ *:[Other] })
RESULT:  (COPY_S_W:{ *:[i32] } MSA128W:{ *:[v4f32] }:$ws, (imm:{ *:[i32] })<<P:Predicate_immZExt2>>:$idx)
PATTERN: (MipsVExtractZExt:{ *:[i64] } MSA128D:{ *:[v2i64] }:$ws, (imm:{ *:[iPTR] })<<P:Predicate_immZExt1Ptr>>:$idx, i64:{ *:[Other] })
RESULT:  (COPY_S_D:{ *:[i64] } MSA128D:{ *:[v2i64] }:$ws, (imm:{ *:[i32] })<<P:Predicate_immZExt1>>:$idx)
PATTERN: (MipsVExtractZExt:{ *:[i64] } MSA128D:{ *:[v2f64] }:$ws, (imm:{ *:[iPTR] })<<P:Predicate_immZExt1Ptr>>:$idx, i64:{ *:[Other] })
RESULT:  (COPY_S_D:{ *:[i64] } MSA128D:{ *:[v2f64] }:$ws, (imm:{ *:[i32] })<<P:Predicate_immZExt1>>:$idx)
PATTERN: (MipsVExtractSExt:{ *:[i32] } v16i8:{ *:[v16i8] }:$ws, i32:{ *:[i32] }:$idx, i8:{ *:[Other] })
RESULT:  (SRA:{ *:[i32] } (COPY_TO_REGCLASS:{ *:[i32] } (EXTRACT_SUBREG:{ *:[i32] } (SPLAT_B:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, i32:{ *:[i32] }:$idx), sub_lo:{ *:[i32] }), GPR32:{ *:[i32] }), 24:{ *:[i32] })
PATTERN: (MipsVExtractSExt:{ *:[i32] } v8i16:{ *:[v8i16] }:$ws, i32:{ *:[i32] }:$idx, i16:{ *:[Other] })
RESULT:  (SRA:{ *:[i32] } (COPY_TO_REGCLASS:{ *:[i32] } (EXTRACT_SUBREG:{ *:[i32] } (SPLAT_H:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, i32:{ *:[i32] }:$idx), sub_lo:{ *:[i32] }), GPR32:{ *:[i32] }), 16:{ *:[i32] })
PATTERN: (MipsVExtractSExt:{ *:[i32] } v4i32:{ *:[v4i32] }:$ws, i32:{ *:[i32] }:$idx, i32:{ *:[Other] })
RESULT:  (COPY_TO_REGCLASS:{ *:[i32] } (EXTRACT_SUBREG:{ *:[i32] } (SPLAT_W:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, i32:{ *:[i32] }:$idx), sub_lo:{ *:[i32] }), GPR32:{ *:[i32] })
PATTERN: (MipsVExtractSExt:{ *:[i64] } v2i64:{ *:[v2i64] }:$ws, i32:{ *:[i32] }:$idx, i64:{ *:[Other] })
RESULT:  (COPY_TO_REGCLASS:{ *:[i64] } (EXTRACT_SUBREG:{ *:[i64] } (SPLAT_D:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, i32:{ *:[i32] }:$idx), sub_64:{ *:[i32] }), GPR64:{ *:[i32] })
PATTERN: (MipsVExtractZExt:{ *:[i32] } v16i8:{ *:[v16i8] }:$ws, i32:{ *:[i32] }:$idx, i8:{ *:[Other] })
RESULT:  (SRL:{ *:[i32] } (COPY_TO_REGCLASS:{ *:[i32] } (EXTRACT_SUBREG:{ *:[i32] } (SPLAT_B:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, i32:{ *:[i32] }:$idx), sub_lo:{ *:[i32] }), GPR32:{ *:[i32] }), 24:{ *:[i32] })
PATTERN: (MipsVExtractZExt:{ *:[i32] } v8i16:{ *:[v8i16] }:$ws, i32:{ *:[i32] }:$idx, i16:{ *:[Other] })
RESULT:  (SRL:{ *:[i32] } (COPY_TO_REGCLASS:{ *:[i32] } (EXTRACT_SUBREG:{ *:[i32] } (SPLAT_H:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, i32:{ *:[i32] }:$idx), sub_lo:{ *:[i32] }), GPR32:{ *:[i32] }), 16:{ *:[i32] })
PATTERN: (MipsVExtractZExt:{ *:[i32] } v4i32:{ *:[v4i32] }:$ws, i32:{ *:[i32] }:$idx, i32:{ *:[Other] })
RESULT:  (COPY_TO_REGCLASS:{ *:[i32] } (EXTRACT_SUBREG:{ *:[i32] } (SPLAT_W:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, i32:{ *:[i32] }:$idx), sub_lo:{ *:[i32] }), GPR32:{ *:[i32] })
PATTERN: (MipsVExtractZExt:{ *:[i64] } v2i64:{ *:[v2i64] }:$ws, i32:{ *:[i32] }:$idx, i64:{ *:[Other] })
RESULT:  (COPY_TO_REGCLASS:{ *:[i64] } (EXTRACT_SUBREG:{ *:[i64] } (SPLAT_D:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, i32:{ *:[i32] }:$idx), sub_64:{ *:[i32] }), GPR64:{ *:[i32] })
PATTERN: (vector_extract:{ *:[f32] } v4f32:{ *:[v4f32] }:$ws, i32:{ *:[i32] }:$idx)
RESULT:  (EXTRACT_SUBREG:{ *:[f32] } (SPLAT_W:{ *:[v4i32] } v4f32:{ *:[v4f32] }:$ws, i32:{ *:[i32] }:$idx), sub_lo:{ *:[i32] })
PATTERN: (vector_extract:{ *:[f64] } v2f64:{ *:[v2f64] }:$ws, i32:{ *:[i32] }:$idx)
RESULT:  (EXTRACT_SUBREG:{ *:[f64] } (SPLAT_D:{ *:[v2i64] } v2f64:{ *:[v2f64] }:$ws, i32:{ *:[i32] }:$idx), sub_64:{ *:[i32] })
PATTERN: (MipsVExtractSExt:{ *:[i32] } v16i8:{ *:[v16i8] }:$ws, i64:{ *:[i64] }:$idx, i8:{ *:[Other] })
RESULT:  (SRA:{ *:[i32] } (COPY_TO_REGCLASS:{ *:[i32] } (EXTRACT_SUBREG:{ *:[i32] } (SPLAT_B:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (COPY_TO_REGCLASS:{ *:[i32] } (EXTRACT_SUBREG:{ *:[i32] } i64:{ *:[i64] }:$idx, sub_32:{ *:[i32] }), GPR32:{ *:[i32] })), sub_lo:{ *:[i32] }), GPR32:{ *:[i32] }), 24:{ *:[i32] })
PATTERN: (MipsVExtractSExt:{ *:[i32] } v8i16:{ *:[v8i16] }:$ws, i64:{ *:[i64] }:$idx, i16:{ *:[Other] })
RESULT:  (SRA:{ *:[i32] } (COPY_TO_REGCLASS:{ *:[i32] } (EXTRACT_SUBREG:{ *:[i32] } (SPLAT_H:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (COPY_TO_REGCLASS:{ *:[i32] } (EXTRACT_SUBREG:{ *:[i32] } i64:{ *:[i64] }:$idx, sub_32:{ *:[i32] }), GPR32:{ *:[i32] })), sub_lo:{ *:[i32] }), GPR32:{ *:[i32] }), 16:{ *:[i32] })
PATTERN: (MipsVExtractSExt:{ *:[i32] } v4i32:{ *:[v4i32] }:$ws, i64:{ *:[i64] }:$idx, i32:{ *:[Other] })
RESULT:  (COPY_TO_REGCLASS:{ *:[i32] } (EXTRACT_SUBREG:{ *:[i32] } (SPLAT_W:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (COPY_TO_REGCLASS:{ *:[i32] } (EXTRACT_SUBREG:{ *:[i32] } i64:{ *:[i64] }:$idx, sub_32:{ *:[i32] }), GPR32:{ *:[i32] })), sub_lo:{ *:[i32] }), GPR32:{ *:[i32] })
PATTERN: (MipsVExtractSExt:{ *:[i64] } v2i64:{ *:[v2i64] }:$ws, i64:{ *:[i64] }:$idx, i64:{ *:[Other] })
RESULT:  (COPY_TO_REGCLASS:{ *:[i64] } (EXTRACT_SUBREG:{ *:[i64] } (SPLAT_D:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (COPY_TO_REGCLASS:{ *:[i32] } (EXTRACT_SUBREG:{ *:[i32] } i64:{ *:[i64] }:$idx, sub_32:{ *:[i32] }), GPR32:{ *:[i32] })), sub_64:{ *:[i32] }), GPR64:{ *:[i32] })
PATTERN: (MipsVExtractZExt:{ *:[i32] } v16i8:{ *:[v16i8] }:$ws, i64:{ *:[i64] }:$idx, i8:{ *:[Other] })
RESULT:  (SRL:{ *:[i32] } (COPY_TO_REGCLASS:{ *:[i32] } (EXTRACT_SUBREG:{ *:[i32] } (SPLAT_B:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (COPY_TO_REGCLASS:{ *:[i32] } (EXTRACT_SUBREG:{ *:[i32] } i64:{ *:[i64] }:$idx, sub_32:{ *:[i32] }), GPR32:{ *:[i32] })), sub_lo:{ *:[i32] }), GPR32:{ *:[i32] }), 24:{ *:[i32] })
PATTERN: (MipsVExtractZExt:{ *:[i32] } v8i16:{ *:[v8i16] }:$ws, i64:{ *:[i64] }:$idx, i16:{ *:[Other] })
RESULT:  (SRL:{ *:[i32] } (COPY_TO_REGCLASS:{ *:[i32] } (EXTRACT_SUBREG:{ *:[i32] } (SPLAT_H:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (COPY_TO_REGCLASS:{ *:[i32] } (EXTRACT_SUBREG:{ *:[i32] } i64:{ *:[i64] }:$idx, sub_32:{ *:[i32] }), GPR32:{ *:[i32] })), sub_lo:{ *:[i32] }), GPR32:{ *:[i32] }), 16:{ *:[i32] })
PATTERN: (MipsVExtractZExt:{ *:[i32] } v4i32:{ *:[v4i32] }:$ws, i64:{ *:[i64] }:$idx, i32:{ *:[Other] })
RESULT:  (COPY_TO_REGCLASS:{ *:[i32] } (EXTRACT_SUBREG:{ *:[i32] } (SPLAT_W:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (COPY_TO_REGCLASS:{ *:[i32] } (EXTRACT_SUBREG:{ *:[i32] } i64:{ *:[i64] }:$idx, sub_32:{ *:[i32] }), GPR32:{ *:[i32] })), sub_lo:{ *:[i32] }), GPR32:{ *:[i32] })
PATTERN: (MipsVExtractZExt:{ *:[i64] } v2i64:{ *:[v2i64] }:$ws, i64:{ *:[i64] }:$idx, i64:{ *:[Other] })
RESULT:  (COPY_TO_REGCLASS:{ *:[i64] } (EXTRACT_SUBREG:{ *:[i64] } (SPLAT_D:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (COPY_TO_REGCLASS:{ *:[i32] } (EXTRACT_SUBREG:{ *:[i32] } i64:{ *:[i64] }:$idx, sub_32:{ *:[i32] }), GPR32:{ *:[i32] })), sub_64:{ *:[i32] }), GPR64:{ *:[i32] })
PATTERN: (vector_extract:{ *:[f32] } v4f32:{ *:[v4f32] }:$ws, i64:{ *:[i64] }:$idx)
RESULT:  (EXTRACT_SUBREG:{ *:[f32] } (SPLAT_W:{ *:[v4i32] } v4f32:{ *:[v4f32] }:$ws, (COPY_TO_REGCLASS:{ *:[i32] } (EXTRACT_SUBREG:{ *:[i32] } i64:{ *:[i64] }:$idx, sub_32:{ *:[i32] }), GPR32:{ *:[i32] })), sub_lo:{ *:[i32] })
PATTERN: (vector_extract:{ *:[f64] } v2f64:{ *:[v2f64] }:$ws, i64:{ *:[i64] }:$idx)
RESULT:  (EXTRACT_SUBREG:{ *:[f64] } (SPLAT_D:{ *:[v2i64] } v2f64:{ *:[v2f64] }:$ws, (COPY_TO_REGCLASS:{ *:[i32] } (EXTRACT_SUBREG:{ *:[i32] } i64:{ *:[i64] }:$idx, sub_32:{ *:[i32] }), GPR32:{ *:[i32] })), sub_64:{ *:[i32] })
PATTERN: (vfsetcc:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$a, MSA128WOpnd:{ *:[v4f32] }:$b, SETEQ:{ *:[Other] })
RESULT:  (FCEQ_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$a, MSA128WOpnd:{ *:[v4f32] }:$b)
PATTERN: (vfsetcc:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$a, MSA128DOpnd:{ *:[v2f64] }:$b, SETEQ:{ *:[Other] })
RESULT:  (FCEQ_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$a, MSA128DOpnd:{ *:[v2f64] }:$b)
PATTERN: (vfsetcc:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$a, MSA128WOpnd:{ *:[v4f32] }:$b, SETLE:{ *:[Other] })
RESULT:  (FCLE_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$a, MSA128WOpnd:{ *:[v4f32] }:$b)
PATTERN: (vfsetcc:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$a, MSA128DOpnd:{ *:[v2f64] }:$b, SETLE:{ *:[Other] })
RESULT:  (FCLE_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$a, MSA128DOpnd:{ *:[v2f64] }:$b)
PATTERN: (vfsetcc:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$a, MSA128WOpnd:{ *:[v4f32] }:$b, SETLT:{ *:[Other] })
RESULT:  (FCLT_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$a, MSA128WOpnd:{ *:[v4f32] }:$b)
PATTERN: (vfsetcc:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$a, MSA128DOpnd:{ *:[v2f64] }:$b, SETLT:{ *:[Other] })
RESULT:  (FCLT_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$a, MSA128DOpnd:{ *:[v2f64] }:$b)
PATTERN: (vfsetcc:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$a, MSA128WOpnd:{ *:[v4f32] }:$b, SETNE:{ *:[Other] })
RESULT:  (FCNE_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4f32] }:$a, MSA128WOpnd:{ *:[v4f32] }:$b)
PATTERN: (vfsetcc:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$a, MSA128DOpnd:{ *:[v2f64] }:$b, SETNE:{ *:[Other] })
RESULT:  (FCNE_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2f64] }:$a, MSA128DOpnd:{ *:[v2f64] }:$b)
PATTERN: (MipsHi:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$in)
RESULT:  (LUi_MM:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$in)
PATTERN: (MipsHi:{ *:[i32] } (tblockaddress:{ *:[i32] }):$in)
RESULT:  (LUi_MM:{ *:[i32] } (tblockaddress:{ *:[i32] }):$in)
PATTERN: (MipsHi:{ *:[i32] } (tjumptable:{ *:[i32] }):$in)
RESULT:  (LUi_MM:{ *:[i32] } (tjumptable:{ *:[i32] }):$in)
PATTERN: (MipsHi:{ *:[i32] } (tconstpool:{ *:[i32] }):$in)
RESULT:  (LUi_MM:{ *:[i32] } (tconstpool:{ *:[i32] }):$in)
PATTERN: (MipsHi:{ *:[i32] } (texternalsym:{ *:[i32] }):$in)
RESULT:  (LUi_MM:{ *:[i32] } (texternalsym:{ *:[i32] }):$in)
PATTERN: (MipsLo:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$in)
RESULT:  (ADDiu_MM:{ *:[i32] } ZERO:{ *:[i32] }, (tglobaladdr:{ *:[i32] }):$in)
PATTERN: (MipsLo:{ *:[i32] } (tblockaddress:{ *:[i32] }):$in)
RESULT:  (ADDiu_MM:{ *:[i32] } ZERO:{ *:[i32] }, (tblockaddress:{ *:[i32] }):$in)
PATTERN: (MipsLo:{ *:[i32] } (tjumptable:{ *:[i32] }):$in)
RESULT:  (ADDiu_MM:{ *:[i32] } ZERO:{ *:[i32] }, (tjumptable:{ *:[i32] }):$in)
PATTERN: (MipsLo:{ *:[i32] } (tconstpool:{ *:[i32] }):$in)
RESULT:  (ADDiu_MM:{ *:[i32] } ZERO:{ *:[i32] }, (tconstpool:{ *:[i32] }):$in)
PATTERN: (MipsLo:{ *:[i32] } (tglobaltlsaddr:{ *:[i32] }):$in)
RESULT:  (ADDiu_MM:{ *:[i32] } ZERO:{ *:[i32] }, (tglobaltlsaddr:{ *:[i32] }):$in)
PATTERN: (MipsLo:{ *:[i32] } (texternalsym:{ *:[i32] }):$in)
RESULT:  (ADDiu_MM:{ *:[i32] } ZERO:{ *:[i32] }, (texternalsym:{ *:[i32] }):$in)
PATTERN: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$lo))
RESULT:  (ADDiu_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (tglobaladdr:{ *:[i32] }):$lo)
PATTERN: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tblockaddress:{ *:[i32] }):$lo))
RESULT:  (ADDiu_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (tblockaddress:{ *:[i32] }):$lo)
PATTERN: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tjumptable:{ *:[i32] }):$lo))
RESULT:  (ADDiu_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (tjumptable:{ *:[i32] }):$lo)
PATTERN: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tconstpool:{ *:[i32] }):$lo))
RESULT:  (ADDiu_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (tconstpool:{ *:[i32] }):$lo)
PATTERN: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (tglobaltlsaddr:{ *:[i32] }):$lo))
RESULT:  (ADDiu_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (tglobaltlsaddr:{ *:[i32] }):$lo)
PATTERN: (add:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (MipsLo:{ *:[i32] } (texternalsym:{ *:[i32] }):$lo))
RESULT:  (ADDiu_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (texternalsym:{ *:[i32] }):$lo)
PATTERN: (MipsGotHi:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$in)
RESULT:  (LUi_MM:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$in)
PATTERN: (MipsGotHi:{ *:[i32] } (texternalsym:{ *:[i32] }):$in)
RESULT:  (LUi_MM:{ *:[i32] } (texternalsym:{ *:[i32] }):$in)
PATTERN: (MipsTlsHi:{ *:[i32] } (tglobaltlsaddr:{ *:[i32] }):$in)
RESULT:  (LUi_MM:{ *:[i32] } (tglobaltlsaddr:{ *:[i32] }):$in)
PATTERN: (add:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (MipsGPRel:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$in))
RESULT:  (ADDiu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (tglobaladdr:{ *:[i32] }):$in)
PATTERN: (add:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (MipsGPRel:{ *:[i32] } (tconstpool:{ *:[i32] }):$in))
RESULT:  (ADDiu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (tconstpool:{ *:[i32] }):$in)
PATTERN: (MipsWrapper:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (tglobaladdr:{ *:[i32] }):$in)
RESULT:  (ADDiu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (tglobaladdr:{ *:[i32] }):$in)
PATTERN: (MipsWrapper:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (tconstpool:{ *:[i32] }):$in)
RESULT:  (ADDiu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (tconstpool:{ *:[i32] }):$in)
PATTERN: (MipsWrapper:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (texternalsym:{ *:[i32] }):$in)
RESULT:  (ADDiu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (texternalsym:{ *:[i32] }):$in)
PATTERN: (MipsWrapper:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (tblockaddress:{ *:[i32] }):$in)
RESULT:  (ADDiu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (tblockaddress:{ *:[i32] }):$in)
PATTERN: (MipsWrapper:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (tjumptable:{ *:[i32] }):$in)
RESULT:  (ADDiu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (tjumptable:{ *:[i32] }):$in)
PATTERN: (MipsWrapper:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (tglobaltlsaddr:{ *:[i32] }):$in)
RESULT:  (ADDiu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (tglobaltlsaddr:{ *:[i32] }):$in)
PATTERN: (atomic_load:{ *:[i32] } addr:{ *:[iPTR] }:$a)<<P:Predicate_atomic_load_8>>
RESULT:  (LB_MM:{ *:[i32] } addr:{ *:[i32] }:$a)
PATTERN: (atomic_load:{ *:[i32] } addr:{ *:[iPTR] }:$a)<<P:Predicate_atomic_load_16>>
RESULT:  (LH_MM:{ *:[i32] } addr:{ *:[iPTR] }:$a)
PATTERN: (atomic_load:{ *:[i32] } addr:{ *:[iPTR] }:$a)<<P:Predicate_atomic_load_32>>
RESULT:  (LW_MM:{ *:[i32] } addr:{ *:[iPTR] }:$a)
PATTERN: (imm:{ *:[i32] })<<P:Predicate_immLi16>>:$imm
RESULT:  (LI16_MM:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immLi16>>:$imm)
PATTERN: (imm:{ *:[i32] })<<P:Predicate_LUiORiPred>>:$imm
RESULT:  (ORi_MM:{ *:[i32] } (LUi_MM:{ *:[i32] } (HI16:{ *:[i32] } (imm:{ *:[i32] }):$imm)), (LO16:{ *:[i32] } (imm:{ *:[i32] }):$imm))
PATTERN: (imm:{ *:[i32] })<<P:Predicate_LUiPred>>:$imm
RESULT:  (LUi_MM:{ *:[i32] } (HI16:{ *:[i32] } (imm:{ *:[i32] }):$imm))
PATTERN: (imm:{ *:[i32] })<<P:Predicate_ORiPred>><<X:LO16>>:$imm
RESULT:  (ORi_MM:{ *:[i32] } ZERO:{ *:[i32] }, (imm:{ *:[i32] }):$imm)
PATTERN: (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$imm
RESULT:  (ADDiu_MM:{ *:[i32] } ZERO:{ *:[i32] }, (imm:{ *:[i32] }):$imm)
PATTERN: (xor:{ *:[i32] } GPRMM16:{ *:[i32] }:$in, -1:{ *:[i32] })
RESULT:  (NOT16_MM:{ *:[i32] } GPRMM16:{ *:[i32] }:$in)
PATTERN: (xor:{ *:[i32] } GPR32:{ *:[i32] }:$in, -1:{ *:[i32] })
RESULT:  (NOR_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$in, ZERO:{ *:[i32] })
PATTERN: (add:{ *:[i32] } GPRMM16:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immSExtAddiur2>>:$imm)
RESULT:  (ADDIUR2_MM:{ *:[i32] } GPRMM16:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immSExtAddiur2>>:$imm)
PATTERN: (add:{ *:[i32] } GPR32:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immSExtAddius5>>:$imm)
RESULT:  (ADDIUS5_MM:{ *:[i32] } GPR32:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immSExtAddius5>>:$imm)
PATTERN: (add:{ *:[i32] } GPR32:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$imm)
RESULT:  (ADDiu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$imm)
PATTERN: (and:{ *:[i32] } GPRMM16:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immZExtAndi16>>:$imm)
RESULT:  (ANDI16_MM:{ *:[i32] } GPRMM16:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immZExtAndi16>>:$imm)
PATTERN: (and:{ *:[i32] } GPR32:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immZExt16>><<X:LO16>>:$imm)
RESULT:  (ANDi_MM:{ *:[i32] } GPR32:{ *:[i32] }:$src, (LO16:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immZExt16>>:$imm))
PATTERN: (shl:{ *:[i32] } GPRMM16:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immZExt2Shift>>:$imm)
RESULT:  (SLL16_MM:{ *:[i32] } GPRMM16:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immZExt2Shift>>:$imm)
PATTERN: (shl:{ *:[i32] } GPR32:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$imm)
RESULT:  (SLL_MM:{ *:[i32] } GPR32:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$imm)
PATTERN: (shl:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs)
RESULT:  (SLLV_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs)
PATTERN: (srl:{ *:[i32] } GPRMM16:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immZExt2Shift>>:$imm)
RESULT:  (SRL16_MM:{ *:[i32] } GPRMM16:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immZExt2Shift>>:$imm)
PATTERN: (srl:{ *:[i32] } GPR32:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$imm)
RESULT:  (SRL_MM:{ *:[i32] } GPR32:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$imm)
PATTERN: (srl:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs)
RESULT:  (SRLV_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs)
PATTERN: (sra:{ *:[i32] } GPR32:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$imm)
RESULT:  (SRA_MM:{ *:[i32] } GPR32:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immZExt5>>:$imm)
PATTERN: (sra:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs)
RESULT:  (SRAV_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs)
PATTERN: (st GPRMM16:{ *:[i32] }:$src, addrimm4lsl2:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SW16_MM GPRMM16:{ *:[i32] }:$src, addrimm4lsl2:{ *:[i32] }:$addr)
PATTERN: (st GPR32:{ *:[i32] }:$src, addr:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SW_MM GPR32:{ *:[i32] }:$src, addr:{ *:[iPTR] }:$addr)
PATTERN: (ld:{ *:[i32] } addrimm4lsl2:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LW16_MM:{ *:[i32] } addrimm4lsl2:{ *:[i32] }:$addr)
PATTERN: (ld:{ *:[i32] } addr:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LW_MM:{ *:[i32] } addr:{ *:[iPTR] }:$addr)
PATTERN: (subc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs)
RESULT:  (SUBu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs)
PATTERN: (ld:{ *:[i32] } addr:{ *:[iPTR] }:$src)<<P:Predicate_unindexedload>><<P:Predicate_extload>><<P:Predicate_extloadi1>>
RESULT:  (LBu_MM:{ *:[i32] } addr:{ *:[i32] }:$src)
PATTERN: (ld:{ *:[i32] } addr:{ *:[iPTR] }:$src)<<P:Predicate_unindexedload>><<P:Predicate_extload>><<P:Predicate_extloadi8>>
RESULT:  (LBu_MM:{ *:[i32] } addr:{ *:[i32] }:$src)
PATTERN: (ld:{ *:[i32] } addr:{ *:[iPTR] }:$src)<<P:Predicate_unindexedload>><<P:Predicate_extload>><<P:Predicate_extloadi16>>
RESULT:  (LHu_MM:{ *:[i32] } addr:{ *:[iPTR] }:$src)
PATTERN: (ld:{ *:[i32] } addrRegImm:{ *:[iPTR] }:$a)<<P:Predicate_unindexedload>><<P:Predicate_sextload>><<P:Predicate_sextloadi16>>
RESULT:  (LH_MM:{ *:[i32] } addrRegImm:{ *:[iPTR] }:$a)
PATTERN: (bswap:{ *:[i32] } GPR32:{ *:[i32] }:$rt)
RESULT:  (ROTR_MM:{ *:[i32] } (WSBH_MM:{ *:[i32] } GPR32:{ *:[i32] }:$rt), 16:{ *:[i32] })
PATTERN: (MipsJmpLink (texternalsym:{ *:[i32] }):$dst)
RESULT:  (JAL_MM (texternalsym:{ *:[i32] }):$dst)
PATTERN: (MipsTailCall (tglobaladdr:{ *:[iPTR] }):$dst)
RESULT:  (TAILCALL_MM (tglobaladdr:{ *:[iPTR] }):$dst)
PATTERN: (MipsTailCall (texternalsym:{ *:[iPTR] }):$dst)
RESULT:  (TAILCALL_MM (texternalsym:{ *:[iPTR] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETNE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BNE_MM GPR32:{ *:[i32] }:$lhs, ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETEQ:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQ_MM GPR32:{ *:[i32] }:$lhs, ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETGE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQ_MM (SLT_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETUGE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQ_MM (SLTu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs, SETGE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQ_MM (SLTi_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs), ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs, SETUGE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQ_MM (SLTiu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs), ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETGT:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQ_MM (SLTi_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$rhs)), ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETUGT:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQ_MM (SLTiu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$rhs)), ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETLE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQ_MM (SLT_MM:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs), ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETULE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQ_MM (SLTu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs), ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond GPR32:{ *:[i32] }:$cond, (bb:{ *:[Other] }):$dst)
RESULT:  (BNE_MM GPR32:{ *:[i32] }:$cond, ZERO:{ *:[i32] }, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } i32:{ *:[i32] }:$lhs, 1:{ *:[i32] }, SETLT:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BLEZ_MM i32:{ *:[i32] }:$lhs, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } i32:{ *:[i32] }:$lhs, -1:{ *:[i32] }, SETGT:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BGEZ_MM i32:{ *:[i32] }:$lhs, (bb:{ *:[Other] }):$dst)
PATTERN: (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETEQ:{ *:[Other] })
RESULT:  (SLTiu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 1:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETNE:{ *:[Other] })
RESULT:  (SLTu_MM:{ *:[i32] } ZERO:{ *:[i32] }, GPR32:{ *:[i32] }:$lhs)
PATTERN: (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETEQ:{ *:[Other] })
RESULT:  (SLTiu_MM:{ *:[i32] } (XOR_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), 1:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETNE:{ *:[Other] })
RESULT:  (SLTu_MM:{ *:[i32] } ZERO:{ *:[i32] }, (XOR_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs))
PATTERN: (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETLE:{ *:[Other] })
RESULT:  (XORi_MM:{ *:[i32] } (SLT_MM:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs), 1:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETULE:{ *:[Other] })
RESULT:  (XORi_MM:{ *:[i32] } (SLTu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs), 1:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETGT:{ *:[Other] })
RESULT:  (SLT_MM:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs)
PATTERN: (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETUGT:{ *:[Other] })
RESULT:  (SLTu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs)
PATTERN: (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETGE:{ *:[Other] })
RESULT:  (XORi_MM:{ *:[i32] } (SLT_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), 1:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETUGE:{ *:[Other] })
RESULT:  (XORi_MM:{ *:[i32] } (SLTu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), 1:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs, SETGE:{ *:[Other] })
RESULT:  (XORi_MM:{ *:[i32] } (SLTi_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs), 1:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs, SETUGE:{ *:[Other] })
RESULT:  (XORi_MM:{ *:[i32] } (SLTiu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs), 1:{ *:[i32] })
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETGE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_MM:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLT_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETUGE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_MM:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLTu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs, SETGE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_MM:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLTi_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lh, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rh, SETUGE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_MM:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLTiu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lh, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rh), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETLE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_MM:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLT_MM:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETULE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_MM:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLTu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETGT:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_MM:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLTi_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$rhs)), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETUGT:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_MM:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLTiu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$rhs)), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETEQ:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_MM:{ *:[i32] } GPR32:{ *:[i32] }:$T, (XOR_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETEQ:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_MM:{ *:[i32] } GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immZExt16>><<X:LO16>>:$uimm16, SETEQ:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_MM:{ *:[i32] } GPR32:{ *:[i32] }:$T, (XORi_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (LO16:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immZExt16>>:$uimm16)), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETNE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVN_I_MM:{ *:[i32] } GPR32:{ *:[i32] }:$T, (XOR_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } GPR32:{ *:[i32] }:$cond, GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVN_I_MM:{ *:[i32] } GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$cond, GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETNE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVN_I_MM:{ *:[i32] } GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETGE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_MM:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLT_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETUGE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_MM:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLTu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs, SETGE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_MM:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLTi_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lh, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rh, SETUGE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_MM:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLTiu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lh, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rh), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETLE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_MM:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLT_MM:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETULE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_MM:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLTu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETGT:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_MM:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLTi_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$rhs)), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETUGT:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_MM:{ *:[i32] } GPR32:{ *:[i32] }:$T, (SLTiu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$rhs)), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETEQ:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_MM:{ *:[i32] } GPR32:{ *:[i32] }:$T, (XOR_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETEQ:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_MM:{ *:[i32] } GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immZExt16>><<X:LO16>>:$uimm16, SETEQ:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVZ_I_MM:{ *:[i32] } GPR32:{ *:[i32] }:$T, (XORi_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (LO16:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immZExt16>>:$uimm16)), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETNE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVN_I_MM:{ *:[i32] } GPR32:{ *:[i32] }:$T, (XOR_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } GPR32:{ *:[i32] }:$cond, GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVN_I_MM:{ *:[i32] } GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$cond, GPR32:{ *:[i32] }:$F)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETNE:{ *:[Other] }), GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$F)
RESULT:  (MOVN_I_MM:{ *:[i32] } GPR32:{ *:[i32] }:$T, GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$F)
PATTERN: (fneg:{ *:[f32] } (fadd:{ *:[f32] } (fmul:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft), FGR32Opnd:{ *:[f32] }:$fr))
RESULT:  (NMADD_S_MM:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fr, FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (fneg:{ *:[f32] } (fsub:{ *:[f32] } (fmul:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft), FGR32Opnd:{ *:[f32] }:$fr))
RESULT:  (NMSUB_S_MM:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fr, FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (fneg:{ *:[f64] } (fadd:{ *:[f64] } (fmul:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft), AFGR64Opnd:{ *:[f64] }:$fr))
RESULT:  (NMADD_D32_MM:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fr, AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fneg:{ *:[f64] } (fsub:{ *:[f64] } (fmul:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft), AFGR64Opnd:{ *:[f64] }:$fr))
RESULT:  (NMSUB_D32_MM:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fr, AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (ld:{ *:[f64] } addrRegImm:{ *:[iPTR] }:$a)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LDC1_MM:{ *:[f64] } addrRegImm:{ *:[i32] }:$a)
PATTERN: (st f64:{ *:[f64] }:$v, addrRegImm:{ *:[iPTR] }:$a)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SDC1_MM f64:{ *:[f64] }:$v, addrRegImm:{ *:[i32] }:$a)
PATTERN: (ld:{ *:[f32] } addrRegImm:{ *:[iPTR] }:$a)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LWC1_MM:{ *:[f32] } addrRegImm:{ *:[i32] }:$a)
PATTERN: (st f32:{ *:[f32] }:$v, addrRegImm:{ *:[iPTR] }:$a)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SWC1_MM f32:{ *:[f32] }:$v, addrRegImm:{ *:[i32] }:$a)
PATTERN: (MipsMTC1_D64:{ *:[f64] } GPR32Opnd:{ *:[i32] }:$src)
RESULT:  (MTC1_D64_MM:{ *:[f64] } GPR32Opnd:{ *:[i32] }:$src)
PATTERN: (fpimm:{ *:[f32] })<<P:Predicate_fpimm0>>
RESULT:  (MTC1_MM:{ *:[f32] } ZERO:{ *:[i32] })
PATTERN: (fpimm:{ *:[f32] })<<P:Predicate_fpimm0neg>>
RESULT:  (FNEG_S_MM:{ *:[f32] } (MTC1_MM:{ *:[f32] } ZERO:{ *:[i32] }))
PATTERN: (fpround:{ *:[f32] } FGR64Opnd:{ *:[f64] }:$src)
RESULT:  (CVT_S_D64_MM:{ *:[f32] } FGR64Opnd:{ *:[f64] }:$src)
PATTERN: (fpextend:{ *:[f64] } FGR32Opnd:{ *:[f32] }:$src)
RESULT:  (CVT_D64_S_MM:{ *:[f64] } FGR32Opnd:{ *:[f32] }:$src)
PATTERN: (fpround:{ *:[f32] } AFGR64Opnd:{ *:[f64] }:$src)
RESULT:  (CVT_S_D32_MM:{ *:[f32] } AFGR64Opnd:{ *:[f64] }:$src)
PATTERN: (fpextend:{ *:[f64] } FGR32Opnd:{ *:[f32] }:$src)
RESULT:  (CVT_D32_S_MM:{ *:[f64] } FGR32Opnd:{ *:[f32] }:$src)
PATTERN: (MipsTruncIntFP:{ *:[f32] } AFGR64Opnd:{ *:[f64] }:$src)
RESULT:  (TRUNC_W_MM:{ *:[f32] } AFGR64Opnd:{ *:[f64] }:$src)
PATTERN: (MipsTruncIntFP:{ *:[f32] } FGR64Opnd:{ *:[f64] }:$src)
RESULT:  (CVT_W_D64_MM:{ *:[f32] } FGR64Opnd:{ *:[f64] }:$src)
PATTERN: (MipsTruncIntFP:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$src)
RESULT:  (TRUNC_W_S_MM:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$src)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETGE:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I_S_MM:{ *:[f32] } FGR32:{ *:[f32] }:$T, (SLT_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETUGE:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I_S_MM:{ *:[f32] } FGR32:{ *:[f32] }:$T, (SLTu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs, SETGE:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I_S_MM:{ *:[f32] } FGR32:{ *:[f32] }:$T, (SLTi_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lh, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rh, SETUGE:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I_S_MM:{ *:[f32] } FGR32:{ *:[f32] }:$T, (SLTiu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lh, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rh), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETLE:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I_S_MM:{ *:[f32] } FGR32:{ *:[f32] }:$T, (SLT_MM:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETULE:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I_S_MM:{ *:[f32] } FGR32:{ *:[f32] }:$T, (SLTu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETGT:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I_S_MM:{ *:[f32] } FGR32:{ *:[f32] }:$T, (SLTi_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$rhs)), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETUGT:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I_S_MM:{ *:[f32] } FGR32:{ *:[f32] }:$T, (SLTiu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$rhs)), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETEQ:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I_S_MM:{ *:[f32] } FGR32:{ *:[f32] }:$T, (XOR_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETEQ:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVZ_I_S_MM:{ *:[f32] } FGR32:{ *:[f32] }:$T, GPR32:{ *:[i32] }:$lhs, FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETNE:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVN_I_S_MM:{ *:[f32] } FGR32:{ *:[f32] }:$T, (XOR_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } GPR32:{ *:[i32] }:$cond, FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVN_I_S_MM:{ *:[f32] } FGR32:{ *:[f32] }:$T, GPR32:{ *:[i32] }:$cond, FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f32] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETNE:{ *:[Other] }), FGR32:{ *:[f32] }:$T, FGR32:{ *:[f32] }:$F)
RESULT:  (MOVN_I_S_MM:{ *:[f32] } FGR32:{ *:[f32] }:$T, GPR32:{ *:[i32] }:$lhs, FGR32:{ *:[f32] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETGE:{ *:[Other] }), AFGR64:{ *:[f64] }:$T, AFGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D32_MM:{ *:[f64] } AFGR64:{ *:[f64] }:$T, (SLT_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), AFGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETUGE:{ *:[Other] }), AFGR64:{ *:[f64] }:$T, AFGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D32_MM:{ *:[f64] } AFGR64:{ *:[f64] }:$T, (SLTu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), AFGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs, SETGE:{ *:[Other] }), AFGR64:{ *:[f64] }:$T, AFGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D32_MM:{ *:[f64] } AFGR64:{ *:[f64] }:$T, (SLTi_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs), AFGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lh, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rh, SETUGE:{ *:[Other] }), AFGR64:{ *:[f64] }:$T, AFGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D32_MM:{ *:[f64] } AFGR64:{ *:[f64] }:$T, (SLTiu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lh, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rh), AFGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETLE:{ *:[Other] }), AFGR64:{ *:[f64] }:$T, AFGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D32_MM:{ *:[f64] } AFGR64:{ *:[f64] }:$T, (SLT_MM:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs), AFGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETULE:{ *:[Other] }), AFGR64:{ *:[f64] }:$T, AFGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D32_MM:{ *:[f64] } AFGR64:{ *:[f64] }:$T, (SLTu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs), AFGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETGT:{ *:[Other] }), AFGR64:{ *:[f64] }:$T, AFGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D32_MM:{ *:[f64] } AFGR64:{ *:[f64] }:$T, (SLTi_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$rhs)), AFGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETUGT:{ *:[Other] }), AFGR64:{ *:[f64] }:$T, AFGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D32_MM:{ *:[f64] } AFGR64:{ *:[f64] }:$T, (SLTiu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$rhs)), AFGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETEQ:{ *:[Other] }), AFGR64:{ *:[f64] }:$T, AFGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D32_MM:{ *:[f64] } AFGR64:{ *:[f64] }:$T, (XOR_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), AFGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETEQ:{ *:[Other] }), AFGR64:{ *:[f64] }:$T, AFGR64:{ *:[f64] }:$F)
RESULT:  (MOVZ_I_D32_MM:{ *:[f64] } AFGR64:{ *:[f64] }:$T, GPR32:{ *:[i32] }:$lhs, AFGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETNE:{ *:[Other] }), AFGR64:{ *:[f64] }:$T, AFGR64:{ *:[f64] }:$F)
RESULT:  (MOVN_I_D32_MM:{ *:[f64] } AFGR64:{ *:[f64] }:$T, (XOR_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), AFGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } GPR32:{ *:[i32] }:$cond, AFGR64:{ *:[f64] }:$T, AFGR64:{ *:[f64] }:$F)
RESULT:  (MOVN_I_D32_MM:{ *:[f64] } AFGR64:{ *:[f64] }:$T, GPR32:{ *:[i32] }:$cond, AFGR64:{ *:[f64] }:$F)
PATTERN: (select:{ *:[f64] } (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETNE:{ *:[Other] }), AFGR64:{ *:[f64] }:$T, AFGR64:{ *:[f64] }:$F)
RESULT:  (MOVN_I_D32_MM:{ *:[f64] } AFGR64:{ *:[f64] }:$T, GPR32:{ *:[i32] }:$lhs, AFGR64:{ *:[f64] }:$F)
PATTERN: (st GPRMM16:{ *:[i32] }:$src, addrimm4lsl2:{ *:[iPTR] }:$addr)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SW16_MMR6 GPRMM16:{ *:[i32] }:$src, addrimm4lsl2:{ *:[i32] }:$addr)
PATTERN: (subc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs)
RESULT:  (SUBU_MMR6:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs)
PATTERN: (select:{ *:[i32] } i32:{ *:[i32] }:$cond, i32:{ *:[i32] }:$t, i32:{ *:[i32] }:$f)
RESULT:  (OR_MM:{ *:[i32] } (SELNEZ_MMR6:{ *:[i32] } i32:{ *:[i32] }:$t, i32:{ *:[i32] }:$cond), (SELEQZ_MMR6:{ *:[i32] } i32:{ *:[i32] }:$f, i32:{ *:[i32] }:$cond))
PATTERN: (select:{ *:[i32] } i32:{ *:[i32] }:$cond, i32:{ *:[i32] }:$t, (imm:{ *:[i32] })<<P:Predicate_immz>>)
RESULT:  (SELNEZ_MMR6:{ *:[i32] } i32:{ *:[i32] }:$t, i32:{ *:[i32] }:$cond)
PATTERN: (select:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immz>>, i32:{ *:[i32] }:$f)
RESULT:  (SELEQZ_MMR6:{ *:[i32] } i32:{ *:[i32] }:$f, i32:{ *:[i32] }:$cond)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immz>>, SETEQ:{ *:[Other] }), i32:{ *:[i32] }:$t, i32:{ *:[i32] }:$f)
RESULT:  (OR_MM:{ *:[i32] } (SELEQZ_MMR6:{ *:[i32] } i32:{ *:[i32] }:$t, i32:{ *:[i32] }:$cond), (SELNEZ_MMR6:{ *:[i32] } i32:{ *:[i32] }:$f, i32:{ *:[i32] }:$cond))
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immz>>, SETNE:{ *:[Other] }), i32:{ *:[i32] }:$t, i32:{ *:[i32] }:$f)
RESULT:  (OR_MM:{ *:[i32] } (SELNEZ_MMR6:{ *:[i32] } i32:{ *:[i32] }:$t, i32:{ *:[i32] }:$cond), (SELEQZ_MMR6:{ *:[i32] } i32:{ *:[i32] }:$f, i32:{ *:[i32] }:$cond))
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immZExt16>><<X:LO16>>:$imm, SETEQ:{ *:[Other] }), i32:{ *:[i32] }:$t, i32:{ *:[i32] }:$f)
RESULT:  (OR_MM:{ *:[i32] } (SELEQZ_MMR6:{ *:[i32] } i32:{ *:[i32] }:$t, (XORI_MMR6:{ *:[i32] } i32:{ *:[i32] }:$cond, (LO16:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immZExt16>>:$imm))), (SELNEZ_MMR6:{ *:[i32] } i32:{ *:[i32] }:$f, (XORI_MMR6:{ *:[i32] } i32:{ *:[i32] }:$cond, (LO16:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immZExt16>>:$imm))))
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immZExt16>><<X:LO16>>:$imm, SETNE:{ *:[Other] }), i32:{ *:[i32] }:$t, i32:{ *:[i32] }:$f)
RESULT:  (OR_MM:{ *:[i32] } (SELNEZ_MMR6:{ *:[i32] } i32:{ *:[i32] }:$t, (XORI_MMR6:{ *:[i32] } i32:{ *:[i32] }:$cond, (LO16:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immZExt16>>:$imm))), (SELEQZ_MMR6:{ *:[i32] } i32:{ *:[i32] }:$f, (XORI_MMR6:{ *:[i32] } i32:{ *:[i32] }:$cond, (LO16:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immZExt16>>:$imm))))
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immSExt16Plus1>>:$imm, SETGT:{ *:[Other] }), i32:{ *:[i32] }:$t, i32:{ *:[i32] }:$f)
RESULT:  (OR_MM:{ *:[i32] } (SELEQZ_MMR6:{ *:[i32] } i32:{ *:[i32] }:$t, (SLTi_MM:{ *:[i32] } i32:{ *:[i32] }:$cond, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$imm))), (SELNEZ_MMR6:{ *:[i32] } i32:{ *:[i32] }:$f, (SLTi_MM:{ *:[i32] } i32:{ *:[i32] }:$cond, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$imm))))
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immSExt16Plus1>>:$imm, SETUGT:{ *:[Other] }), i32:{ *:[i32] }:$t, i32:{ *:[i32] }:$f)
RESULT:  (OR_MM:{ *:[i32] } (SELEQZ_MMR6:{ *:[i32] } i32:{ *:[i32] }:$t, (SLTiu_MM:{ *:[i32] } i32:{ *:[i32] }:$cond, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$imm))), (SELNEZ_MMR6:{ *:[i32] } i32:{ *:[i32] }:$f, (SLTiu_MM:{ *:[i32] } i32:{ *:[i32] }:$cond, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$imm))))
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immz>>, SETEQ:{ *:[Other] }), i32:{ *:[i32] }:$t, (imm:{ *:[i32] })<<P:Predicate_immz>>)
RESULT:  (SELEQZ_MMR6:{ *:[i32] } i32:{ *:[i32] }:$t, i32:{ *:[i32] }:$cond)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immz>>, SETNE:{ *:[Other] }), i32:{ *:[i32] }:$t, (imm:{ *:[i32] })<<P:Predicate_immz>>)
RESULT:  (SELNEZ_MMR6:{ *:[i32] } i32:{ *:[i32] }:$t, i32:{ *:[i32] }:$cond)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immz>>, SETEQ:{ *:[Other] }), (imm:{ *:[i32] })<<P:Predicate_immz>>, i32:{ *:[i32] }:$f)
RESULT:  (SELNEZ_MMR6:{ *:[i32] } i32:{ *:[i32] }:$f, i32:{ *:[i32] }:$cond)
PATTERN: (select:{ *:[i32] } (setcc:{ *:[i32] } i32:{ *:[i32] }:$cond, (imm:{ *:[i32] })<<P:Predicate_immz>>, SETNE:{ *:[Other] }), (imm:{ *:[i32] })<<P:Predicate_immz>>, i32:{ *:[i32] }:$f)
RESULT:  (SELEQZ_MMR6:{ *:[i32] } i32:{ *:[i32] }:$f, i32:{ *:[i32] }:$cond)
PATTERN: (setcc:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs, SETONE:{ *:[Other] })
RESULT:  (NOR_MMR6:{ *:[i32] } (CMP_UEQ_S_MMR6:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs), ZERO:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs, SETO:{ *:[Other] })
RESULT:  (NOR_MMR6:{ *:[i32] } (CMP_UN_S_MMR6:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs), ZERO:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs, SETUNE:{ *:[Other] })
RESULT:  (NOR_MMR6:{ *:[i32] } (CMP_EQ_S_MMR6:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs), ZERO:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs, SETEQ:{ *:[Other] })
RESULT:  (CMP_EQ_S_MMR6:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs)
PATTERN: (setcc:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs, SETGT:{ *:[Other] })
RESULT:  (CMP_LE_S_MMR6:{ *:[i32] } f32:{ *:[f32] }:$rhs, f32:{ *:[f32] }:$lhs)
PATTERN: (setcc:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs, SETGE:{ *:[Other] })
RESULT:  (CMP_LT_S_MMR6:{ *:[i32] } f32:{ *:[f32] }:$rhs, f32:{ *:[f32] }:$lhs)
PATTERN: (setcc:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs, SETLT:{ *:[Other] })
RESULT:  (CMP_LT_S_MMR6:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs)
PATTERN: (setcc:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs, SETLE:{ *:[Other] })
RESULT:  (CMP_LE_S_MMR6:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs)
PATTERN: (setcc:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs, SETNE:{ *:[Other] })
RESULT:  (NOR_MMR6:{ *:[i32] } (CMP_EQ_S_MMR6:{ *:[i32] } f32:{ *:[f32] }:$lhs, f32:{ *:[f32] }:$rhs), ZERO:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs, SETONE:{ *:[Other] })
RESULT:  (NOR_MMR6:{ *:[i32] } (CMP_UEQ_D_MMR6:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs), ZERO:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs, SETO:{ *:[Other] })
RESULT:  (NOR_MMR6:{ *:[i32] } (CMP_UN_D_MMR6:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs), ZERO:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs, SETUNE:{ *:[Other] })
RESULT:  (NOR_MMR6:{ *:[i32] } (CMP_EQ_D_MMR6:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs), ZERO:{ *:[i32] })
PATTERN: (setcc:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs, SETEQ:{ *:[Other] })
RESULT:  (CMP_EQ_D_MMR6:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs)
PATTERN: (setcc:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs, SETGT:{ *:[Other] })
RESULT:  (CMP_LE_D_MMR6:{ *:[i32] } f64:{ *:[f64] }:$rhs, f64:{ *:[f64] }:$lhs)
PATTERN: (setcc:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs, SETGE:{ *:[Other] })
RESULT:  (CMP_LT_D_MMR6:{ *:[i32] } f64:{ *:[f64] }:$rhs, f64:{ *:[f64] }:$lhs)
PATTERN: (setcc:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs, SETLT:{ *:[Other] })
RESULT:  (CMP_LT_D_MMR6:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs)
PATTERN: (setcc:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs, SETLE:{ *:[Other] })
RESULT:  (CMP_LE_D_MMR6:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs)
PATTERN: (setcc:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs, SETNE:{ *:[Other] })
RESULT:  (NOR_MMR6:{ *:[i32] } (CMP_EQ_D_MMR6:{ *:[i32] } f64:{ *:[f64] }:$lhs, f64:{ *:[f64] }:$rhs), ZERO:{ *:[i32] })
PATTERN: (fpimm:{ *:[f32] })<<P:Predicate_fpimm0>>
RESULT:  (MTC1_MMR6:{ *:[f32] } ZERO:{ *:[i32] })
PATTERN: (fpimm:{ *:[f32] })<<P:Predicate_fpimm0neg>>
RESULT:  (FNEG_S_MMR6:{ *:[f32] } (MTC1_MMR6:{ *:[f32] } ZERO:{ *:[i32] }))
PATTERN: (MipsTruncIntFP:{ *:[f32] } FGR64Opnd:{ *:[f64] }:$src)
RESULT:  (TRUNC_W_D_MMR6:{ *:[f32] } FGR64Opnd:{ *:[f64] }:$src)
PATTERN: (MipsTruncIntFP:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$src)
RESULT:  (TRUNC_W_S_MMR6:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$src)
PATTERN: (and:{ *:[i32] } GPRMM16:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immZExtAndi16>>:$imm)
RESULT:  (ANDI16_MMR6:{ *:[i32] } GPRMM16:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immZExtAndi16>>:$imm)
PATTERN: (and:{ *:[i32] } GPR32:{ *:[i32] }:$src, (imm:{ *:[i32] })<<P:Predicate_immZExt16>><<X:LO16>>:$imm)
RESULT:  (ANDI_MMR6:{ *:[i32] } GPR32:{ *:[i32] }:$src, (LO16:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immZExt16>>:$imm))
PATTERN: (imm:{ *:[i32] })<<P:Predicate_immZExt16>><<X:LO16>>:$imm
RESULT:  (XORI_MMR6:{ *:[i32] } ZERO:{ *:[i32] }, (LO16:{ *:[i32] } (imm:{ *:[i32] })<<P:Predicate_immZExt16>>:$imm))
PATTERN: (xor:{ *:[i32] } GPRMM16:{ *:[i32] }:$in, -1:{ *:[i32] })
RESULT:  (NOT16_MMR6:{ *:[i32] } GPRMM16:{ *:[i32] }:$in)
PATTERN: (xor:{ *:[i32] } GPR32:{ *:[i32] }:$in, -1:{ *:[i32] })
RESULT:  (NOR_MMR6:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$in, ZERO:{ *:[i32] })
PATTERN: (ld:{ *:[f64] } addrRegImm:{ *:[iPTR] }:$a)<<P:Predicate_unindexedload>><<P:Predicate_load>>
RESULT:  (LDC1_D64_MMR6:{ *:[f64] } addrRegImm:{ *:[i32] }:$a)
PATTERN: (st f64:{ *:[f64] }:$v, addrRegImm:{ *:[iPTR] }:$a)<<P:Predicate_unindexedstore>><<P:Predicate_store>>
RESULT:  (SDC1_D64_MMR6 f64:{ *:[f64] }:$v, addrRegImm:{ *:[i32] }:$a)
PATTERN: (MipsJmpLink (texternalsym:{ *:[i32] }):$dst)
RESULT:  (JAL_MMR6 (texternalsym:{ *:[i32] }):$dst)
PATTERN: (MipsJmpLink (tglobaladdr:{ *:[iPTR] }):$dst)
RESULT:  (JAL_MMR6 (tglobaladdr:{ *:[iPTR] }):$dst)
PATTERN: (MipsTailCall (tglobaladdr:{ *:[iPTR] }):$dst)
RESULT:  (TAILCALL_MMR6 (tglobaladdr:{ *:[iPTR] }):$dst)
PATTERN: (MipsTailCall (texternalsym:{ *:[iPTR] }):$dst)
RESULT:  (TAILCALL_MMR6 (texternalsym:{ *:[iPTR] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETNE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BNEZC_MMR6 GPR32:{ *:[i32] }:$lhs, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, 0:{ *:[i32] }, SETEQ:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQZC_MMR6 GPR32:{ *:[i32] }:$lhs, (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETGE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQZC_MMR6 (SLT_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETUGE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQZC_MMR6 (SLTu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs), (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs, SETGE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQZC_MMR6 (SLTi_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs), (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs, SETUGE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQZC_MMR6 (SLTiu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16>>:$rhs), (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETGT:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQZC_MMR6 (SLTi_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$rhs)), (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (imm:{ *:[i32] })<<P:Predicate_immSExt16Plus1>>:$rhs, SETUGT:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQZC_MMR6 (SLTiu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, (Plus1:{ *:[i32] } (imm:{ *:[i32] }):$rhs)), (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETLE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQZC_MMR6 (SLT_MM:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs), (bb:{ *:[Other] }):$dst)
PATTERN: (brcond (setcc:{ *:[i32] } GPR32:{ *:[i32] }:$lhs, GPR32:{ *:[i32] }:$rhs, SETULE:{ *:[Other] }), (bb:{ *:[Other] }):$dst)
RESULT:  (BEQZC_MMR6 (SLTu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$rhs, GPR32:{ *:[i32] }:$lhs), (bb:{ *:[Other] }):$dst)
PATTERN: (brcond GPR32:{ *:[i32] }:$cond, (bb:{ *:[Other] }):$dst)
RESULT:  (BNEZC_MMR6 GPR32:{ *:[i32] }:$cond, (bb:{ *:[Other] }):$dst)
PATTERN: (fadd:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fr, (fmul:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft))
RESULT:  (MADD_S:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fr, FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (fadd:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fr, (fmul:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft))
RESULT:  (MADD_D32:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fr, AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fadd:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fr, (fmul:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft))
RESULT:  (MADD_D64:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fr, FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fsub:{ *:[f32] } (fpimm:{ *:[f32] })<<P:Predicate_fpimm0>>, (fadd:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fr, (fmul:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)))
RESULT:  (NMADD_S:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fr, FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (fsub:{ *:[f64] } (fpimm:{ *:[f64] })<<P:Predicate_fpimm0>>, (fadd:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fr, (fmul:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)))
RESULT:  (NMADD_D32:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fr, AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fsub:{ *:[f64] } (fpimm:{ *:[f64] })<<P:Predicate_fpimm0>>, (fadd:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fr, (fmul:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)))
RESULT:  (NMADD_D64:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fr, FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (brcond (setcc:{ *:[i32] } (and:{ *:[i64] } (shl:{ *:[i64] } 1:{ *:[i64] }, (imm:{ *:[i64] })<<P:Predicate_immZExt5_64>>:$p), GPR64Opnd:{ *:[i64] }:$rs), 0:{ *:[i64] }, SETEQ:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
RESULT:  (BBIT0 GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i64] }):$p, (bb:{ *:[Other] }):$offset)
PATTERN: (brcond (setcc:{ *:[i32] } (and:{ *:[i64] } (shl:{ *:[i64] } 4294967296:{ *:[i64] }, (imm:{ *:[i64] })<<P:Predicate_immZExt5_64>>:$p), GPR64Opnd:{ *:[i64] }:$rs), 0:{ *:[i64] }, SETEQ:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
RESULT:  (BBIT032 GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i64] }):$p, (bb:{ *:[Other] }):$offset)
PATTERN: (brcond (setcc:{ *:[i32] } (and:{ *:[i64] } (shl:{ *:[i64] } 1:{ *:[i64] }, (imm:{ *:[i64] })<<P:Predicate_immZExt5_64>>:$p), GPR64Opnd:{ *:[i64] }:$rs), 0:{ *:[i64] }, SETNE:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
RESULT:  (BBIT1 GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i64] }):$p, (bb:{ *:[Other] }):$offset)
PATTERN: (brcond (setcc:{ *:[i32] } (and:{ *:[i64] } (shl:{ *:[i64] } 4294967296:{ *:[i64] }, (imm:{ *:[i64] })<<P:Predicate_immZExt5_64>>:$p), GPR64Opnd:{ *:[i64] }:$rs), 0:{ *:[i64] }, SETNE:{ *:[Other] }), (bb:{ *:[Other] }):$offset)
RESULT:  (BBIT132 GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i64] }):$p, (bb:{ *:[Other] }):$offset)
PATTERN: (add:{ *:[v16i8] } vsplati8_uimm5:{ *:[v16i8] }:$imm, MSA128BOpnd:{ *:[v16i8] }:$ws)
RESULT:  (ADDVI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm5:{ *:[v16i8] }:$imm)
PATTERN: (add:{ *:[v8i16] } vsplati16_uimm5:{ *:[v8i16] }:$imm, MSA128HOpnd:{ *:[v8i16] }:$ws)
RESULT:  (ADDVI_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_uimm5:{ *:[v8i16] }:$imm)
PATTERN: (add:{ *:[v4i32] } vsplati32_uimm5:{ *:[v4i32] }:$imm, MSA128WOpnd:{ *:[v4i32] }:$ws)
RESULT:  (ADDVI_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$imm)
PATTERN: (add:{ *:[v2i64] } vsplati64_uimm5:{ *:[v2i64] }:$imm, MSA128DOpnd:{ *:[v2i64] }:$ws)
RESULT:  (ADDVI_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_uimm5:{ *:[v2i64] }:$imm)
PATTERN: (and:{ *:[v16i8] } vsplati8_uimm8:{ *:[v16i8] }:$u8, MSA128BOpnd:{ *:[v16i8] }:$ws)
RESULT:  (ANDI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm8:{ *:[v16i8] }:$u8)
PATTERN: (and:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, (xor:{ *:[v16i8] } immAllOnesV:{ *:[v16i8] }, (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128BOpnd:{ *:[v16i8] }:$wt)))
RESULT:  (BCLR_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (and:{ *:[v16i8] } (xor:{ *:[v16i8] } (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128BOpnd:{ *:[v16i8] }:$wt), immAllOnesV:{ *:[v16i8] }), MSA128BOpnd:{ *:[v16i8] }:$ws)
RESULT:  (BCLR_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (and:{ *:[v16i8] } (xor:{ *:[v16i8] } immAllOnesV:{ *:[v16i8] }, (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128BOpnd:{ *:[v16i8] }:$wt)), MSA128BOpnd:{ *:[v16i8] }:$ws)
RESULT:  (BCLR_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (and:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, (xor:{ *:[v8i16] } immAllOnesV:{ *:[v8i16] }, (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128HOpnd:{ *:[v8i16] }:$wt)))
RESULT:  (BCLR_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (and:{ *:[v8i16] } (xor:{ *:[v8i16] } (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128HOpnd:{ *:[v8i16] }:$wt), immAllOnesV:{ *:[v8i16] }), MSA128HOpnd:{ *:[v8i16] }:$ws)
RESULT:  (BCLR_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (and:{ *:[v8i16] } (xor:{ *:[v8i16] } immAllOnesV:{ *:[v8i16] }, (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128HOpnd:{ *:[v8i16] }:$wt)), MSA128HOpnd:{ *:[v8i16] }:$ws)
RESULT:  (BCLR_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (and:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, (xor:{ *:[v4i32] } immAllOnesV:{ *:[v4i32] }, (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128WOpnd:{ *:[v4i32] }:$wt)))
RESULT:  (BCLR_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (and:{ *:[v4i32] } (xor:{ *:[v4i32] } (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128WOpnd:{ *:[v4i32] }:$wt), immAllOnesV:{ *:[v4i32] }), MSA128WOpnd:{ *:[v4i32] }:$ws)
RESULT:  (BCLR_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (and:{ *:[v4i32] } (xor:{ *:[v4i32] } immAllOnesV:{ *:[v4i32] }, (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128WOpnd:{ *:[v4i32] }:$wt)), MSA128WOpnd:{ *:[v4i32] }:$ws)
RESULT:  (BCLR_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (and:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, (xor:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } immAllOnesV:{ *:[v4i32] }), (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, MSA128DOpnd:{ *:[v2i64] }:$wt)))
RESULT:  (BCLR_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (and:{ *:[v2i64] } (xor:{ *:[v2i64] } (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, MSA128DOpnd:{ *:[v2i64] }:$wt), (bitconvert:{ *:[v2i64] } immAllOnesV:{ *:[v4i32] })), MSA128DOpnd:{ *:[v2i64] }:$ws)
RESULT:  (BCLR_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (and:{ *:[v2i64] } (xor:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } immAllOnesV:{ *:[v4i32] }), (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, MSA128DOpnd:{ *:[v2i64] }:$wt)), MSA128DOpnd:{ *:[v2i64] }:$ws)
RESULT:  (BCLR_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (and:{ *:[v16i8] } vsplat_uimm_inv_pow2:{ *:[v16i8] }:$m, MSA128BOpnd:{ *:[v16i8] }:$ws)
RESULT:  (BCLRI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplat_uimm_inv_pow2:{ *:[v16i8] }:$m)
PATTERN: (and:{ *:[v8i16] } vsplat_uimm_inv_pow2:{ *:[v8i16] }:$m, MSA128HOpnd:{ *:[v8i16] }:$ws)
RESULT:  (BCLRI_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplat_uimm_inv_pow2:{ *:[v8i16] }:$m)
PATTERN: (and:{ *:[v4i32] } vsplat_uimm_inv_pow2:{ *:[v4i32] }:$m, MSA128WOpnd:{ *:[v4i32] }:$ws)
RESULT:  (BCLRI_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplat_uimm_inv_pow2:{ *:[v4i32] }:$m)
PATTERN: (and:{ *:[v2i64] } vsplat_uimm_inv_pow2:{ *:[v2i64] }:$m, MSA128DOpnd:{ *:[v2i64] }:$ws)
RESULT:  (BCLRI_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplat_uimm_inv_pow2:{ *:[v2i64] }:$m)
PATTERN: (xor:{ *:[v16i8] } (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128BOpnd:{ *:[v16i8] }:$wt), MSA128BOpnd:{ *:[v16i8] }:$ws)
RESULT:  (BNEG_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (xor:{ *:[v8i16] } (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128HOpnd:{ *:[v8i16] }:$wt), MSA128HOpnd:{ *:[v8i16] }:$ws)
RESULT:  (BNEG_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (xor:{ *:[v4i32] } (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128WOpnd:{ *:[v4i32] }:$wt), MSA128WOpnd:{ *:[v4i32] }:$ws)
RESULT:  (BNEG_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (xor:{ *:[v2i64] } (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, MSA128DOpnd:{ *:[v2i64] }:$wt), MSA128DOpnd:{ *:[v2i64] }:$ws)
RESULT:  (BNEG_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (xor:{ *:[v16i8] } vsplat_uimm_pow2:{ *:[v16i8] }:$m, MSA128BOpnd:{ *:[v16i8] }:$ws)
RESULT:  (BNEGI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplat_uimm_pow2:{ *:[v16i8] }:$m)
PATTERN: (xor:{ *:[v8i16] } vsplat_uimm_pow2:{ *:[v8i16] }:$m, MSA128HOpnd:{ *:[v8i16] }:$ws)
RESULT:  (BNEGI_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplat_uimm_pow2:{ *:[v8i16] }:$m)
PATTERN: (xor:{ *:[v4i32] } vsplat_uimm_pow2:{ *:[v4i32] }:$m, MSA128WOpnd:{ *:[v4i32] }:$ws)
RESULT:  (BNEGI_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplat_uimm_pow2:{ *:[v4i32] }:$m)
PATTERN: (xor:{ *:[v2i64] } vsplat_uimm_pow2:{ *:[v2i64] }:$m, MSA128DOpnd:{ *:[v2i64] }:$ws)
RESULT:  (BNEGI_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplat_uimm_pow2:{ *:[v2i64] }:$m)
PATTERN: (or:{ *:[v16i8] } (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128BOpnd:{ *:[v16i8] }:$wt), MSA128BOpnd:{ *:[v16i8] }:$ws)
RESULT:  (BSET_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (or:{ *:[v8i16] } (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128HOpnd:{ *:[v8i16] }:$wt), MSA128HOpnd:{ *:[v8i16] }:$ws)
RESULT:  (BSET_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (or:{ *:[v4i32] } (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, MSA128WOpnd:{ *:[v4i32] }:$wt), MSA128WOpnd:{ *:[v4i32] }:$ws)
RESULT:  (BSET_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (or:{ *:[v2i64] } (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, MSA128DOpnd:{ *:[v2i64] }:$wt), MSA128DOpnd:{ *:[v2i64] }:$ws)
RESULT:  (BSET_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (or:{ *:[v16i8] } vsplat_uimm_pow2:{ *:[v16i8] }:$m, MSA128BOpnd:{ *:[v16i8] }:$ws)
RESULT:  (BSETI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplat_uimm_pow2:{ *:[v16i8] }:$m)
PATTERN: (or:{ *:[v8i16] } vsplat_uimm_pow2:{ *:[v8i16] }:$m, MSA128HOpnd:{ *:[v8i16] }:$ws)
RESULT:  (BSETI_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplat_uimm_pow2:{ *:[v8i16] }:$m)
PATTERN: (or:{ *:[v4i32] } vsplat_uimm_pow2:{ *:[v4i32] }:$m, MSA128WOpnd:{ *:[v4i32] }:$ws)
RESULT:  (BSETI_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplat_uimm_pow2:{ *:[v4i32] }:$m)
PATTERN: (or:{ *:[v2i64] } vsplat_uimm_pow2:{ *:[v2i64] }:$m, MSA128DOpnd:{ *:[v2i64] }:$ws)
RESULT:  (BSETI_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplat_uimm_pow2:{ *:[v2i64] }:$m)
PATTERN: (fmul:{ *:[v4f32] } (fexp2:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$wt), MSA128WOpnd:{ *:[v4f32] }:$ws)
RESULT:  (FEXP2_W:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (fmul:{ *:[v2f64] } (fexp2:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$wt), MSA128DOpnd:{ *:[v2f64] }:$ws)
RESULT:  (FEXP2_D:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (add:{ *:[i32] } (shl:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immZExt2Lsa>>:$sa), GPR32Opnd:{ *:[i32] }:$rt)
RESULT:  (LSA:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$rs, GPR32Opnd:{ *:[i32] }:$rt, (imm:{ *:[i32] }):$sa)
PATTERN: (add:{ *:[i64] } (shl:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, (imm:{ *:[i32] })<<P:Predicate_immZExt2Lsa>>:$sa), GPR64Opnd:{ *:[i64] }:$rt)
RESULT:  (DLSA:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$rs, GPR64Opnd:{ *:[i64] }:$rt, (imm:{ *:[i32] }):$sa)
PATTERN: (add:{ *:[v16i8] } (mul:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt), MSA128BOpnd:{ *:[v16i8] }:$wd_in)
RESULT:  (MADDV_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$wd_in, MSA128BOpnd:{ *:[v16i8] }:$ws, MSA128BOpnd:{ *:[v16i8] }:$wt)
PATTERN: (add:{ *:[v8i16] } (mul:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt), MSA128HOpnd:{ *:[v8i16] }:$wd_in)
RESULT:  (MADDV_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$wd_in, MSA128HOpnd:{ *:[v8i16] }:$ws, MSA128HOpnd:{ *:[v8i16] }:$wt)
PATTERN: (add:{ *:[v4i32] } (mul:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt), MSA128WOpnd:{ *:[v4i32] }:$wd_in)
RESULT:  (MADDV_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$wd_in, MSA128WOpnd:{ *:[v4i32] }:$ws, MSA128WOpnd:{ *:[v4i32] }:$wt)
PATTERN: (add:{ *:[v2i64] } (mul:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt), MSA128DOpnd:{ *:[v2i64] }:$wd_in)
RESULT:  (MADDV_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$wd_in, MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$wt)
PATTERN: (smax:{ *:[v16i8] } vsplati8_simm5:{ *:[v16i8] }:$imm, MSA128BOpnd:{ *:[v16i8] }:$ws)
RESULT:  (MAXI_S_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_simm5:{ *:[v16i8] }:$imm)
PATTERN: (smax:{ *:[v8i16] } vsplati16_simm5:{ *:[v8i16] }:$imm, MSA128HOpnd:{ *:[v8i16] }:$ws)
RESULT:  (MAXI_S_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_simm5:{ *:[v8i16] }:$imm)
PATTERN: (smax:{ *:[v4i32] } vsplati32_simm5:{ *:[v4i32] }:$imm, MSA128WOpnd:{ *:[v4i32] }:$ws)
RESULT:  (MAXI_S_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_simm5:{ *:[v4i32] }:$imm)
PATTERN: (smax:{ *:[v2i64] } vsplati64_simm5:{ *:[v2i64] }:$imm, MSA128DOpnd:{ *:[v2i64] }:$ws)
RESULT:  (MAXI_S_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_simm5:{ *:[v2i64] }:$imm)
PATTERN: (umax:{ *:[v16i8] } vsplati8_uimm5:{ *:[v16i8] }:$imm, MSA128BOpnd:{ *:[v16i8] }:$ws)
RESULT:  (MAXI_U_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm5:{ *:[v16i8] }:$imm)
PATTERN: (umax:{ *:[v8i16] } vsplati16_uimm5:{ *:[v8i16] }:$imm, MSA128HOpnd:{ *:[v8i16] }:$ws)
RESULT:  (MAXI_U_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_uimm5:{ *:[v8i16] }:$imm)
PATTERN: (umax:{ *:[v4i32] } vsplati32_uimm5:{ *:[v4i32] }:$imm, MSA128WOpnd:{ *:[v4i32] }:$ws)
RESULT:  (MAXI_U_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$imm)
PATTERN: (umax:{ *:[v2i64] } vsplati64_uimm5:{ *:[v2i64] }:$imm, MSA128DOpnd:{ *:[v2i64] }:$ws)
RESULT:  (MAXI_U_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_uimm5:{ *:[v2i64] }:$imm)
PATTERN: (smin:{ *:[v16i8] } vsplati8_simm5:{ *:[v16i8] }:$imm, MSA128BOpnd:{ *:[v16i8] }:$ws)
RESULT:  (MINI_S_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_simm5:{ *:[v16i8] }:$imm)
PATTERN: (smin:{ *:[v8i16] } vsplati16_simm5:{ *:[v8i16] }:$imm, MSA128HOpnd:{ *:[v8i16] }:$ws)
RESULT:  (MINI_S_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_simm5:{ *:[v8i16] }:$imm)
PATTERN: (smin:{ *:[v4i32] } vsplati32_simm5:{ *:[v4i32] }:$imm, MSA128WOpnd:{ *:[v4i32] }:$ws)
RESULT:  (MINI_S_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_simm5:{ *:[v4i32] }:$imm)
PATTERN: (smin:{ *:[v2i64] } vsplati64_simm5:{ *:[v2i64] }:$imm, MSA128DOpnd:{ *:[v2i64] }:$ws)
RESULT:  (MINI_S_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_simm5:{ *:[v2i64] }:$imm)
PATTERN: (umin:{ *:[v16i8] } vsplati8_uimm5:{ *:[v16i8] }:$imm, MSA128BOpnd:{ *:[v16i8] }:$ws)
RESULT:  (MINI_U_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm5:{ *:[v16i8] }:$imm)
PATTERN: (umin:{ *:[v8i16] } vsplati16_uimm5:{ *:[v8i16] }:$imm, MSA128HOpnd:{ *:[v8i16] }:$ws)
RESULT:  (MINI_U_H:{ *:[v8i16] } MSA128HOpnd:{ *:[v8i16] }:$ws, vsplati16_uimm5:{ *:[v8i16] }:$imm)
PATTERN: (umin:{ *:[v4i32] } vsplati32_uimm5:{ *:[v4i32] }:$imm, MSA128WOpnd:{ *:[v4i32] }:$ws)
RESULT:  (MINI_U_W:{ *:[v4i32] } MSA128WOpnd:{ *:[v4i32] }:$ws, vsplati32_uimm5:{ *:[v4i32] }:$imm)
PATTERN: (umin:{ *:[v2i64] } vsplati64_uimm5:{ *:[v2i64] }:$imm, MSA128DOpnd:{ *:[v2i64] }:$ws)
RESULT:  (MINI_U_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, vsplati64_uimm5:{ *:[v2i64] }:$imm)
PATTERN: (MipsVNOR:{ *:[v16i8] } vsplati8_uimm8:{ *:[v16i8] }:$u8, MSA128BOpnd:{ *:[v16i8] }:$ws)
RESULT:  (NORI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm8:{ *:[v16i8] }:$u8)
PATTERN: (or:{ *:[v16i8] } vsplati8_uimm8:{ *:[v16i8] }:$u8, MSA128BOpnd:{ *:[v16i8] }:$ws)
RESULT:  (ORI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm8:{ *:[v16i8] }:$u8)
PATTERN: (MipsVSHF:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] }), (build_vector:{ *:[v4i32] } GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt, GPR32Opnd:{ *:[i32] }:$rt))), MSA128DOpnd:{ *:[v2i64] }:$ws, MSA128DOpnd:{ *:[v2i64] }:$ws)
RESULT:  (SPLAT_D:{ *:[v2i64] } MSA128DOpnd:{ *:[v2i64] }:$ws, GPR32Opnd:{ *:[i32] }:$rt)
PATTERN: (xor:{ *:[v16i8] } vsplati8_uimm8:{ *:[v16i8] }:$u8, MSA128BOpnd:{ *:[v16i8] }:$ws)
RESULT:  (XORI_B:{ *:[v16i8] } MSA128BOpnd:{ *:[v16i8] }:$ws, vsplati8_uimm8:{ *:[v16i8] }:$u8)
PATTERN: (add:{ *:[i32] } (MipsLo:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$lo), GPR32Opnd:{ *:[i32] }:$hi)
RESULT:  (ADDiu:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (tglobaladdr:{ *:[i32] }):$lo)
PATTERN: (add:{ *:[i32] } (MipsLo:{ *:[i32] } (tblockaddress:{ *:[i32] }):$lo), GPR32Opnd:{ *:[i32] }:$hi)
RESULT:  (ADDiu:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (tblockaddress:{ *:[i32] }):$lo)
PATTERN: (add:{ *:[i32] } (MipsLo:{ *:[i32] } (tjumptable:{ *:[i32] }):$lo), GPR32Opnd:{ *:[i32] }:$hi)
RESULT:  (ADDiu:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (tjumptable:{ *:[i32] }):$lo)
PATTERN: (add:{ *:[i32] } (MipsLo:{ *:[i32] } (tconstpool:{ *:[i32] }):$lo), GPR32Opnd:{ *:[i32] }:$hi)
RESULT:  (ADDiu:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (tconstpool:{ *:[i32] }):$lo)
PATTERN: (add:{ *:[i32] } (MipsLo:{ *:[i32] } (tglobaltlsaddr:{ *:[i32] }):$lo), GPR32Opnd:{ *:[i32] }:$hi)
RESULT:  (ADDiu:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (tglobaltlsaddr:{ *:[i32] }):$lo)
PATTERN: (add:{ *:[i32] } (MipsLo:{ *:[i32] } (texternalsym:{ *:[i32] }):$lo), GPR32Opnd:{ *:[i32] }:$hi)
RESULT:  (ADDiu:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (texternalsym:{ *:[i32] }):$lo)
PATTERN: (add:{ *:[i32] } (MipsGPRel:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$in), GPR32:{ *:[i32] }:$gp)
RESULT:  (ADDiu:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (tglobaladdr:{ *:[i32] }):$in)
PATTERN: (add:{ *:[i32] } (MipsGPRel:{ *:[i32] } (tconstpool:{ *:[i32] }):$in), GPR32:{ *:[i32] }:$gp)
RESULT:  (ADDiu:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (tconstpool:{ *:[i32] }):$in)
PATTERN: (fneg:{ *:[f32] } (fadd:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fr, (fmul:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)))
RESULT:  (NMADD_S:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fr, FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (fneg:{ *:[f64] } (fadd:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fr, (fmul:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)))
RESULT:  (NMADD_D32:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fr, AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (fneg:{ *:[f64] } (fadd:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fr, (fmul:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)))
RESULT:  (NMADD_D64:{ *:[f64] } FGR64Opnd:{ *:[f64] }:$fr, FGR64Opnd:{ *:[f64] }:$fs, FGR64Opnd:{ *:[f64] }:$ft)
PATTERN: (add:{ *:[i64] } (MipsLo:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$lo), GPR64Opnd:{ *:[i64] }:$hi)
RESULT:  (DADDiu:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (tglobaladdr:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } (MipsLo:{ *:[i64] } (tblockaddress:{ *:[i64] }):$lo), GPR64Opnd:{ *:[i64] }:$hi)
RESULT:  (DADDiu:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (tblockaddress:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } (MipsLo:{ *:[i64] } (tjumptable:{ *:[i64] }):$lo), GPR64Opnd:{ *:[i64] }:$hi)
RESULT:  (DADDiu:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (tjumptable:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } (MipsLo:{ *:[i64] } (tconstpool:{ *:[i64] }):$lo), GPR64Opnd:{ *:[i64] }:$hi)
RESULT:  (DADDiu:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (tconstpool:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } (MipsLo:{ *:[i64] } (tglobaltlsaddr:{ *:[i64] }):$lo), GPR64Opnd:{ *:[i64] }:$hi)
RESULT:  (DADDiu:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (tglobaltlsaddr:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } (MipsLo:{ *:[i64] } (texternalsym:{ *:[i64] }):$lo), GPR64Opnd:{ *:[i64] }:$hi)
RESULT:  (DADDiu:{ *:[i64] } GPR64Opnd:{ *:[i64] }:$hi, (texternalsym:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } (MipsHigher:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (tglobaladdr:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } (MipsHigher:{ *:[i64] } (tblockaddress:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (tblockaddress:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } (MipsHigher:{ *:[i64] } (tjumptable:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (tjumptable:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } (MipsHigher:{ *:[i64] } (tconstpool:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (tconstpool:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } (MipsHigher:{ *:[i64] } (texternalsym:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (texternalsym:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } (MipsHi:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (tglobaladdr:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } (MipsHi:{ *:[i64] } (tblockaddress:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (tblockaddress:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } (MipsHi:{ *:[i64] } (tjumptable:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (tjumptable:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } (MipsHi:{ *:[i64] } (tconstpool:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (tconstpool:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } (MipsHi:{ *:[i64] } (texternalsym:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (texternalsym:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } (MipsLo:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (tglobaladdr:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } (MipsLo:{ *:[i64] } (tblockaddress:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (tblockaddress:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } (MipsLo:{ *:[i64] } (tjumptable:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (tjumptable:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } (MipsLo:{ *:[i64] } (tconstpool:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (tconstpool:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } (MipsLo:{ *:[i64] } (tglobaltlsaddr:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (tglobaltlsaddr:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } (MipsLo:{ *:[i64] } (texternalsym:{ *:[i64] }):$lo), GPR64:{ *:[i64] }:$hi)
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$hi, (texternalsym:{ *:[i64] }):$lo)
PATTERN: (add:{ *:[i64] } (MipsGPRel:{ *:[i64] } (tglobaladdr:{ *:[i64] }):$in), GPR64:{ *:[i64] }:$gp)
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$gp, (tglobaladdr:{ *:[i64] }):$in)
PATTERN: (add:{ *:[i64] } (MipsGPRel:{ *:[i64] } (tconstpool:{ *:[i64] }):$in), GPR64:{ *:[i64] }:$gp)
RESULT:  (DADDiu:{ *:[i64] } GPR64:{ *:[i64] }:$gp, (tconstpool:{ *:[i64] }):$in)
PATTERN: (add:{ *:[i32] } (MipsLo:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$lo), CPU16Regs:{ *:[i32] }:$hi)
RESULT:  (AddiuRxRxImmX16:{ *:[i32] } CPU16Regs:{ *:[i32] }:$hi, (tglobaladdr:{ *:[i32] }):$lo)
PATTERN: (fadd:{ *:[v4f32] } (fmul:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt), MSA128WOpnd:{ *:[v4f32] }:$wd)
RESULT:  (FMADD_W:{ *:[v4f32] } MSA128WOpnd:{ *:[v4f32] }:$wd, MSA128WOpnd:{ *:[v4f32] }:$ws, MSA128WOpnd:{ *:[v4f32] }:$wt)
PATTERN: (fadd:{ *:[v2f64] } (fmul:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt), MSA128DOpnd:{ *:[v2f64] }:$wd)
RESULT:  (FMADD_D:{ *:[v2f64] } MSA128DOpnd:{ *:[v2f64] }:$wd, MSA128DOpnd:{ *:[v2f64] }:$ws, MSA128DOpnd:{ *:[v2f64] }:$wt)
PATTERN: (shl:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (and:{ *:[v16i8] } (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>), v16i8:{ *:[v16i8] }:$wt))
RESULT:  (SLL_B:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, v16i8:{ *:[v16i8] }:$wt)
PATTERN: (shl:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (and:{ *:[v8i16] } (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>), v8i16:{ *:[v8i16] }:$wt))
RESULT:  (SLL_H:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, v8i16:{ *:[v8i16] }:$wt)
PATTERN: (shl:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>), v4i32:{ *:[v4i32] }:$wt))
RESULT:  (SLL_W:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, v4i32:{ *:[v4i32] }:$wt)
PATTERN: (shl:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (and:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>, v2i64:{ *:[v2i64] }:$wt))
RESULT:  (SLL_D:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, v2i64:{ *:[v2i64] }:$wt)
PATTERN: (xor:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>), v16i8:{ *:[v16i8] }:$wt)))
RESULT:  (BNEG_B:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, v16i8:{ *:[v16i8] }:$wt)
PATTERN: (xor:{ *:[v16i8] } (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>))), v16i8:{ *:[v16i8] }:$ws)
RESULT:  (BNEG_B:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, v16i8:{ *:[v16i8] }:$wt)
PATTERN: (xor:{ *:[v16i8] } (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>), v16i8:{ *:[v16i8] }:$wt)), v16i8:{ *:[v16i8] }:$ws)
RESULT:  (BNEG_B:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, v16i8:{ *:[v16i8] }:$wt)
PATTERN: (xor:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>), v8i16:{ *:[v8i16] }:$wt)))
RESULT:  (BNEG_H:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, v8i16:{ *:[v8i16] }:$wt)
PATTERN: (xor:{ *:[v8i16] } (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>))), v8i16:{ *:[v8i16] }:$ws)
RESULT:  (BNEG_H:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, v8i16:{ *:[v8i16] }:$wt)
PATTERN: (xor:{ *:[v8i16] } (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>), v8i16:{ *:[v8i16] }:$wt)), v8i16:{ *:[v8i16] }:$ws)
RESULT:  (BNEG_H:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, v8i16:{ *:[v8i16] }:$wt)
PATTERN: (xor:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>), v4i32:{ *:[v4i32] }:$wt)))
RESULT:  (BNEG_W:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, v4i32:{ *:[v4i32] }:$wt)
PATTERN: (xor:{ *:[v4i32] } (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>))), v4i32:{ *:[v4i32] }:$ws)
RESULT:  (BNEG_W:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, v4i32:{ *:[v4i32] }:$wt)
PATTERN: (xor:{ *:[v4i32] } (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>), v4i32:{ *:[v4i32] }:$wt)), v4i32:{ *:[v4i32] }:$ws)
RESULT:  (BNEG_W:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, v4i32:{ *:[v4i32] }:$wt)
PATTERN: (xor:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>, v2i64:{ *:[v2i64] }:$wt)))
RESULT:  (BNEG_D:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, v2i64:{ *:[v2i64] }:$wt)
PATTERN: (xor:{ *:[v2i64] } (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$wt, (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>)), v2i64:{ *:[v2i64] }:$ws)
RESULT:  (BNEG_D:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, v2i64:{ *:[v2i64] }:$wt)
PATTERN: (xor:{ *:[v2i64] } (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>, v2i64:{ *:[v2i64] }:$wt)), v2i64:{ *:[v2i64] }:$ws)
RESULT:  (BNEG_D:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, v2i64:{ *:[v2i64] }:$wt)
PATTERN: (srl:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (and:{ *:[v16i8] } (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>), v16i8:{ *:[v16i8] }:$wt))
RESULT:  (SRL_B:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, v16i8:{ *:[v16i8] }:$wt)
PATTERN: (srl:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (and:{ *:[v8i16] } (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>), v8i16:{ *:[v8i16] }:$wt))
RESULT:  (SRL_H:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, v8i16:{ *:[v8i16] }:$wt)
PATTERN: (srl:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>), v4i32:{ *:[v4i32] }:$wt))
RESULT:  (SRL_W:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, v4i32:{ *:[v4i32] }:$wt)
PATTERN: (srl:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (and:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>, v2i64:{ *:[v2i64] }:$wt))
RESULT:  (SRL_D:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, v2i64:{ *:[v2i64] }:$wt)
PATTERN: (sra:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (and:{ *:[v16i8] } (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>), v16i8:{ *:[v16i8] }:$wt))
RESULT:  (SRA_B:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, v16i8:{ *:[v16i8] }:$wt)
PATTERN: (sra:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (and:{ *:[v8i16] } (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>), v8i16:{ *:[v8i16] }:$wt))
RESULT:  (SRA_H:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, v8i16:{ *:[v8i16] }:$wt)
PATTERN: (sra:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>), v4i32:{ *:[v4i32] }:$wt))
RESULT:  (SRA_W:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, v4i32:{ *:[v4i32] }:$wt)
PATTERN: (sra:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (and:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>, v2i64:{ *:[v2i64] }:$wt))
RESULT:  (SRA_D:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, v2i64:{ *:[v2i64] }:$wt)
PATTERN: (or:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>), v16i8:{ *:[v16i8] }:$wt)))
RESULT:  (BSET_B:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, v16i8:{ *:[v16i8] }:$wt)
PATTERN: (or:{ *:[v16i8] } (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>))), v16i8:{ *:[v16i8] }:$ws)
RESULT:  (BSET_B:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, v16i8:{ *:[v16i8] }:$wt)
PATTERN: (or:{ *:[v16i8] } (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>), v16i8:{ *:[v16i8] }:$wt)), v16i8:{ *:[v16i8] }:$ws)
RESULT:  (BSET_B:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, v16i8:{ *:[v16i8] }:$wt)
PATTERN: (or:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>), v8i16:{ *:[v8i16] }:$wt)))
RESULT:  (BSET_H:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, v8i16:{ *:[v8i16] }:$wt)
PATTERN: (or:{ *:[v8i16] } (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>))), v8i16:{ *:[v8i16] }:$ws)
RESULT:  (BSET_H:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, v8i16:{ *:[v8i16] }:$wt)
PATTERN: (or:{ *:[v8i16] } (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>), v8i16:{ *:[v8i16] }:$wt)), v8i16:{ *:[v8i16] }:$ws)
RESULT:  (BSET_H:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, v8i16:{ *:[v8i16] }:$wt)
PATTERN: (or:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>), v4i32:{ *:[v4i32] }:$wt)))
RESULT:  (BSET_W:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, v4i32:{ *:[v4i32] }:$wt)
PATTERN: (or:{ *:[v4i32] } (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>))), v4i32:{ *:[v4i32] }:$ws)
RESULT:  (BSET_W:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, v4i32:{ *:[v4i32] }:$wt)
PATTERN: (or:{ *:[v4i32] } (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>), v4i32:{ *:[v4i32] }:$wt)), v4i32:{ *:[v4i32] }:$ws)
RESULT:  (BSET_W:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, v4i32:{ *:[v4i32] }:$wt)
PATTERN: (or:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>, v2i64:{ *:[v2i64] }:$wt)))
RESULT:  (BSET_D:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, v2i64:{ *:[v2i64] }:$wt)
PATTERN: (or:{ *:[v2i64] } (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$wt, (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>)), v2i64:{ *:[v2i64] }:$ws)
RESULT:  (BSET_D:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, v2i64:{ *:[v2i64] }:$wt)
PATTERN: (or:{ *:[v2i64] } (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>, v2i64:{ *:[v2i64] }:$wt)), v2i64:{ *:[v2i64] }:$ws)
RESULT:  (BSET_D:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, v2i64:{ *:[v2i64] }:$wt)
PATTERN: (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (xor:{ *:[v16i8] } (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>), v16i8:{ *:[v16i8] }:$wt)), immAllOnesV:{ *:[v16i8] }))
RESULT:  (BCLR_B:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, v16i8:{ *:[v16i8] }:$wt)
PATTERN: (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (xor:{ *:[v16i8] } immAllOnesV:{ *:[v16i8] }, (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>)))))
RESULT:  (BCLR_B:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, v16i8:{ *:[v16i8] }:$wt)
PATTERN: (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, (xor:{ *:[v16i8] } immAllOnesV:{ *:[v16i8] }, (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>), v16i8:{ *:[v16i8] }:$wt))))
RESULT:  (BCLR_B:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, v16i8:{ *:[v16i8] }:$wt)
PATTERN: (and:{ *:[v16i8] } (xor:{ *:[v16i8] } (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>))), immAllOnesV:{ *:[v16i8] }), v16i8:{ *:[v16i8] }:$ws)
RESULT:  (BCLR_B:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, v16i8:{ *:[v16i8] }:$wt)
PATTERN: (and:{ *:[v16i8] } (xor:{ *:[v16i8] } (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>), v16i8:{ *:[v16i8] }:$wt)), immAllOnesV:{ *:[v16i8] }), v16i8:{ *:[v16i8] }:$ws)
RESULT:  (BCLR_B:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, v16i8:{ *:[v16i8] }:$wt)
PATTERN: (and:{ *:[v16i8] } (xor:{ *:[v16i8] } immAllOnesV:{ *:[v16i8] }, (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$wt, (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>)))), v16i8:{ *:[v16i8] }:$ws)
RESULT:  (BCLR_B:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, v16i8:{ *:[v16i8] }:$wt)
PATTERN: (and:{ *:[v16i8] } (xor:{ *:[v16i8] } immAllOnesV:{ *:[v16i8] }, (shl:{ *:[v16i8] } (build_vector:{ *:[v16i8] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v16i8] } (build_vector:{ *:[v16i8] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst7>>), v16i8:{ *:[v16i8] }:$wt))), v16i8:{ *:[v16i8] }:$ws)
RESULT:  (BCLR_B:{ *:[v16i8] } v16i8:{ *:[v16i8] }:$ws, v16i8:{ *:[v16i8] }:$wt)
PATTERN: (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (xor:{ *:[v8i16] } (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>), v8i16:{ *:[v8i16] }:$wt)), immAllOnesV:{ *:[v8i16] }))
RESULT:  (BCLR_H:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, v8i16:{ *:[v8i16] }:$wt)
PATTERN: (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (xor:{ *:[v8i16] } immAllOnesV:{ *:[v8i16] }, (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>)))))
RESULT:  (BCLR_H:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, v8i16:{ *:[v8i16] }:$wt)
PATTERN: (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, (xor:{ *:[v8i16] } immAllOnesV:{ *:[v8i16] }, (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>), v8i16:{ *:[v8i16] }:$wt))))
RESULT:  (BCLR_H:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, v8i16:{ *:[v8i16] }:$wt)
PATTERN: (and:{ *:[v8i16] } (xor:{ *:[v8i16] } (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>))), immAllOnesV:{ *:[v8i16] }), v8i16:{ *:[v8i16] }:$ws)
RESULT:  (BCLR_H:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, v8i16:{ *:[v8i16] }:$wt)
PATTERN: (and:{ *:[v8i16] } (xor:{ *:[v8i16] } (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>), v8i16:{ *:[v8i16] }:$wt)), immAllOnesV:{ *:[v8i16] }), v8i16:{ *:[v8i16] }:$ws)
RESULT:  (BCLR_H:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, v8i16:{ *:[v8i16] }:$wt)
PATTERN: (and:{ *:[v8i16] } (xor:{ *:[v8i16] } immAllOnesV:{ *:[v8i16] }, (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$wt, (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>)))), v8i16:{ *:[v8i16] }:$ws)
RESULT:  (BCLR_H:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, v8i16:{ *:[v8i16] }:$wt)
PATTERN: (and:{ *:[v8i16] } (xor:{ *:[v8i16] } immAllOnesV:{ *:[v8i16] }, (shl:{ *:[v8i16] } (build_vector:{ *:[v8i16] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v8i16] } (build_vector:{ *:[v8i16] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst15>>), v8i16:{ *:[v8i16] }:$wt))), v8i16:{ *:[v8i16] }:$ws)
RESULT:  (BCLR_H:{ *:[v8i16] } v8i16:{ *:[v8i16] }:$ws, v8i16:{ *:[v8i16] }:$wt)
PATTERN: (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (xor:{ *:[v4i32] } (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>), v4i32:{ *:[v4i32] }:$wt)), immAllOnesV:{ *:[v4i32] }))
RESULT:  (BCLR_W:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, v4i32:{ *:[v4i32] }:$wt)
PATTERN: (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (xor:{ *:[v4i32] } immAllOnesV:{ *:[v4i32] }, (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>)))))
RESULT:  (BCLR_W:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, v4i32:{ *:[v4i32] }:$wt)
PATTERN: (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, (xor:{ *:[v4i32] } immAllOnesV:{ *:[v4i32] }, (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>), v4i32:{ *:[v4i32] }:$wt))))
RESULT:  (BCLR_W:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, v4i32:{ *:[v4i32] }:$wt)
PATTERN: (and:{ *:[v4i32] } (xor:{ *:[v4i32] } (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>))), immAllOnesV:{ *:[v4i32] }), v4i32:{ *:[v4i32] }:$ws)
RESULT:  (BCLR_W:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, v4i32:{ *:[v4i32] }:$wt)
PATTERN: (and:{ *:[v4i32] } (xor:{ *:[v4i32] } (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>), v4i32:{ *:[v4i32] }:$wt)), immAllOnesV:{ *:[v4i32] }), v4i32:{ *:[v4i32] }:$ws)
RESULT:  (BCLR_W:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, v4i32:{ *:[v4i32] }:$wt)
PATTERN: (and:{ *:[v4i32] } (xor:{ *:[v4i32] } immAllOnesV:{ *:[v4i32] }, (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$wt, (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>)))), v4i32:{ *:[v4i32] }:$ws)
RESULT:  (BCLR_W:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, v4i32:{ *:[v4i32] }:$wt)
PATTERN: (and:{ *:[v4i32] } (xor:{ *:[v4i32] } immAllOnesV:{ *:[v4i32] }, (shl:{ *:[v4i32] } (build_vector:{ *:[v4i32] })<<P:Predicate_vsplat_imm_eq_1>>, (and:{ *:[v4i32] } (build_vector:{ *:[v4i32] } (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>, (imm:{ *:[i32] })<<P:Predicate_immi32Cst31>>), v4i32:{ *:[v4i32] }:$wt))), v4i32:{ *:[v4i32] }:$ws)
RESULT:  (BCLR_W:{ *:[v4i32] } v4i32:{ *:[v4i32] }:$ws, v4i32:{ *:[v4i32] }:$wt)
PATTERN: (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (xor:{ *:[v2i64] } (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>, v2i64:{ *:[v2i64] }:$wt)), (bitconvert:{ *:[v2i64] } immAllOnesV:{ *:[v4i32] })))
RESULT:  (BCLR_D:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, v2i64:{ *:[v2i64] }:$wt)
PATTERN: (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (xor:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } immAllOnesV:{ *:[v4i32] }), (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$wt, (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>))))
RESULT:  (BCLR_D:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, v2i64:{ *:[v2i64] }:$wt)
PATTERN: (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, (xor:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } immAllOnesV:{ *:[v4i32] }), (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>, v2i64:{ *:[v2i64] }:$wt))))
RESULT:  (BCLR_D:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, v2i64:{ *:[v2i64] }:$wt)
PATTERN: (and:{ *:[v2i64] } (xor:{ *:[v2i64] } (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$wt, (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>)), (bitconvert:{ *:[v2i64] } immAllOnesV:{ *:[v4i32] })), v2i64:{ *:[v2i64] }:$ws)
RESULT:  (BCLR_D:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, v2i64:{ *:[v2i64] }:$wt)
PATTERN: (and:{ *:[v2i64] } (xor:{ *:[v2i64] } (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>, v2i64:{ *:[v2i64] }:$wt)), (bitconvert:{ *:[v2i64] } immAllOnesV:{ *:[v4i32] })), v2i64:{ *:[v2i64] }:$ws)
RESULT:  (BCLR_D:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, v2i64:{ *:[v2i64] }:$wt)
PATTERN: (and:{ *:[v2i64] } (xor:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } immAllOnesV:{ *:[v4i32] }), (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$wt, (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>))), v2i64:{ *:[v2i64] }:$ws)
RESULT:  (BCLR_D:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, v2i64:{ *:[v2i64] }:$wt)
PATTERN: (and:{ *:[v2i64] } (xor:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } immAllOnesV:{ *:[v4i32] }), (shl:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_1>>, (and:{ *:[v2i64] } (bitconvert:{ *:[v2i64] } (build_vector:{ *:[v4i32] }))<<P:Predicate_vsplati64_imm_eq_63>>, v2i64:{ *:[v2i64] }:$wt))), v2i64:{ *:[v2i64] }:$ws)
RESULT:  (BCLR_D:{ *:[v2i64] } v2i64:{ *:[v2i64] }:$ws, v2i64:{ *:[v2i64] }:$wt)
PATTERN: (add:{ *:[i32] } (MipsLo:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$lo), GPR32Opnd:{ *:[i32] }:$hi)
RESULT:  (ADDiu_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (tglobaladdr:{ *:[i32] }):$lo)
PATTERN: (add:{ *:[i32] } (MipsLo:{ *:[i32] } (tblockaddress:{ *:[i32] }):$lo), GPR32Opnd:{ *:[i32] }:$hi)
RESULT:  (ADDiu_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (tblockaddress:{ *:[i32] }):$lo)
PATTERN: (add:{ *:[i32] } (MipsLo:{ *:[i32] } (tjumptable:{ *:[i32] }):$lo), GPR32Opnd:{ *:[i32] }:$hi)
RESULT:  (ADDiu_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (tjumptable:{ *:[i32] }):$lo)
PATTERN: (add:{ *:[i32] } (MipsLo:{ *:[i32] } (tconstpool:{ *:[i32] }):$lo), GPR32Opnd:{ *:[i32] }:$hi)
RESULT:  (ADDiu_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (tconstpool:{ *:[i32] }):$lo)
PATTERN: (add:{ *:[i32] } (MipsLo:{ *:[i32] } (tglobaltlsaddr:{ *:[i32] }):$lo), GPR32Opnd:{ *:[i32] }:$hi)
RESULT:  (ADDiu_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (tglobaltlsaddr:{ *:[i32] }):$lo)
PATTERN: (add:{ *:[i32] } (MipsLo:{ *:[i32] } (texternalsym:{ *:[i32] }):$lo), GPR32Opnd:{ *:[i32] }:$hi)
RESULT:  (ADDiu_MM:{ *:[i32] } GPR32Opnd:{ *:[i32] }:$hi, (texternalsym:{ *:[i32] }):$lo)
PATTERN: (add:{ *:[i32] } (MipsGPRel:{ *:[i32] } (tglobaladdr:{ *:[i32] }):$in), GPR32:{ *:[i32] }:$gp)
RESULT:  (ADDiu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (tglobaladdr:{ *:[i32] }):$in)
PATTERN: (add:{ *:[i32] } (MipsGPRel:{ *:[i32] } (tconstpool:{ *:[i32] }):$in), GPR32:{ *:[i32] }:$gp)
RESULT:  (ADDiu_MM:{ *:[i32] } GPR32:{ *:[i32] }:$gp, (tconstpool:{ *:[i32] }):$in)
PATTERN: (fneg:{ *:[f32] } (fadd:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fr, (fmul:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)))
RESULT:  (NMADD_S_MM:{ *:[f32] } FGR32Opnd:{ *:[f32] }:$fr, FGR32Opnd:{ *:[f32] }:$fs, FGR32Opnd:{ *:[f32] }:$ft)
PATTERN: (fneg:{ *:[f64] } (fadd:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fr, (fmul:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)))
RESULT:  (NMADD_D32_MM:{ *:[f64] } AFGR64Opnd:{ *:[f64] }:$fr, AFGR64Opnd:{ *:[f64] }:$fs, AFGR64Opnd:{ *:[f64] }:$ft)
